/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:40:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.portal2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class clusterfile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

if(com.js.util.config.SystemCommon.getUseClusterServer()==1){
	
      out.write("\r\n\tvar FILE_CLUSTER=1;\r\n\tvar FILE_CLUSTERURL=\"");
      out.print(com.js.util.config.SystemCommon.getClusterServerUrl());
      out.write("\";\r\n\t");

}else{
	
      out.write("\r\n\tvar FILE_CLUSTER=0;\r\n\tvar FILE_CLUSTERURL=\"\";\r\n\t");

}

      out.write("\r\nvar SYSTEM_USE_MODULES=\"");
      out.print(com.js.util.config.SystemCommon.getModules() );
      out.write("\";\r\nvar customerName = \"");
      out.print(com.js.util.config.SystemCommon.getCustomerName() );
      out.write("\";\r\nvar system_report_value = \"");
      out.print(com.js.util.config.SystemCommon.getReport() );
      out.write("\";\r\nvar BROWSER_VERSION=\"");
      out.print(session.getAttribute("browserVersion") );
      out.write("\";\r\nvar portalLong = ");
      out.print(com.js.util.config.SystemCommon.getPortalLong() );
      out.write(";//标题显示字节的长度（长标题）\r\nvar portalShort = ");
      out.print(com.js.util.config.SystemCommon.getPortalShort() );
      out.write(";//标题显示字节的长度（短标题）\r\n\r\n/**\r\n * 获得指定长度的标题长度\r\n * title  完整标题\r\n * length  字节数（一个汉字为两个字节）\r\n * return  截取的标题，如果标题长度短与指定字节数，返回标题，如果标题长度超过指定字节数，截取字节后加省略号\r\n**/\r\nfunction getTitleStr(title,length){\r\n\tvar num = 0;\r\n\tvar vStr = title.split(\"\");\r\n\tvar returnValue = \"\";\r\n\tvar i=0;\r\n\twhile(num<=length && i!=vStr.length){\r\n\t\tif (vStr[i].charCodeAt(0)<299) {\r\n\t\t\tnum +=1;\r\n\t\t}else{\r\n\t\t\tnum +=2;\r\n\t\t}\r\n\t\treturnValue += vStr[i]+\"\";\r\n\t\ti++;\r\n\t}\r\n\tif(i<vStr.length){\r\n\t\treturnValue = returnValue+\"…\";\r\n\t}\r\n\treturn returnValue;\r\n}");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
