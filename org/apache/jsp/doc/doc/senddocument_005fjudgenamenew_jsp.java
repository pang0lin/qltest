/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:05:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.doc.doc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.util.DataSourceBase;
import java.sql.ResultSet;
import java.lang.Exception;
import java.sql.SQLException;

public final class senddocument_005fjudgenamenew_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

public boolean Judge(String sql){
	DataSourceBase dataSourceBase = new DataSourceBase();
	boolean flag = true;//无重名返回
	ResultSet rs = null;
	try{
		dataSourceBase.begin();
		rs = dataSourceBase.executeQuery(sql);
		if(rs.next()){
			flag = false;//重名返回
		}
		rs.close();
		dataSourceBase.end();
	}catch(Exception e){
		try{
			if(rs != null){
				rs.close();
			}
			dataSourceBase.end();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
		e.printStackTrace();
	}
	return flag;
} 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
    _jspx_imports_classes.add("java.lang.Exception");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n");
String type=request.getParameter("type");
String sql = "";
if("sendUnit".equals(type)){ //收文单位增加判断单位名，简称
	String typeName = request.getParameter("typeName");
	String name = request.getParameter("name");
	String shortName = request.getParameter("shortName");
	typeName=java.net.URLDecoder.decode(typeName,"UTF-8");
	name=java.net.URLDecoder.decode(name,"UTF-8");
	shortName=java.net.URLDecoder.decode(shortName,"UTF-8");
	sql = "SELECT id FROM doc_documentunit WHERE unittype='"+typeName+"' AND (unitWholeName='"+name+"' or unitShortName='"+shortName+"')";
}
if("updateUnit".equals(type)){//收文单位修改判断单位名，简称
	String unitId = request.getParameter("unitId");
	String typeName = request.getParameter("typeName");
	String name = request.getParameter("name");
	String shortName = request.getParameter("shortName");
	unitId=java.net.URLDecoder.decode(unitId,"UTF-8");
	typeName=java.net.URLDecoder.decode(typeName,"UTF-8");
	name=java.net.URLDecoder.decode(name,"UTF-8");
	shortName=java.net.URLDecoder.decode(shortName,"UTF-8");
	sql = "SELECT id FROM doc_documentunit WHERE unittype='"+typeName+"' and id<>"+unitId+" AND (unitWholeName='"+name+"' or unitShortName='"+shortName+"')";
}
if("sendSeqR".equals(type)){//收文流水号增加判断名称是否重复
	String name = request.getParameter("name");
	name=java.net.URLDecoder.decode(name,"UTF-8");
	sql = "SELECT id FROM doc_receivefileseq WHERE seqNameR='"+name+"'";
}
if("updateSeqR".equals(type)){//收文流水号修改判断名称是否重复
	String name = request.getParameter("name");
	String editId = request.getParameter("editId");
	name=java.net.URLDecoder.decode(name,"UTF-8");
	editId=java.net.URLDecoder.decode(editId,"UTF-8");
	sql = "SELECT id FROM doc_receivefileseq WHERE seqNameR='"+name+"' and id<>"+editId;
}
if("sendSeq".equals(type)){//发文流水号增加判断名称是否重复
	String name = request.getParameter("name");
	name=java.net.URLDecoder.decode(name,"UTF-8");
	sql = "SELECT id FROM doc_senddocumentseq WHERE seqName='"+name+"'";
}
if("updateSeq".equals(type)){//发文流水号修改判断名称是否重复
	String name = request.getParameter("name");
	String seqId = request.getParameter("seqId");
	name=java.net.URLDecoder.decode(name,"UTF-8");
	seqId=java.net.URLDecoder.decode(seqId,"UTF-8");
	sql = "SELECT id FROM doc_senddocumentseq WHERE seqName='"+name+"' and id<>"+seqId;
}
if("sendNum".equals(type)){
	String typeName = request.getParameter("typeName");
	String name = request.getParameter("name");
	typeName=java.net.URLDecoder.decode(typeName,"UTF-8");
	name=java.net.URLDecoder.decode(name,"UTF-8");
	sql = "SELECT * FROM doc_senddocumentnum WHERE numName='"+ name+ "' AND numType='"+typeName+"'";
}
if("updateNum".equals(type)){
	String typeName = request.getParameter("typeName");
	String name = request.getParameter("name");
	String numId = request.getParameter("numId");
	typeName=java.net.URLDecoder.decode(typeName,"UTF-8");
	name=java.net.URLDecoder.decode(name,"UTF-8");
	numId=java.net.URLDecoder.decode(numId,"UTF-8");
	sql = "SELECT id FROM doc_senddocumentnum WHERE numName='"+ name+ "' AND numType='"+typeName+"' and id<>"+numId;
}
//System.out.println("-------"+sql);
if(Judge(sql)){//如果无重名
	out.print("1");
}else{
 	out.print("0");
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
