/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:42:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.userdb;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.config.SystemCommon;
import java.util.*;

public final class getAutoCode_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


public boolean isInteger(String str){
	try{
		Integer.parseInt(str);
	}catch(Exception e){
		return false;
	}
	return true;
}
public static int getWordCountCode(String str, String code){
	int l = 0;
	try{
		l = str.getBytes(code).length;
	}catch (Exception e){
		e.printStackTrace();
	}
	return l;
	
}
private String[] chongPai(String[] temp,int flagInt,String fieldId,String head){
	String[] sqls = {"","","","","false"};
	//跨年编号重排
	//编号头=起始值=填充值=填充长度=增长步长=标记（a(不重排)，b(按年重排)，c(按月重排)，d(按月或年重排)）=年=月=初始值(保存时用来取初始值)
	
	int nowYear=new Date().getYear()+1900;
	int nowMonth=new Date().getMonth()+1;
	//int nowDay=new Date().getDate();
	boolean flag=false;
	if(temp.length<7){
		// 如果没有日期项，更新
		String fieldValue=temp[0]+"="+temp[1]+"="+temp[2]+"="+temp[3]+"="+temp[4]+"=a="+nowYear+"="+nowMonth+"="+temp[1];
		sqls[0] = "update tfield set field_value='"+fieldValue+"' where field_id="+fieldId;
	}else{

		//如果进入新的一年，变成初始值
		if(temp[5].equals("b")&&!temp[6].equals(nowYear+"")){
			flag=true;
		}
		//如果进入新一月，变成初始值
		if(temp[5].equals("c")&&!temp[7].equals(nowMonth+"")){
			flag=true;
		}
		//如果进入新一月或者新一年，变成初始值
		if(temp[5].equals("d")&&(!temp[6].equals(nowYear+"")||!temp[7].equals(nowMonth+""))){
			flag=true;
		}
		//if(flagInt==1 && flag){
		//	sqls[0] = "update tfieldcode set codeYear="+nowYear+",codeMonth="+nowMonth+" where codeHead='"+head+"' and fieldId="+fieldId;
		//}else{
			//sqls[0] = "delete from tfieldcode where codeHead='"+head+"' and codeYear="+nowYear+" and codeMonth="+nowMonth+" and fieldId="+fieldId;
			sqls[0] = "delete from tfieldcode where codeHead='"+head+"' and fieldId="+fieldId;
			sqls[1] = "insert into tfieldcode (codeHead,codeYear,codeMonth,fieldId) values ('"+head+"',"+nowYear+","+nowMonth+","+fieldId+") ";
		//}
	}
	sqls[4] = String.valueOf(flag);
	return sqls;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.util.config.SystemCommon");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");
      out.write("\r\n\r\n");

response.setContentType("text/xml; charset=GBK");
response.setHeader("Cache-Control","no-cache");
request.setCharacterEncoding("GBK");
String pageId = request.getParameter("pageId");
String head = request.getParameter("head");
String field = request.getParameter("field");
com.js.oa.userdb.util.DbOpt dbopt = null;
String newCode = "";
int headlenght = head.length();
if(SystemCommon.getDatabaseType().equalsIgnoreCase("mysql")){
	headlenght = getWordCountCode(head, "UTF-8");
}

try{
	dbopt = new com.js.oa.userdb.util.DbOpt();
	String table = dbopt.executeQueryToStr("select AREA_TABLE from tarea where PAGE_ID="+pageId);
	String codeHead="",codeStart="",codeInsert = "",insertLen="0",codeAdd="",currentValue="",fieldId="";
	String[][] codeValue = dbopt.executeQueryToStrArr2("SELECT field_value,field_codevalue,field_id FROM tfield f JOIN ttable t ON f.field_table=t.table_id WHERE t.table_name='"+table+"' AND f.field_name='"+field+"'",3);
	
	if(codeValue!=null && codeValue.length>0){
		String[] temp = codeValue[0][0]==null?null:codeValue[0][0].split("=");
		fieldId = codeValue[0][2];
		if(temp!=null && temp.length>0){
			codeHead = temp[0];//编号头
			codeStart = temp[1];//起始值
			codeInsert = temp[2];//填充值
			insertLen = temp[3];//填充长度
			codeAdd = temp[4];//增长步长
		}		
		
		String[][] codeP = dbopt.executeQueryToStrArr2("select codeYear,codeMonth from tfieldcode where codeHead='"+head+"' and fieldId="+fieldId+" ORDER BY codeyear DESC,codemonth DESC");
		if(codeP!=null && codeP.length>0 && temp.length>7){
			temp[6] = codeP[0][0];
			temp[7] = codeP[0][1];
		}
		
		//获得数据库中是否已经发起过编号
		String currentCode = dbopt.executeQueryToStr("select "+field+" from "+table+" where "+field+" like '"+head+"%' and LENGTH("+field+")="+(headlenght+Integer.valueOf(insertLen))+" order by "+table+"_id desc");
		//System.out.println("select "+field+" from "+table+" where "+field+" like '"+head+"%' and LENGTH("+field+")="+(headlenght+Integer.valueOf(insertLen))+" order by "+table+"_id desc");
		//System.out.println((headlenght+"     "+Integer.valueOf(insertLen)));

		if(currentCode==null || currentCode.length()<1){//第一次编码
			String[] chong = chongPai(temp,0,fieldId,head);
			
			for(int i=0;i<chong.length-1 && !chong[i].equals("");i++){
				dbopt.executeUpdate(chong[i]);
			}
			currentCode = codeStart;
			int len = currentCode.length();//初始值的长度
			for(int j=0;j<Integer.parseInt(insertLen)-len;j++){
				currentCode = codeInsert + currentCode;
			}
			newCode = head+currentCode;
			
		}else{//已经存在编码
			//System.out.println(currentCode);
			String[] chong = chongPai(temp,1,fieldId,head);
			if(Boolean.valueOf(chong[chong.length-1]) ){
				for(int i=0;i<chong.length-1 && !chong[i].equals("");i++){
					dbopt.executeUpdate(chong[i]);
				}
				int len = temp[8].length();//初始值的长度
				currentCode = temp[8];
				for(int j=0;j<Integer.parseInt(insertLen)-len;j++){
					currentCode = codeInsert + currentCode;
				}
				newCode = head+currentCode;
			}else{
				String codeStr = currentCode.replace(head, "");
				while(codeStr.startsWith(codeInsert) && codeStr.length()>1){
					codeStr = codeStr.substring(codeInsert.length());
				}
				codeStr = (Integer.valueOf(codeStr)+Integer.valueOf(codeAdd))+"";
				int l = codeStr.length();
				if(codeStr.length()<Integer.valueOf(insertLen)){
					for(int i=0;i<(Integer.valueOf(insertLen)-l);i++){
						codeStr = codeInsert+codeStr;
					}
				}
				newCode = head+codeStr;
				
				
				/* for(int i=0;i<currentCode.length();i++){
					String num = "";
					char c = currentCode.charAt(i);
					if(Character.isDigit(c) && c-48>0 && isInteger(currentCode.substring(i,currentCode.length()))){
						String oldNum = currentCode.substring(i,currentCode.length());
						String newNum = String.valueOf(Integer.parseInt(currentCode.substring(i,currentCode.length()))+Integer.valueOf(codeAdd));
						if(newNum!=null && oldNum!=null && newNum.length()>oldNum.length()){
							newCode = currentCode.substring(0,i-1)+newNum;
						}else{
							newCode = currentCode.substring(0,i)+newNum;
						}
						break;
					}
				} */
			}
		}
	}
}catch(Exception ee){
	ee.printStackTrace();
}finally{
	try{dbopt.close();}catch(Exception e){}
	out.print(newCode);
	//out.close();
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
