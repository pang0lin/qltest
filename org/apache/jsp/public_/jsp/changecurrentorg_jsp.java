/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:58:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.public_.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;

public final class changecurrentorg_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");

response.setHeader("Cache-Control", "no-store");
response.setHeader("Pragma", "no-cache");
response.setDateHeader("Expires", 0);

String orgId=request.getParameter("orgId");

Connection conn=null;
String sql,orgNameString="",departId="",orgName=null,orgIdString=null,corpId=null;
String mainOrgId="",mainOrgName="",mainOrgIdString="",mainCorpId="",mainDepartId="",sidelineOrg="",sidelineCorpId="0",sidelineDepartId="0",sidelineOrgIdString="";
int i=0;
try{
	String databaseType = com.js.util.config.SystemCommon.getDatabaseType();
	conn=new com.js.util.util.DataSourceBase().getDataSource().getConnection();
	Statement stmt=conn.createStatement();
	sql="SELECT oo.orgName,oo.org_id,oo.orgidstring FROM org_organization oo,org_organization_user ou where oo.org_id=ou.org_id and ou.emp_id="+session.getAttribute("userId");
	ResultSet rs=stmt.executeQuery(sql);
	if(rs.next()){
		mainOrgName=rs.getString(1);
		mainOrgId=rs.getString(2);
		mainOrgIdString=rs.getString(3);
	}
	rs.close();
	
	//取得当前用户的兼职组织
	sql="select sidelineorg from org_employee where emp_id="+session.getAttribute("userId");
	rs=stmt.executeQuery(sql);
	if(rs.next()){
		sidelineOrg=rs.getString(1);
	}
	rs.close();
		
	if(!mainOrgId.equals(orgId)){
		//要跳转的组织为兼职组织，把主组织列为兼职组织
		//根据主组织取得corpId，departId等
		if(databaseType.indexOf("mysql")>=0){
			sql="select orgName,org_id,orgType from org_organization where '"+mainOrgIdString+"' like concat('%$', org_Id, '$%') and org_Id<>-1 ORDER BY orgLevel";
		}else{
			sql="select orgName,org_id,orgType from org_organization where '"+mainOrgIdString+"' like JSDB.FN_LINKCHAR(JSDB.FN_LINKCHAR('%$', JSDB.FN_INTTOSTR(org_Id)), '$%') and org_Id<>-1 ORDER BY orgLevel";
		}
		
		i=0;
		rs=stmt.executeQuery(sql);
		while(rs.next()){
			if(i==0){
				mainCorpId=rs.getString(2);
				mainDepartId=corpId;
			}else{
				mainDepartId=rs.getString(2);
			}			
			i++;
		}
		rs.close();
		if(i<2){
			mainDepartId=mainCorpId;
	    }
		
	}
	
	sql="SELECT orgName,orgIdString FROM org_organization where org_id="+orgId;
	rs=stmt.executeQuery(sql);
	if(rs.next()){
		orgName=rs.getString(1);
		orgIdString=rs.getString(2);
	}
	rs.close();
	
	if(databaseType.indexOf("mysql")>=0){
		sql="select orgName,org_id,orgType from org_organization where '"+orgIdString+"' like concat('%$', org_Id, '$%') and org_Id<>-1 ORDER BY orgLevel";
	}else{
		sql="select orgName,org_id,orgType from org_organization where '"+orgIdString+"' like JSDB.FN_LINKCHAR(JSDB.FN_LINKCHAR('%$', JSDB.FN_INTTOSTR(org_Id)), '$%') and org_Id<>-1 ORDER BY orgLevel";
	}
	i=0;
	rs=stmt.executeQuery(sql);
	while(rs.next()){
		
		if(i==0){
			orgNameString=rs.getString(1);
			corpId=rs.getString(2);
			departId=corpId;
		}else{
			orgNameString+=rs.getString(1);
			departId=rs.getString(2);
		}
		
		i++;
	}
	rs.close();
	if(i<2){
    	departId=corpId;
    }
	
	session.setAttribute("orgIdString",com.js.util.util.StringSplit.splitOrgIdString(orgIdString, "$", "_"));
	session.setAttribute("orgId", orgId);
	session.setAttribute("orgName",orgNameString);
	session.setAttribute("rootCorpId","");
	session.setAttribute("corpId",corpId);
	session.setAttribute("departId", departId);

	if(!mainOrgId.equals(orgId)){
		//要跳转的组织为兼职组织，把主组织列为兼职组织
		session.setAttribute("sidelineCorpId", mainCorpId);
		session.setAttribute("sidelineDepartId", mainDepartId);
	}else{
		//要跳转到主组织，选择第一个兼职组织设置 兼职组织corpId等信息
		sidelineOrg=sidelineOrg.substring(1,sidelineOrg.length()-1);
        sidelineDepartId=sidelineOrg.split("\\*\\*")[0];
        sql="select orgidstring from org_organization where org_id="+sidelineDepartId;
        rs=stmt.executeQuery(sql);
        if(rs.next()){
        	sidelineOrgIdString=rs.getString(1);
        }
        rs.close();
        if(databaseType.indexOf("mysql")>=0){
        	sql="select org_id from org_organization where '"
                    + sidelineOrgIdString +
                   "' LIKE concat('%$', org_id, '$%') and orgparentorgid=0";
        }else{
        	sql="select org_id from org_organization where '"
                    + sidelineOrgIdString +
                   "' like JSDB.FN_LINKCHAR(JSDB.FN_LINKCHAR('%$', JSDB.FN_INTTOSTR(org_Id)), '$%') and orgparentorgid=0";
        }
        rs=stmt.executeQuery(sql);
        if(rs.next()){
        	sidelineCorpId=rs.getString(1);
        }
        rs.close();
        session.setAttribute("sidelineCorpId", sidelineCorpId);
		session.setAttribute("sidelineDepartId", sidelineDepartId);
        
	}
		
	stmt.close();
	conn.close();
}catch(Exception e){
	if(conn!=null){
		conn.close();
	}
	e.printStackTrace();
}


      out.write("\r\n<script>\r\nparent.location.href=\"/jsoa/desktop.jsp\";\r\n</script>\r\n\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
