/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:55:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.info;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.info.isodoc.service.IsoDocBD;
import java.util.*;
import com.js.lang.Resource;
import com.js.oa.info.infomanager.service.*;
import java.util.*;

public final class isoDoc_005fstat_005fexport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-logic.tld", Long.valueOf(1499751390000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.js.oa.info.infomanager.service");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.lang.Resource");
    _jspx_imports_classes.add("com.js.oa.info.isodoc.service.IsoDocBD");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fname_005fid;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fname_005fid = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fname_005fid.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/vnd.ms-excel;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n   \r\n\r\n");

String local = session.getAttribute("org.apache.struts.action.LOCALE").toString();

      out.write("\r\n\r\n");

response.setHeader("Content-disposition","attachment;filename=statExport.xls");

      out.write("\r\n\r\n\r\n");

request.setCharacterEncoding("GBK");

      out.write('\r');
      out.write('\n');

IsoDocBD isoDocBD=new IsoDocBD();

      out.write("\r\n<html>\r\n <meta http-equiv=\"content-type\" content=\"text/html; charset=gbk\">    \r\n<head>\r\n    <title>文档修改导出</title>\r\n</head>\r\n<body>\r\n<table border=\"1\">\r\n\t<tr>\r\n\t<td align=\"center\">");
      out.print(Resource.getValue(local, "iso", "ISO.filename"));
      out.write("</td>\r\n\t<td align=\"center\">");
      out.print(Resource.getValue(local, "information", "info.newinfoarticleno"));
      out.write("</td>\r\n\t<td align=\"center\">");
      out.print(Resource.getValue(local, "iso", "ISO.isoDealCategory"));
      out.write("</td>\r\n\t<td align=\"center\">");
      out.print(Resource.getValue(local, "information", "info.detailversion"));
      out.write("</td>\r\n\t<td align=\"center\">");
      out.print(Resource.getValue(local, "iso", "ISO.modifyMen"));
      out.write("</td>\r\n\t<td align=\"center\">");
      out.print(Resource.getValue(local, "iso", "ISO.modifyTime"));
      out.write("</td>\r\n\t<td align=\"center\">");
      out.print(Resource.getValue(local, "iso", "ISO.isoAmendmentPage"));
      out.write("</td>\r\n\t</tr>\r\n\r\n\r\n");
      //  logic:iterate
      org.apache.struts.taglib.logic.IterateTag _jspx_th_logic_005fiterate_005f0 = (org.apache.struts.taglib.logic.IterateTag) _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fname_005fid.get(org.apache.struts.taglib.logic.IterateTag.class);
      boolean _jspx_th_logic_005fiterate_005f0_reused = false;
      try {
        _jspx_th_logic_005fiterate_005f0.setPageContext(_jspx_page_context);
        _jspx_th_logic_005fiterate_005f0.setParent(null);
        // /info/isoDoc_stat_export.jsp(41,0) name = id type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_logic_005fiterate_005f0.setId("informationList");
        // /info/isoDoc_stat_export.jsp(41,0) name = name type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_logic_005fiterate_005f0.setName("informationList");
        int _jspx_eval_logic_005fiterate_005f0 = _jspx_th_logic_005fiterate_005f0.doStartTag();
        if (_jspx_eval_logic_005fiterate_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          java.lang.Object informationList = null;
          if (_jspx_eval_logic_005fiterate_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_logic_005fiterate_005f0);
          }
          informationList = (java.lang.Object) _jspx_page_context.findAttribute("informationList");
          do {
            out.write('\r');
            out.write('\n');

Object[] obj = (Object[]) informationList;
InformationBD informationBD = new InformationBD();
List historyList = informationBD.getHistoryVersion(""+obj[0]);
int rowNum=1;
if(historyList!=null&&historyList.size()>0){
rowNum=historyList.size()+1;
}

            out.write("\r\n<tr >\r\n<td  rowspan=\"");
            out.print(rowNum);
            out.write('"');
            out.write('>');
            out.print(obj[1]);
            out.write("</td>\r\n<td  rowspan=\"");
            out.print(rowNum);
            out.write('"');
            out.write('>');
            out.print(obj[18]);
            out.write("</td>\r\n\r\n\t");
  
	String  isoDealCategory1=""+obj[31]; 
		String isoDealCategory1_str="";

		if(isoDealCategory1.equals("0")){
		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Cadd");

		}else if(isoDealCategory1.equals("1")){

		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Cmodify");
		}else if(isoDealCategory1.equals("2")){
		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Cdestroy");


		}else if(isoDealCategory1.equals("3")){
		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Czuifa");				

		}else{
		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Cbufenzz");	

		}

		String nowmoifyMen="";
		if(obj[29]!=null&&!obj[29].toString().equals("")&&!obj[29].toString().equals("null")){
		nowmoifyMen=""+obj[29];	
		}else{
		nowmoifyMen=""+obj[12];

		}

		String  xiudingye="";
		if(obj[28]!=null&&!obj[28].toString().equals("null")){
		
		xiudingye=""+obj[28];
		}
	
            out.write("\r\n  \r\n<td  >");
            out.print(isoDealCategory1_str);
            out.write("&nbsp;</td>\r\n<td  >");
            out.print(obj[4]);
            out.write("&nbsp;</td>\r\n<td>");
            out.print(nowmoifyMen);
            out.write("&nbsp;</td>\r\n<td>");

String tmp = obj[21].toString();
if(tmp.indexOf(" ") > 0){
out.print(tmp.substring(0,tmp.indexOf(" ")));
}else{
out.print(tmp);
}

            out.write("</td>\r\n<td>");
            out.print(xiudingye);
            out.write("&nbsp;</td>\r\n</tr>\r\n");

if(historyList!=null&&historyList.size()>0){

for(int jj=0;jj<historyList.size();jj++){
Object [] hisObj=(Object[])historyList.get(jj);

            out.write("\r\n<tr >\r\n\r\n");
  
	    isoDealCategory1=""+hisObj[8]; 
		 isoDealCategory1_str="";

		if(isoDealCategory1.equals("0")){
		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Cadd");

		}else if(isoDealCategory1.equals("1")){

		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Cmodify");
		}else if(isoDealCategory1.equals("2")){
		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Cdestroy");


		}else if(isoDealCategory1.equals("3")){
		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Czuifa");				

		}else{
		isoDealCategory1_str=Resource.getValue(local, "iso", "ISO.Cbufenzz");	

		}

				String nowmoifyMen2="";
			if(hisObj[2]!=null&&!hisObj[2].toString().equals("")&&!hisObj[2].toString().equals("null")){
			nowmoifyMen2=""+hisObj[2];	
			}else{
			nowmoifyMen2=""+obj[12];
			}

		String  xiudingye2="";
		if(hisObj[9]!=null&&!hisObj[9].toString().equals("null")){		
		    xiudingye2=""+hisObj[9];
		}
	
            out.write("\r\n  \r\n\r\n<td  >");
            out.print(isoDealCategory1_str);
            out.write("&nbsp;</td>\r\n<td  >");
            out.print(hisObj[0]);
            out.write("&nbsp;</td>\r\n<td  >");
            out.print(nowmoifyMen2);
            out.write("&nbsp;</td>\r\n<td >");

String tmp1 = hisObj[3].toString();
if(tmp1.indexOf(" ") > 0){
out.print(tmp1.substring(0,tmp1.indexOf(" ")));
}else{
out.print(tmp1);
}

            out.write("</td>\r\n<td >");
            out.print(xiudingye2);
            out.write("&nbsp;</td>\r\n</tr>\r\n");
}
}
            out.write('\r');
            out.write('\n');
            int evalDoAfterBody = _jspx_th_logic_005fiterate_005f0.doAfterBody();
            informationList = (java.lang.Object) _jspx_page_context.findAttribute("informationList");
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_logic_005fiterate_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_logic_005fiterate_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fname_005fid.reuse(_jspx_th_logic_005fiterate_005f0);
        _jspx_th_logic_005fiterate_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_logic_005fiterate_005f0, _jsp_getInstanceManager(), _jspx_th_logic_005fiterate_005f0_reused);
      }
      out.write("\r\n\r\n</table>\r\n</body>\r\n</html>\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
