/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:07:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.system.util.StaticParam;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.sql.*;
import java.sql.*;
import com.js.util.util.BrowserJudge;

public final class wf_005fstepanduser_005forgselfsend_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/public/jsp/online.jsp", Long.valueOf(1499751452000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.system.util.StaticParam");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.js.util.util.BrowserJudge");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n \r\n\r\n\r\n\r\n\r\n");
      out.write("\r\n<script language=\"JScript.Encode\" src=\"/jsoa/js/browinfo.js\"></script>\r\n<script language=\"JScript.Encode\" src=\"/jsoa/js/rtxint.js\"></script>\r\n<script language=\"javascript\">\r\n\r\nfunction rtxonline(a){\r\n\t RAP(a);\r\n}\r\n\r\n</script>");
      out.write("\r\n\r\n");

request.setCharacterEncoding("GBK");
response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);
int menuIndex=0;

DataSource ds = new com.js.util.util.DataSourceBase().getDataSource();
Connection conn=null;
Statement stmt=null;
ResultSet rs=null;
conn=ds.getConnection();
stmt=conn.createStatement();

boolean bflag=false;
if(BrowserJudge.isMSIE(request)){
	bflag=true;
}



      out.write("\r\n<!-- 流程办理中间节点选择阅件人页面 -->\r\n");

//当前节点参数
String processId = request.getParameter("processId");
String tableId = request.getParameter("tableId");
String recordId = request.getParameter("recordId");
String activityId = request.getParameter("activityId");//后继节点
String curActivityId = request.getParameter("curActivityId");//当前节点
String standForUserId = request.getParameter("standForUserId");//代办人ID

com.js.oa.jsflow.service.WorkFlowButtonBD workFlowButtonBD = new com.js.oa.jsflow.service.WorkFlowButtonBD();
com.js.oa.jsflow.service.WorkFlowBD workFlowBD = new com.js.oa.jsflow.service.WorkFlowBD();
com.js.oa.jsflow.vo.WorkVO vo = new com.js.oa.jsflow.vo.WorkVO();

//System.out.println("此节点处理的浏览器为:"+request.getHeader("User-Agent"));
//System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())+"  流程发送：processId:"+processId+"    tableId:"+tableId+"   recordId:"+recordId+"   activityId(后继节点):"+activityId+"   curActivityId:"+curActivityId);

//参与者类型
//0 流程发起人的上级领导
//1 由上一节点参与者从所有用户中选择
//2 从候选人员中指定
//3 指定全部办理人
//4 由表单中的某个字段值决定
String[] nextUser = workFlowBD.getProcActiUser(tableId,recordId,curActivityId);

String selectUser = "";//待选人员
String selectUserName = "";//待选人员
String selectUserAccounts = "";//待选人员

String range = "*0*";//指定范围
String show = "";//显示

//
String participantUserField = "";//表单中的某个字段名

//显示短信
boolean showSmsRemind = false;
if(nextUser[24] != null){
	showSmsRemind = nextUser[24].toString().equals("1") ? true : false;
}

//流程阅件人类型
int participantType=-1;
if(null!=nextUser[14] && !"".equals(nextUser[14])){
	participantType = Integer.parseInt(nextUser[14]);
	if(0 == participantType){	// 流程发起人的上级领导 
		
		java.util.List leaderList = workFlowBD.getLeaderList(request.getParameter("submitPersonId"));

		for(int i=0;i<leaderList.size();i++){
			Object[] tmp = (Object[])leaderList.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
	} else if(1 == participantType){	// 由上一节点参与者从所有用户中选择
		// show += "user";
		// 与指定范围相同的处理（范围为全部*0*）   从指定范围中选定
		range = "*0*";
		show="userorggroup";
	} else if(2 == participantType){	// 从候选人中指定
		
		java.util.List candidate = workFlowBD.getCandidate(nextUser[15],nextUser[16]);
		for(int i=0;i<candidate.size();i++){
			Object[] tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
	} else if(3 == participantType){	// 指定全部办理人
		
		java.util.List candidate = workFlowBD.getCandidate(nextUser[15],nextUser[16]);
		for(int i=0;i<candidate.size();i++){
			Object[] tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
	} else if(4 == participantType){	// 由表单中的某个字段值决定
		participantUserField = nextUser[17];
		participantUserField = workFlowButtonBD.getFieldInfoByFieldId(participantUserField);
	} else if(5 == participantType){	// 流程发起人
		
		selectUser = request.getParameter("submitPersonId");
		selectUserName = new com.js.system.service.usermanager.UserBD().getUserNameById(request.getParameter("submitPersonId"));
	} else if(6 == participantType){	// 从角色中指定 
		
		//确定当前办理人，如果有待办或转办应该以最初制定的执行人为准
		String currentUserId=session.getAttribute("userId").toString();
		
		if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
			String tranFromPersonId="";
			if(request.getParameter("tranFromPersonId")!=null && !"null".equals(request.getParameter("tranFromPersonId")) && !"".equals(request.getParameter("tranFromPersonId")) && !"-1".equals(request.getParameter("tranFromPersonId"))){
		        tranFromPersonId=request.getParameter("tranFromPersonId");			
			
				//判断转办人是否还有转办人
				String tranFromPersonIdTemp=tranFromPersonId;
		        while(!"".equals(tranFromPersonId)){                	
		        	rs=stmt.executeQuery("select tranfrompersonid from jsf_work where wf_curemployee_id="+tranFromPersonId+" and initactivity="+curActivityId+" and workrecord_id="+recordId+" and worktable_id="+tableId);
		        	if(rs.next()){
		        		tranFromPersonId=rs.getString(1);
		        	}
		        	rs.close();
		        	
		        	if(tranFromPersonId==null || "null".equals(tranFromPersonId)){
		        		tranFromPersonId="";
		        	}else{
		        		tranFromPersonIdTemp=tranFromPersonId;
		        	}                	
		        }
		        
		        tranFromPersonId=tranFromPersonIdTemp;
			}
			
			//转办判断
			if(!"".equals(tranFromPersonId)){
				currentUserId = tranFromPersonId;
			}
		} else{
			//有代办人的情况
			currentUserId=standForUserId;
		}
		java.util.List candidate = workFlowBD.getRoleUserIDAndName(nextUser[20], request.getParameter("submitPersonId")+";"+currentUserId);
		for(int i=0;i<candidate.size();i++){
			Object[] tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
	} else if(7 == participantType){	// 上一节点办理人的上级领导
		
		java.util.List leaderList = null;
		
		//确定当前办理人，如果有待办或转办应该以最初制定的执行人为准
		if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
			String tranFromPersonId="";
			if(request.getParameter("tranFromPersonId")!=null && !"null".equals(request.getParameter("tranFromPersonId")) && !"".equals(request.getParameter("tranFromPersonId")) && !"-1".equals(request.getParameter("tranFromPersonId"))){
		        tranFromPersonId=request.getParameter("tranFromPersonId");			
			
				//判断转办人是否还有转办人
				String tranFromPersonIdTemp=tranFromPersonId;
		        while(!"".equals(tranFromPersonId)){                	
		        	rs=stmt.executeQuery("select tranfrompersonid from jsf_work where wf_curemployee_id="+tranFromPersonId+" and initactivity="+curActivityId+" and workrecord_id="+recordId+" and worktable_id="+tableId);
		        	if(rs.next()){
		        		tranFromPersonId=rs.getString(1);
		        	}
		        	rs.close();
		        	
		        	if(tranFromPersonId==null || "null".equals(tranFromPersonId)){
		        		tranFromPersonId="";
		        	}else{
		        		tranFromPersonIdTemp=tranFromPersonId;
		        	}                	
		        }
		        
		        tranFromPersonId=tranFromPersonIdTemp;    
			}
			
			if(null == request.getParameter("yj")){	// 阅件参数为空，表示不是流程办理是选择阅件人
				// 取流程上节点办理人ID
				String upEmpId = workFlowBD.getUpActivityUser(processId, tableId, recordId, curActivityId);
				if("".equals(upEmpId)){	// 上节点办理人不存在，上节点为流程发起节点
					upEmpId = request.getParameter("submitPersonId");
				}
				leaderList = workFlowBD.getLeaderList(upEmpId);
			} else{
				//转办判断
				if(!"".equals(tranFromPersonId)){
					leaderList = workFlowBD.getLeaderList(tranFromPersonId);
				}else{
					leaderList = workFlowBD.getLeaderList(session.getAttribute("userId").toString());
				}
			}
		} else{
			if(null == request.getParameter("yj")){	// 阅件参数为空，表示不是流程办理是选择阅件人
				// 取流程上节点办理人ID
				String upEmpId = workFlowBD.getUpActivityUser(processId, tableId, recordId, curActivityId);
				if("".equals(upEmpId)){	// 上节点办理人不存在，上节点为流程发起节点
					upEmpId = request.getParameter("submitPersonId");
				}
				leaderList = workFlowBD.getLeaderList(upEmpId);
			} else{
				//有代办人的情况
				leaderList = workFlowBD.getLeaderList(standForUserId);
			}
			
		}
		/*
		if("0".equals(standForUserId)){
			leaderList = workFlowBD.getLeaderList(session.getAttribute("userId").toString());
		} else{
			leaderList = workFlowBD.getLeaderList(standForUserId);
		}
		*/
		for(int i=0;i<leaderList.size();i++){
			Object[] tmp = (Object[])leaderList.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
	} else if(8 == participantType){	// 从指定范围中选定
		range = nextUser[23].toString();
		show="user";
		if(range != null && !range.equals("") && range.indexOf("@") >= 0){
			show+="group";
		}
		if(range != null && !range.equals("") && range.indexOf("*") >= 0){
			show+="org";
		}
	} else if(9 == participantType){	// 由上一节点参与者从所在组织中选择
		range = "*"+session.getAttribute("orgId")+"*";
		show += "user";
	} else if(10 == participantType){	// 组织领导
		if(null == request.getParameter("yj")){	// 取上节点办理人ID和部门ID
			String upEmpId = workFlowBD.getUpActivityUser(processId, tableId, recordId, curActivityId);
			if("".equals(upEmpId)){	// 上节点办理人不存在，上节点为流程发起节点
				upEmpId = request.getParameter("submitPersonId");
			}
			range = "*" + StaticParam.getOrgIdByEmpId(upEmpId) + "*";
		} else{
			range = "*"+session.getAttribute("orgId")+"*";
		}
		show += "org";
	} else if(11 == participantType){	// 上一节点所有参与者
		
		List candidate = null;
		if(null == request.getParameter("yj")){	// 取上个节点的所有参与人
			candidate = workFlowBD.getActivityUsers(processId, tableId, recordId, curActivityId, "0");
		} else{
			/*
			vo.setProcessId(Long.valueOf(processId));
			vo.setTableId(Long.valueOf(tableId));
			vo.setRecordId(Long.valueOf(recordId));
			vo.setActivity(Long.valueOf(curActivityId));
	
			candidate = workFlowButtonBD.getFrontActivityOper(vo);
			*/
			candidate = workFlowBD.getActivityUsers(processId, tableId, recordId, curActivityId, "0");
		}
		if(candidate.size() > 0){
			for(int i=0;i<candidate.size();i++){
				Object[] tmp = (Object[])candidate.get(i); 
				selectUser += tmp[0]+",";
				selectUserName += tmp[1]+",";
			}
			if(selectUser.indexOf(",")!=-1){
				selectUser = selectUser.substring(0,selectUser.length()-1);
				selectUserName = selectUserName.substring(0,selectUserName.length()-1);
			}
		} else{	// 上个节点是流程发起节点
			selectUser = request.getParameter("submitPersonId");
			selectUserName = StaticParam.getEmpNameByEmpId(request.getParameter("submitPersonId"));
		}
		
	} else if(12 == participantType){	// 由上一节点参与者从所有组织中选择
		show += "org";
	} else if(13 == participantType){	// 由上一节点参与者从所有群组中选择
		//show += "group";
		range = nextUser[23].toString();
		if(range != null){
			show = "usergroup";
		}
	} else if(14 == participantType){
		//流程发起人上级组织 并且 职务级别
		List candidate = workFlowButtonBD.getLeaderByDutyLevelAndOrg(request.getParameter("submitPersonId"),nextUser[18]);
		for(int i=0;i<candidate.size();i++){
			Object[] tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
	} else if(15 == participantType){
		//从岗位中指定 
		//确定当前办理人，如果有待办或转办应该以最初制定的执行人为准
		String currentUserId=session.getAttribute("userId").toString();
		
		if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
			String tranFromPersonId="";
			if(request.getParameter("tranFromPersonId")!=null && !"null".equals(request.getParameter("tranFromPersonId")) && !"".equals(request.getParameter("tranFromPersonId")) && !"-1".equals(request.getParameter("tranFromPersonId"))){
		        tranFromPersonId=request.getParameter("tranFromPersonId");			
			
				//判断转办人是否还有转办人
				String tranFromPersonIdTemp=tranFromPersonId;
		        while(!"".equals(tranFromPersonId)){                	
		        	rs=stmt.executeQuery("select tranfrompersonid from jsf_work where wf_curemployee_id="+tranFromPersonId+" and initactivity="+curActivityId+" and workrecord_id="+recordId+" and worktable_id="+tableId);
		        	if(rs.next()){
		        		tranFromPersonId=rs.getString(1);
		        	}
		        	rs.close();
		        	
		        	if(tranFromPersonId==null || "null".equals(tranFromPersonId)){
		        		tranFromPersonId="";
		        	}else{
		        		tranFromPersonIdTemp=tranFromPersonId;
		        	}                	
		        }
		        
		        tranFromPersonId=tranFromPersonIdTemp;
			}
			
			//转办判断
			if(!"".equals(tranFromPersonId)){
				currentUserId = tranFromPersonId;
			}
		} else{
			//有代办人的情况
			currentUserId=standForUserId;
		}
		
		java.util.List candidate = workFlowBD.getPositionUserIDAndName(nextUser[20], request.getParameter("submitPersonId")+";"+currentUserId);
		for(int i=0;i<candidate.size();i++){
			Object[] tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
	}
}

if(!"".equals(selectUser)){
	selectUserAccounts = new com.js.system.service.usermanager.UserBD().getUserAccountByIds(selectUser);
}


      out.write("\r\n<!DOCTYPE HTML>\r\n<HTML>\r\n\t<HEAD>\r\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gbk\">\r\n\t\t<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\t\t<script type=\"text/javascript\" src=\"/jsoa/js/weixin/jquery-1.7.2.min.js\"></script>\r\n\t\t");

		if(bflag){
			
      out.write("<SCRIPT language=javascript src=\"/jsoa/jsflow/wf_stepanduser_tree.js\"></SCRIPT>");

		} else{
			
      out.write("<SCRIPT language=javascript src=\"/jsoa/jsflow/wf_stepanduser_tree_o.js\"></SCRIPT>");

		}
		
      out.write("\r\n\t\t<style type=\"text/css\">\r\n\t\t.Hidden { display: none;}\r\n\t\t.Show { display:;}\r\n\t\t</style>\r\n\t</HEAD>\r\n\r\n\t<body>\r\n\t\t<table width=\"100%\" height=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n\t\t\t<tr id=\"submenuBox");
      out.print(menuIndex);
      out.write("\" valign=\"top\" style=\"display:;\">\r\n\t\t\t\t<td height=\"100\">\r\n\t\t\t\t\t<div id=\"org_list\"></div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>&nbsp;</td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</BODY>\r\n</HTML>\r\n<SCRIPT LANGUAGE=\"JavaScript\">\r\nvar selectedObject = \"selectObject\";\r\nfunction HightLight(obj){\r\n\tobj.style.color = \"red\";\r\n}\r\n\r\nfunction NomalLight(obj){\r\n\tobj.style.color = \"black\";\r\n}\r\n\r\n//添加所有选项\r\nfunction openMainFrameAll(){\r\n\tvar topTs = document.all.topTable;\r\n\tvar topT ;\r\n\tif(topTs.length){\r\n\t\ttopT = topTs[topTs.length-1];\r\n\t} else{\r\n\t\ttopT = document.all.topTable;\r\n\t}\r\n\r\n\tvar aLength = topT.getElementsByTagName(\"a\").length;\r\n\tfor(var i=0; i<aLength; i++){\r\n\t\tif(topT.getElementsByTagName(\"a\")[i]){\r\n\t\t\ttopT.getElementsByTagName(\"a\")[i].click();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction openMainFrame(opValue,opText){\r\n\tvar oSelect=window.parent.document.frm2.selectObject;\r\n\tvar nLen =oSelect.length;\r\n\r\n\tvar hasOpt = false;\r\n\tfor(i=0; i<nLen; i++){\r\n\t\tvar optObj = oSelect.options[i];\r\n\t\tif(optObj.value == opValue){\r\n\t\t\thasOpt = true;\r\n\t\t}\r\n\t}\r\n\r\n");
      out.write("\t//添加到列表框\r\n\tif(!hasOpt){\r\n\t\tif(window.parent.document.frm2.participantType.value==10){\r\n\t\t\t//选择部门领导\r\n\t\t\tvar response=getParentOrgLeader(opValue); //wf_stepanduser_tree.js\r\n\t\t\t\t\t\t\t\r\n\t\t\tif(response!=null && response.responseText!=\"\" && response.responseXML.documentElement!=null){\r\n\t\t\t\tvar root=response.responseXML.documentElement;\r\n\t\t\t\tvar message= root.getElementsByTagName(\"manager\");\r\n\t\t\t\tfor(var i=0;i<message.length;i++){\r\n\t\t\t\t\t\r\n\t\t\t\t\t//判断当前的用户是否已经选择\r\n\t\t\t\t\tvar userExist=0;\r\n\t\t\t\t\tfor(var j=0;j<oSelect.options.length;j++){\r\n\t\t\t\t\t\tif(oSelect.options[j].value==\"$\"+message[i].getElementsByTagName(\"empId\")[0].firstChild.nodeValue+\"$\"){\r\n\t\t\t\t\t\t\tuserExist=1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(userExist==0){\r\n\t\t\t\t\t\tvar oOption = document.createElement(\"OPTION\");\r\n\t\t\t\t\t\toSelect.options.add(oOption);\r\n\t\t\t\t\t\toOption.innerText = message[i].getElementsByTagName(\"empName\")[0].firstChild.nodeValue;\r\n\t\t\t\t\t\toOption.value = \"$\"+message[i].getElementsByTagName(\"empId\")[0].firstChild.nodeValue+\"$\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n");
      out.write("\t\t\tvar oOption = document.createElement(\"OPTION\");\r\n\t\t\toSelect.options.add(oOption);\r\n\t\t\t");

			if(bflag){
				
      out.write("oOption.innerText = opText;");

			} else{
				
      out.write("oOption.textContent = opText;");

			} 
			if(BrowserJudge.isNotPc(request)){
				
      out.write("\r\n\t\t\t\tvar showNames = window.parent.document.getElementById(\"showNames2\");\r\n\t\t\t\tvar htmlDiv=\"<div id='A\"+opValue+\"A2' name='A\"+opValue+\"A2' title='点击移出' onclick=\\\"dropNameDiv2('A\"+opValue+\"A2','\"+opValue+\"')\\\"  style='cursor:pointer;float:left;width:100%;fontSize:12px;'>\" +opText+\"</div>\";\r\n  \t        \tshowNames.innerHTML += htmlDiv;\r\n\t\t\t\t");

			}
			
      out.write("\r\n\t\t\toOption.value = opValue;\t\t\t\t\r\n\t\t}\t\t\t\r\n\t}\r\n}\r\n\r\nwindow.parent.document.frm2.participantType.value=\"");
      out.print(participantType);
      out.write("\";\r\n\r\n");

//判断页面显示方式(从候选人，从所有组织，从角色，从所有群组)
if(participantType==1 || participantType==8 || participantType==2 || participantType==9 
		|| participantType==10  || participantType==6 || participantType==13 || participantType==0 || participantType==7 
		|| participantType==11 || participantType==14 || participantType==15){
	
      out.write("\r\n\twindow.parent.document.getElementById(\"middleTR2\").style.display='';\r\n\twindow.parent.document.getElementById(\"selTextarea2\").style.display='none';\t\r\n\r\n\t//初始化默认框\r\n\tvar oSelect = window.parent.document.frm2.selectObject;\r\n\r\n\t//删除\r\n\tvar nLen = oSelect.length;\r\n\tfor(j=0; j<nLen; j++){\r\n\t\toSelect.remove(0);\r\n\t}\r\n\t");

	if(BrowserJudge.isNotPc(request)){
		
      out.write("\r\n\t\tvar showNames2 = window.parent.document.getElementById(\"showNames2\");\r\n\t\tshowNames2.innerHTML = \"\";\r\n\t\t");

	}
	
      out.write("\r\n\t// 赋值 阅件不做此设置\r\n\t/*\r\n\tvar opText = \"");
      out.print(selectUserName);
      out.write("\";\r\n\tvar opValue = \"");
      out.print(selectUser);
      out.write("\";\r\n\tif(parent.document.frm2.all.participantType.value!=2 && parent.document.frm2.all.participantType.value!=4){\r\n\t\t//if(opText.indexOf(\",\")!=-1){\r\n\t\t\tvar opTextArr = opText.split(\",\");\r\n\t\t\tvar opValueArr = opValue.split(\",\");\r\n\t\t\tif(opTextArr.length == 1){\r\n\t\t\t\tfor(var i=0; i<opTextArr.length; i++){\r\n\t\t\t\t\tif(opTextArr[i] != ''){\r\n\t\t\t\t\t\tvar oOption = document.createElement(\"OPTION\");\r\n\t\t\t\t\t\toSelect.options.add(oOption);\r\n\t\t\t\t\t\toOption.innerText = opTextArr[i];\r\n\t\t\t\t\t\toOption.value = \"$\"+opValueArr[i]+\"$\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t//} \r\n\t}\r\n\t*/\r\n\t");

} else{
	// 显示textarea
	
      out.write("\r\n\tvar middleTR2 = window.parent.document.getElementById(\"middleTR2\");\r\n\tif(null != middleTR2) middleTR2.style.display = \"none\";\r\n\tvar selTextarea2 = window.parent.document.getElementById(\"selTextarea2\");\r\n    if(null != selTextarea2) selTextarea2.style.display = \"\";\r\n\twindow.parent.document.frm2.selRange.value = \"");
      out.print(range);
      out.write("\";\r\n\t// 赋值\r\n\tvar opText = \"");
      out.print(selectUserName);
      out.write("\";\r\n\tvar opValue = \"");
      out.print(selectUser);
      out.write("\";\t\r\n\r\n\t");

	//if(participantType==1 || participantType==12 || participantType==8){
	//participantType==1 or 8 的时候安装选择范围处理
	if(participantType == 12){
		// 显示选择对象按钮
		
      out.write("\r\n\t\t//parent.document.frm2.all.selTextareaTag.style.display='';\r\n\t\t//parent.document.frm2.all.selectedTxt2.cols=\"62\";\r\n\t\twindow.parent.document.getElementById(\"selectedTxt2\").style.width = \"98%\";\r\n\t\t//parent.document.frm2.all.selectedTxtId.value=\"\";\r\n\t\t//parent.document.frm2.all.selectedTxt.value=\"\";\r\n\t\t");

	} else{
		// 将制定的用户带入选择人框
		if(4 == participantType){
			
      out.write("\r\n\t\t\topValue = eval(\"window.parent.opener.document.all.");
      out.print(participantUserField);
      out.write("_Id.value\");\r\n\t\t\topText = eval(\"window.parent.opener.document.all.");
      out.print(participantUserField);
      out.write("_Name.value\");\r\n\t\t\tif(opValue == \"\") opText = \"\";\r\n\t\t\t");

		}
		
      out.write("\r\n\t\tvar opV = opValue.split(\",\");\r\n\t\topValue = \"\";\r\n\t\tfor(var i=0; i<opV.length; i++){\r\n\t\t\tif(opV[i] != \"\"){\r\n\t\t\t\topValue += \"$\" + opV[i] + \"$\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t//parent.document.frm2.all.selTextareaTag.style.display='none';\r\n\t\t//parent.document.frm2.all.selectedTxt2.cols=\"68\";\r\n\t\tvar selectedTxt2 = window.parent.document.getElementById(\"selectedTxt2\");\r\n\t\tif(null != selectedTxt2){\r\n\t\t\tselectedTxt2.style.width = \"98%\";\r\n\t\t\tselectedTxt2.value = opText;\r\n\t\t}\r\n\t\tvar selectedTxtId2 = window.parent.document.frm2.selectedTxtId2;\r\n\t\tif(null != selectedTxtId2) selectedTxtId2.value = opValue;\r\n\t\t");

	}
}

      out.write("\r\n\r\n</SCRIPT>\r\n\r\n");

// 由表单中的某个字段值决定
if(participantType==4){
	
      out.write("\r\n\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\tif(eval(\"window.parent.opener.document.all.");
      out.print(participantUserField);
      out.write("_Id\")){\r\n\t\tvar selectUser = eval(\"window.parent.opener.document.all.");
      out.print(participantUserField);
      out.write("_Id.value\");\r\n\t\tvar selectUserName = eval(\"window.parent.opener.document.all.");
      out.print(participantUserField);
      out.write("_Name.value\");\r\n\t\tif(selectUserName.indexOf(\",\")!=-1){\r\n\t\t\tif(selectUserName.lastIndexOf(\",\")==selectUserName.length){\r\n\t\t\t\tselectUserName = selectUserName.substring(0,selectUserName.length-1);\r\n\t\t\t}\r\n\t\t} else{\r\n\t\t\tselectUser = \"$\"+selectUser +\"$\";\r\n\t\t}\r\n\t\t//新节点\r\n\t\tString.prototype.replaceAll = function(s1,s2){\r\n\t\t\tvar demo=this;\r\n\t \t\twhile(demo.indexOf(\"$$\")!=-1)\r\n\t \t\t\tdemo=demo.replace(s1,s2);\r\n\t \t\treturn demo;\r\n\t\t}\r\n\t\tselectUser = selectUser.replaceAll(\"$$\",\",\");\r\n\t\tselectUser = selectUser.substring(1,selectUser.length-1);\r\n\t\tloadXML('userorggroup','no','");
      out.print(show);
      out.write("','','");
      out.print(range);
      out.write("',selectUser,selectUserName,'');\r\n\t} else{\r\n\t\talert(\"请将表单上的选人字段设为可写！\");\r\n\t}\r\n\t</SCRIPT>\r\n\t");

} else{
	
      out.write("\r\n\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\tloadXML('userorggroup','no','");
      out.print(show);
      out.write("','','");
      out.print(range);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(selectUser);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(selectUserName);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(selectUserAccounts);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(participantType);
      out.write("');\r\n\t</SCRIPT>\r\n\t");

}

// 是否显示短信提醒
if(showSmsRemind){
	
      out.write("\r\n\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\tif(window.parent.document.frm2.showSmsRemind.value=='true'){\r\n\t\twindow.parent.document.frm2.smsDiv.style.display=\"\";\r\n\t}\r\n\t</SCRIPT>\r\n\t");

} else{
	
      out.write("\r\n\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\tif(window.parent.document.frm2.showSmsRemind.value==\"true\"){\r\n\t\tvar smsDiv = window.parent.document.frm2.smsDiv;\r\n\t\tif(null != smsDiv) smsDiv.style.display = \"none\";\r\n\t}\r\n\t</SCRIPT>\r\n\t");

}

if(participantType==-1){
	//没有设置阅件
	
      out.write("\r\n\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\tif(window.parent.document.all.Panle1){\r\n\t\twindow.parent.document.all.Panle1.style.display = \"none\";\r\n\t}\r\n\t</SCRIPT>\r\n\t");

} else{
	//设置阅件
	
      out.write("\r\n\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\tif(window.parent.document.all.Panle1){\r\n\t\twindow.parent.document.all.Panle1.style.display = \"\";\r\n\t}\r\n\t</SCRIPT>\r\n\t");

}

stmt.close();
conn.close();

      out.write("\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
