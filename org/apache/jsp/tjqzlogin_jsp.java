/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:38:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLDecoder;
import java.util.Locale;
import com.js.oa.webservice.tjqz.DataInfoList;
import javax.xml.rpc.ParameterMode;
import org.apache.axis.encoding.XMLType;
import org.apache.axis.client.Service;
import org.apache.axis.client.Call;
import java.net.InetAddress;
import javax.xml.namespace.QName;
import java.io.IOException;
import java.net.URLConnection;
import java.net.URL;
import java.io.BufferedReader;
import java.io.PrintWriter;
import com.js.util.config.SystemCommon;
import com.js.util.config.UploadConfig;
import java.util.Map;
import com.js.oa.logon.service.LogonBD;
import java.util.HashMap;

public final class tjqzlogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {



private static String invokeWebService(String url, String method, String nameSpace, Object[] paras){
	
	String result = "";
	try {
		Call call = (Call) new Service().createCall();
		call.setTargetEndpointAddress(url);
		call.setOperationName(new QName(nameSpace, method));
		call.addParameter(new QName("http://tempuri.org/", "SSOToken"), XMLType.XSD_STRING, ParameterMode.IN);
		call.addParameter(new QName("http://tempuri.org/", "GSPIDM"), XMLType.XSD_STRING, ParameterMode.IN);
		call.addParameter(new QName("http://tempuri.org/", "APIAccount"), XMLType.XSD_STRING, ParameterMode.IN);
		call.addParameter(new QName("http://tempuri.org/", "APIPassword"), XMLType.XSD_STRING, ParameterMode.IN);
		call.addParameter(new QName("http://tempuri.org/", "SiteID"), XMLType.XSD_STRING, ParameterMode.IN);
		call.setUseSOAPAction(true);
	    call.setReturnType(XMLType.SOAP_STRING);
	    call.setSOAPActionURI("http://tempuri.org/VerifySSOToken");
	    result = (String) call.invoke(paras);
	} catch (Exception e) {
		e.printStackTrace();
	}
	return result;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("com.js.util.config.UploadConfig");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.net.URL");
    _jspx_imports_classes.add("com.js.util.config.SystemCommon");
    _jspx_imports_classes.add("org.apache.axis.client.Call");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.apache.axis.encoding.XMLType");
    _jspx_imports_classes.add("java.net.InetAddress");
    _jspx_imports_classes.add("javax.xml.rpc.ParameterMode");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("java.net.URLConnection");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.js.oa.logon.service.LogonBD");
    _jspx_imports_classes.add("javax.xml.namespace.QName");
    _jspx_imports_classes.add("java.io.BufferedReader");
    _jspx_imports_classes.add("com.js.oa.webservice.tjqz.DataInfoList");
    _jspx_imports_classes.add("org.apache.axis.client.Service");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";

// 接收到的ssoToken参数
String ssoToken = request.getParameter("ssoToken");
// 认证中心地址
String authenticationCenter = "http://192.168.2.161/GSPIDM";
// API帐号
String APIAccount = "u3o2j3@43dewrrewfewf-343k323";
// API密码
String APIPassword = "ie3i0jfo0ofijO@j042u0ru08fewndirt";
// 业务系统在认证中心中的系统ID
String systemIDInAuthenticationCenter = "17e2a0e9-e96a-9b3b-32e5-f7461e238bc0";

// WebService地址
String url = "http://192.168.2.161/SS0Login/SSOService.asmx";
String nameSpace = "http://tempuri.org/";
String method = "VerifySSOToken";
Object[] paras = new Object[]{ ssoToken, authenticationCenter, APIAccount, APIPassword, systemIDInAuthenticationCenter};

// 验证ssoToken，获取用户登录名
String userAccount = invokeWebService(url, method, nameSpace, paras);

if(null==userAccount || "".equals(userAccount)){
	request.setAttribute("errorType", "user");
	request.getRequestDispatcher("login.jsp").forward(request,response);	// 转向登录页面
} else{
	String userIP = request.getRemoteAddr();
	String serverIP = InetAddress.getLocalHost().getHostAddress(); 
	String sessionId = request.getSession().getId();
	HashMap userInfo = new HashMap(10, 1);
	userInfo = new LogonBD().logon(userAccount, "", userIP, serverIP, sessionId, "jiusi", "0");

	//请委办局在此添加转向到子门户的链接地址。
	String ticketurl = "login.jsp";
	if(null == userInfo){
		request.setAttribute("errorType", "user");
	} else if(null != userInfo.get("error")){
		request.setAttribute("errorType", userInfo.get("error"));
	} else if(null != userInfo.get("userName")){
		// 登录动作
		String browserVersion = request.getHeader("User-Agent");
		if(browserVersion.indexOf("MSIE") >= 0){	// 判断是否是IE浏览器
			session.setAttribute("browserVersion", "MSIEx");
			if(browserVersion.indexOf("MSIE 6.0") >= 0){
				session.setAttribute("browserVersion", "MSIE6");
			} else if(browserVersion.indexOf("MSIE 10.0") >= 0){
				session.setAttribute("browserVersion", "IE10");
			}
		} else if(browserVersion.indexOf("Trident/7.0") >= 0){	// 判断是否是IE11
			session.setAttribute("browserVersion","IE11");
		} else if(browserVersion.indexOf("Firefox") >= 0){	// 判断是否是火狐浏览器
			session.setAttribute("browserVersion", "Firefox");
		} else if(browserVersion.indexOf("Chrome") >= 0){	// 谷歌浏览器
			session.setAttribute("browserVersion", "Chrome");
		} else if(browserVersion.indexOf("Safari") >= 0){	// 苹果浏览器
			session.setAttribute("browserVersion", "Safari");
		} else{
			session.setAttribute("browserVersion", "MSIEx");
		}
		if(browserVersion.indexOf("iPad") >= 0){	// 是否是iPad登录
			session.setAttribute("OSType","ipad");
		} else if(browserVersion.indexOf("Android") >= 0){	// 是否是Android移动设备登录
			session.setAttribute("OSType", "Android");
		} else if(browserVersion.indexOf("iPhone") >= 0){	// 是否是iPhone登录
			session.setAttribute("OSType", "iPhone");
		} else{
			session.setAttribute("OSType", "pc");
		}
		
		/*
		String IE11 = request.getParameter("checkBrow");
		if(null!=IE11 && !"".equals(IE11)){
			session.removeAttribute("browserVersion");
			session.setAttribute("browserVersion", IE11);
		}
		*/
		session.setAttribute("userName", userInfo.get("userName"));
		session.setAttribute("userId", userInfo.get("userId"));
		session.setAttribute("orgName", userInfo.get("orgName"));
		session.setAttribute("orgId", userInfo.get("orgId"));
		session.setAttribute("orgIdString", userInfo.get("orgIdString"));
		session.setAttribute("skin", "blue");
		session.setAttribute("rootCorpId", userInfo.get("rootCorpId"));
		session.setAttribute("corpId", userInfo.get("corpId"));
		session.setAttribute("departId", userInfo.get("departId"));
		session.setAttribute("domainId", userInfo.get("domainId"));
		if(null != userInfo.get("sidelineDepartId")){
			session.setAttribute("sidelineCorpId", userInfo.get("sidelineCorpId"));
			session.setAttribute("sidelineDepartId", userInfo.get("sidelineDepartId"));
		} else{
			session.setAttribute("sidelineCorpId", "0");
			session.setAttribute("sidelineDepartId", "0");
		}
		
		// 将用户使用的ftp信息存到session中
		Map uploadMap = UploadConfig.getInstance().getUploadMap();
		String lanIP = uploadMap.get("LanIP").toString();

		if(userIP.startsWith(lanIP)){	// 用户使用内网地址
			session.setAttribute("fileServer", uploadMap.get("FileInnerServer"));
			session.setAttribute("ftpMap", uploadMap.get("FtpInnerMap"));
		} else{	// 用户使用外网地址
			session.setAttribute("fileServer", uploadMap.get("FileServer"));
			session.setAttribute("ftpMap", uploadMap.get("FtpMap"));
		}
		
		// 浏览范围
		if("1".equals(SystemCommon.getUseBrowseRange())){
			if(null==userInfo.get("browseRange") || "".equals(userInfo.get("browseRange").toString())){
				String browseRangeType = SystemCommon.getDefaultBrowseRange();
				if("1".equals(browseRangeType)){
					session.setAttribute("browseRange", "*" + userInfo.get("corpId").toString() + "*");
				} else if("0".equals(browseRangeType)){
					session.setAttribute("browseRange", "*0*");
				} else if("2".equals(browseRangeType)){
					session.setAttribute("browseRange", "*" + userInfo.get("departId").toString() + "*");
				}
			} else{
				String browseRangeType = userInfo.get("browseRange").toString();
				if("1".equals(browseRangeType)){
					session.setAttribute("browseRange", "*" + userInfo.get("corpId").toString() + "*");
				} else if("0".equals(browseRangeType)){
					session.setAttribute("browseRange", "*0*");
				} else if("2".equals(browseRangeType)){
					session.setAttribute("browseRange", "*" + userInfo.get("departId").toString() + "*");
				} else{
					session.setAttribute("browseRange",	userInfo.get("browseRange"));
				}
			}
		} else{
			session.setAttribute("browseRange", "*0*");
		}
		
		// 授权范围
		if("1".equals(SystemCommon.getUseGrantRange())){
			// 使用单独的授权范围
			if(null==userInfo.get("grantRange") || "".equals(userInfo.get("grantRange").toString())){
				String grantRangeType = SystemCommon.getDefaultGrantRange();
				if("1".equals(grantRangeType)){
					session.setAttribute("grantRange", "*" + userInfo.get("corpId").toString() + "*");
				} else if("0".equals(grantRangeType)){
					session.setAttribute("grantRange", "*0*");
				} else if("2".equals(grantRangeType)){
					session.setAttribute("grantRange", "*" + userInfo.get("departId").toString() + "*");
				}
			} else{
				String grantRangeType = userInfo.get("grantRange").toString();
				if("1".equals(grantRangeType)){
					session.setAttribute("grantRange", "*" + userInfo.get("corpId").toString() + "*");
				} else if("0".equals(grantRangeType)){
					session.setAttribute("grantRange", "*0*");
				} else if("2".equals(grantRangeType)){
					session.setAttribute("grantRange", "*" + userInfo.get("departId").toString() + "*");
				} else{
					session.setAttribute("grantRange",	userInfo.get("grantRange"));
				}
			} 
		} else{
			// 不使用单独的授权范围，与浏览范围一致
			session.setAttribute("grantRange", session.getAttribute("browseRange"));
		}
		
		session.setAttribute("userAccount", userAccount);
		session.setAttribute("sysManager", userInfo.get("sysManager"));
		if(null != userInfo.get("userSimpleName")) {
			session.setAttribute("userSimpleName", userInfo.get("userSimpleName"));
		} else{
			session.setAttribute("userSimpleName", "");
		}
		if(null != userInfo.get("orgSerial")){
			session.setAttribute("orgSerial", userInfo.get("orgSerial"));
		} else{
			session.setAttribute("orgSerial", "");
		}
		if(null != userInfo.get("orgSimpleName")){
			session.setAttribute("orgSimpleName", userInfo.get("orgSimpleName"));
		} else{
			session.setAttribute("orgSimpleName", "");
		}
		session.setAttribute("dutyName", null==userInfo.get("dutyName") ? "" : userInfo.get("dutyName"));
		session.setAttribute("dutyLevel", null==userInfo.get("dutyLevel") ? "0" : userInfo.get("dutyLevel"));
		session.setAttribute("imID", null==userInfo.get("imID") ? "0" : userInfo.get("imID").toString());
		session.setAttribute("hasLoged", null);
		session.setAttribute("serverIP", serverIP);
		session.setAttribute("userIP", userIP);
		session.setAttribute("empEnglishName", userInfo.get("empEnglishName"));
		Locale loc = new Locale("zh_cn");
		session.setAttribute("org.apache.struts.action.LOCALE", loc);
		
		ticketurl = "desktop.jsp";
		System.out.println("pageurl--" + request.getParameter("pageurl") + "--");		
		// 判断是否为消息链接进入
		if(null!=request.getParameter("dataType") && null!=request.getParameter("infoId")){
			String tempUrl = new DataInfoList().getUrlByInfoID(request.getParameter("dataType"), request.getParameter("infoId"), session.getAttribute("userId").toString());
			if(null!=tempUrl && !"".equals(tempUrl)){
				if(tempUrl.startsWith("/jsoa")) tempUrl = tempUrl.substring(5);
				ticketurl = tempUrl;
			}
		} else if(null != request.getParameter("infolist")){
			if("dbsx".equals(request.getParameter("infolist"))){	// 待办事项
				ticketurl = "FileDealWithAction.do?workStatus=0";
			} else if("gzzd".equals(request.getParameter("infolist"))){	// 规章制度
				ticketurl = "InformationAction.do?channelId=221&channelName=规章制度&channelType=0&userChannelName=知识管理&channelShowType=0&userDefine=0&id=320";
			}
		} else if(null!=request.getParameter("pageurl") && !"".equals(request.getParameter("pageurl")) 
				&& !"null".equalsIgnoreCase(request.getParameter("pageurl"))){
			ticketurl = URLDecoder.decode(request.getParameter("pageurl"), "utf-8");
		}
	}
	request.getRequestDispatcher(ticketurl).forward(request, response);
}

      out.write("\r\n\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
