/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:46:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wap2.personalMessage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.js.oa.chat.po.ChatPO;
import com.js.wap.util.WapUtil;
import com.js.util.util.HTMLEncoding;

public final class personalMessageList_005f3g_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.chat.po.ChatPO");
    _jspx_imports_classes.add("com.js.util.util.HTMLEncoding");
    _jspx_imports_classes.add("com.js.wap.util.WapUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"DTD/xhtml1-strict.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n");

String path = request.getContextPath();
String basePath = request.getContextPath();

      out.write('\r');
      out.write('\n');
 
request.setCharacterEncoding("UTF-8");
//String cardTitle=(String)request.getAttribute("cardTitle");
Map map=(Map)request.getAttribute("personalMessageMap");
List list=null;
if(map.size()!=0){
list=(List)map.get(WapUtil.QUERY_LIST);
}
int beginIndex=Integer.parseInt(request.getParameter("beginIndex")==null?"0":request.getParameter("beginIndex"));

      out.write("\r\n<HTML xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<HEAD>\r\n<TITLE>个人消息-移动办公系统</TITLE>\r\n<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n<META name=apple-touch-fullscreen content=YES>\r\n<META name=apple-mobile-web-app-capable content=no>\r\n<LINK rel=apple-touch-icon href=\"");
      out.print(path);
      out.write("/wap2/images/iphone.jpg\">\r\n<LINK rel=stylesheet type=text/css href=\"");
      out.print(path);
      out.write("/wap2/css/main_3g.css\">\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/cookie.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/util.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/frost.js\"></SCRIPT>\r\n<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n\r\n<SCRIPT language=JavaScript>\r\n<!--\r\nfunction gotoPage(url, flag){\r\n    if(flag){\r\n        location.href=encodeURI(url);\r\n    }\r\n}\r\n//-->\r\n</SCRIPT>\r\n</HEAD>\r\n<BODY>\r\n   <DIV id=dd class=main>\r\n       <DIV id=top>\r\n           <SPAN id=lp><DIV class=btn_2><A href=\"");
      out.print(path);
      out.write("/wap2/index_3g.jsp\">桌面</A></DIV></SPAN>\r\n           <SPAN id=title>个人消息</SPAN>\r\n           <A class=btn_1 href=\"");
      out.print(path );
      out.write("/wap2/personalMessage/new_message_3g.jsp\">新建消息</A>\r\n       </DIV>\r\n<div><br/>\r\n ");
if(list!=null&&list.size()>0){ 
 		/* 
 		po.chatId,            0聊天编号
 		po.chatContent,       1聊天内容
 		po.chatTo,            2接收者姓名
 		po.chatHasattach,     
 		po.chatAttachsize,    
 		po.senderId,          5发送者编号
 		po.senderName,        6发送者姓名
 		po.chatTime,          7聊天时间
 		cu.empId,             8接受者编号
 		cu.chatStatus,        9聊天状态
 		cu.isRead             10是否已读 
 		*/
 		// 为防止消息重复把list按照消息编号放到map中
 		Map<Object, List<Object[]>> chatMap = new LinkedHashMap<Object, List<Object[]>>();
 		for(int i=0; i<list.size(); i++){
 			Object[] obj = (Object[])list.get(i);
 			/* for(int j = 0; j < obj.length; ++j){
 				System.out.println("obj[" + j + "] = " + obj[j]);
 			} */
 			if(chatMap.containsKey(obj[0])){
 				List<Object[]> objArr = chatMap.get(obj[0]);
 				objArr.add(obj);
 			}else{
 				List<Object[]> objArr = new ArrayList<Object[]>();
 				objArr.add(obj);
 				chatMap.put(obj[0], objArr);
 			}
 		}
 		// 遍历map输出消息
 		Iterator<Map.Entry<Object, List<Object[]>>> iterator = chatMap.entrySet().iterator();
 		while(iterator.hasNext()){
 			Map.Entry<Object, List<Object[]>> entry = iterator.next();
 			
 			List<Object[]> objArr = entry.getValue();
			Object[] obj = objArr.get(0);
 		
	 		String content = obj[1] == null ? "" : obj[1].toString();
	 		content = content.length() > 15 ? content.substring(0,15) + "..." : content;
	 		String chatStatus = "";
	 		
			String senderId = obj[5] == null ? "" : obj[5].toString();
			if(senderId != null && senderId.equals(session.getAttribute("userId"))){
				// 如果接收者编号等于发送者编号，说明这条消息是发送者的存档消息，也可能是自己发送给自己的消息
				// 当这条聊天状态为0消息存在时，可以判断发送者还未删除这条消息，消息中的第一条是发送者保存的消息
				boolean hasChatStatusZero = false;
				for(int i = 0; i < objArr.size(); ++i){
					if(Integer.parseInt(objArr.get(i)[9].toString()) == 0){
						hasChatStatusZero = true;
						break;
					}
				}
				if( hasChatStatusZero ){
					String chatTo = obj[2] == null ? "" : obj[2].toString();
					String chatToTemp = chatTo;
					if (chatToTemp.length() > 15){
						chatToTemp = chatToTemp.substring(0, 15).substring(beginIndex);
						int lastIndex = chatToTemp.lastIndexOf(',');
						chatToTemp = lastIndex == -1 ? "..." : chatToTemp.substring(0, lastIndex).concat("...");
					}else if(chatToTemp.endsWith(",")){
						chatToTemp = chatToTemp.substring(0, chatToTemp.length() - 1);
					}
					content += "[发送至" + chatToTemp + "]";

					// 计算有几个接收者
					int chatToNum = chatTo.split(",").length;
					if(chatToNum == 1){
						if(objArr.size() == 1){
							// 接受者已删除信息，只剩自己的消息备份
							chatStatus = "(对方已删除)";
						}else{
							// 接受者只有一个人，且接收者的消息未删除
							chatStatus =  Integer.parseInt(objArr.get(1)[10].toString()) == 0  ? "(未读)" : "(已读)";
						}
					}else if(chatToNum > 1){
						// 接受者有很多， 接受者是否包含发送者自己的消息数
						int isReadSum = 0, selfIsReadSum = 0, meChatTo = 0, otherChatTo = objArr.size();
						for(int i = 1; i < objArr.size(); ++i){
							isReadSum += Integer.parseInt(objArr.get(i)[10].toString());
							// 如果同一条消息对应的empId是当前用户编号的有两个，那么消息的接受者包含发送者
							if(objArr.get(i)[8] != null && objArr.get(i)[8].toString().equals(senderId)){
								++meChatTo;
								selfIsReadSum += Integer.parseInt(objArr.get(i)[10].toString());
							}
						}
						if(meChatTo == 2){
							--otherChatTo;
							if(isReadSum > 0)
								--isReadSum;
							// 如果发送者自己还未读，已读数加1表示发送者已读
							if(selfIsReadSum == 1)
								++isReadSum;
						}
						chatStatus = "(已读" + isReadSum;
						chatStatus += ",已删" + ( chatToNum - otherChatTo + 1 );
						chatStatus += ",未读" + ( otherChatTo - 1 - isReadSum ) + ")";
					}
				} else {
					// 如果当前用户即消息的发送者的备份消失了，说明信息被删除了
					continue;
				}
			} else {
				String from = obj[6] == null ? "" : obj[6].toString();
				if(from.endsWith(","))
					from = from.substring(0, from.length() - 1);
				content += "[来自" + from + "]";
				
				String isRead = obj[10] == null ? "" : obj[10].toString();
				chatStatus = isRead.equals("0") ? "(未读)" : "(已读)";
			}

	
      out.write("\r\n       <DIV class=lista1>\r\n         <DIV class=l1 style=\"white-space:nowrap\">\r\n            <A class=listing href=\"");
      out.print(path);
      out.write("/wap/action/PersonalMessageAction.do?beginIndex=");
      out.print(beginIndex );
      out.write("&method=showMessage&chatId=");
      out.print(obj[0] );
      out.write('"');
      out.write('>');
      out.print(HTMLEncoding.htmlEncoding(content));
      out.write("</A>\r\n         </DIV>\r\n         <SPAN style=\"white-space:nowrap\">");
      out.print(obj[7]==null?"":obj[7].toString().replace(".0", ""));
      out.write("&nbsp;&nbsp;&nbsp;&nbsp;\r\n         \t<font color=\"black\">");
      out.print(chatStatus);
      out.write("</font>\r\n         </SPAN>\r\n       </DIV>\r\n\t");
}
	}
	
      out.write("\t\r\n</div>\r\n");


int nextNum=(beginIndex/WapUtil.LIMITED)+1;
int nextIndex=nextNum*WapUtil.LIMITED;
int upNum=(beginIndex/WapUtil.LIMITED)-1;
int upIndex=upNum*WapUtil.LIMITED;
int recordCount=(Integer)request.getAttribute(WapUtil.RECORD_COUNT);
String upUrl="#",nextUrl="#";
if(upIndex>=0)upUrl=path+"/wap/action/PersonalMessageAction.do?method=personalMessageList&beginIndex="+upIndex;
if(nextIndex<recordCount)nextUrl=path+"/wap/action/PersonalMessageAction.do?method=personalMessageList&beginIndex="+nextIndex;

      out.write("\r\n<DIV class=page>\r\n       ");
if(upUrl.indexOf("#")<0){
      out.write("\r\n       <INPUT class=btn_4 onclick=\"gotoPage('");
      out.print(upUrl );
      out.write("',true);\" value=上一页 type=submit name=prev>\r\n       ");
}if(nextUrl.indexOf("#")<0){ 
      out.write(" \r\n       <INPUT class=btn_4 onclick=\"gotoPage('");
      out.print(nextUrl );
      out.write("',true);\" value=下一页 type=submit name=next>\r\n       ");
}
      out.write("\r\n       </DIV>\r\n   </DIV>\r\n</body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
