/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:03:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.eform.pengchi;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.util.DataSourceBase;
import com.js.util.util.CharacterTool;
import com.js.system.util.StaticParam;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.jdom.input.SAXBuilder;
import org.jdom.Element;
import org.jdom.Document;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import com.js.oa.form.pengchi.CreateProcessForGdzc;

public final class createprocessForGdzc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.util.util.CharacterTool");
    _jspx_imports_classes.add("org.jdom.input.SAXBuilder");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.jdom.Document");
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.js.system.util.StaticParam");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
    _jspx_imports_classes.add("com.js.oa.form.pengchi.CreateProcessForGdzc");
    _jspx_imports_classes.add("org.jdom.Element");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);
StringBuffer buffer=new StringBuffer("<?xml version=\"1.0\" encoding=\"GBK\"?><root>");

//String sql=request.getParameter("sql");
String paras=request.getParameter("para");

CreateProcessForGdzc gdzc=new CreateProcessForGdzc();
List<Map<String,String>> resultData=gdzc.getFieldvalueForGdzcmx(paras);
if(resultData.size()>0){
	
	for(Map<String,String> result:resultData){
		String zcyz=Float.valueOf(result.get("zcyzaypc"))+Float.valueOf(result.get("zcyzan"))+"";//资产原值
		String ljzj=Float.valueOf(result.get("ljzjaypc"))+Float.valueOf(result.get("ljzjan"))+"";//累计折旧
		String ljzjTemp=ljzj;
		if(ljzjTemp.indexOf("-")==0){//去掉累计折旧的负号
			ljzjTemp=ljzjTemp.substring(1);
		}
		String zmjz=(Math.round((Float.valueOf(zcyz)-Float.valueOf(ljzjTemp))*100.0)/100.0)+"";//账面净值=资产原值-账面净值
		
		buffer.append("<datas>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("zcbh").append("</formfield>");
		buffer.append("<fielddata>").append(result.get("zcbh").trim()).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("sqbm").append("</formfield>");
		buffer.append("<fielddata>").append(result.get("bm").trim()).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("zcmc").append("</formfield>");
		buffer.append("<fielddata>").append(result.get("zcmc").trim()).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("gmrq").append("</formfield>");
		buffer.append("<fielddata>").append(result.get("gmrq").trim()).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("ggxh").append("</formfield>");
		buffer.append("<fielddata>").append(result.get("ggxh").trim()).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("pp").append("</formfield>");
		buffer.append("<fielddata>").append(result.get("pp").trim()).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("zcyz").append("</formfield>");
		buffer.append("<fielddata>").append(zcyz).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("ljzj").append("</formfield>");
		buffer.append("<fielddata>").append(ljzj).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("smys").append("</formfield>");
		buffer.append("<fielddata>").append(result.get("smys").trim()).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("<data>");
		buffer.append("<formfield>").append("zmjz").append("</formfield>");
		buffer.append("<fielddata>").append(zmjz).append("</fielddata>");
		buffer.append("</data>");
		
		buffer.append("</datas>");
		
	}
	
}

buffer.append("</root>");
out.clear();
out.print(buffer.toString());

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
