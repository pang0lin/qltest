/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:50:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.subsidiary_005fwork;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class companyMonthReportForms_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-nested.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-tiles.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-logic.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-html.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-template.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-bean.tld", Long.valueOf(1499751390000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fhtml_005fhtml;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fscope_005fname_005fid;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fhtml_005fhtml = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fscope_005fname_005fid = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fhtml_005fhtml.release();
    _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fscope_005fname_005fid.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
      //  html:html
      org.apache.struts.taglib.html.HtmlTag _jspx_th_html_005fhtml_005f0 = (org.apache.struts.taglib.html.HtmlTag) _005fjspx_005ftagPool_005fhtml_005fhtml.get(org.apache.struts.taglib.html.HtmlTag.class);
      boolean _jspx_th_html_005fhtml_005f0_reused = false;
      try {
        _jspx_th_html_005fhtml_005f0.setPageContext(_jspx_page_context);
        _jspx_th_html_005fhtml_005f0.setParent(null);
        int _jspx_eval_html_005fhtml_005f0 = _jspx_th_html_005fhtml_005f0.doStartTag();
        if (_jspx_eval_html_005fhtml_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n\r\n<head>\r\n<link rel=stylesheet type=\"text/css\" href=\"style/cssmain.css\">\r\n<link href=\"skin/");
            out.print(session.getAttribute("skin"));
            out.write("/style-");
            out.print(session.getAttribute("browserVersion"));
            out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<title>公司车辆月度费用汇总表（每月)</title>\r\n<body leftmargin=\"0\" topmargin=\"20\">\r\n");

String beginDate="";//开始费用
String endDate="";//结束费用
if(request.getParameter("beginDate")!=null)
beginDate=request.getParameter("beginDate").toString();
if(request.getParameter("endDate")!=null)
endDate=request.getParameter("endDate").toString();

            out.write("\r\n<table width=\"95%\" border=\"1\" align=\"center\" cellpadding=\"2\" cellspacing=\"0\" bordercolorlight=\"#000000\" bordercolordark=\"#FFFFFF\">\r\n<caption align=\"left\">汇总时间:从");
            out.print(beginDate);
            out.write('到');
            out.print(endDate);
            out.write("</caption>\r\n<div align=\"center\"><H1>公司车辆月度费用汇总表（每月)</H1></div>\r\n<div id=\"tagPrint\" align=\"right\"><!--<A href=\"javascript:void(0);\" ><span  style=\"cursor:pointer\" onclick=\"printWindow()\">打印</span></A>-->\r\n    <button class=\"btnButton2Font\" onclick=\"printWindow();\">打印</button>\r\n</div>\r\n                      <tr align=\"center\">\r\n                        <td rowspan=\"2\" > 车牌号码 </td>\r\n                        <td rowspan=\"2\"> 月保费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\" > 路桥费 </td>\r\n                        <td rowspan=\"2\" > 临时保管费 </td>\r\n\r\n                        <td colspan=\"2\"><font color=\"#000000\" >油料费 </td>\r\n                        <td rowspan=\"2\"  > 维修费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\"> 洗车费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\"><font color=\"#000000\" >购车税费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\"> 税费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\"  > 保险费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\"><font color=\"#000000\" >养路费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\"><font color=\"#000000\" >年票费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\"><font color=\"#000000\" >年审费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\"><font color=\"#000000\" >其它杂费 </td>\r\n");
            out.write("\t\t\t\t\t\t<td rowspan=\"2\"><font color=\"#000000\" >定损事故处理费 </td>\r\n\t\t\t\t\t\t<td rowspan=\"2\"><font color=\"#000000\" >合计 </td>\r\n                      </tr>\r\n\t\t\t\t\t  <tr>\r\n\t\t\t\t\t\t<!--<td  > 保管费 </td>-->\r\n\t\t\t\t\t\t<td  > 数量 </td>\r\n\t\t\t\t\t\t<td  > 金额 </td>\r\n\r\n\r\n\t\t\t\t\t  </tr>\r\n\r\n\r\n                      ");

					  int listorder=0;//列表序号
					  String num="";//车辆型号
					  double bridgeFee=0;//路桥费
					  double guideFee=0;//管理费
                                          double monthFee=0;//月保费

					  double oilCost=0;//耗油量
					  double oilFee=0;//费用价格
					  double fixFee=0;//固定费用
					  double washFee=0;//洗车费
					  double taxFee=0;//税费
					  double insureFee=0;//保险费
					  double roadFee=0;//路费
					  double yearTicketFee=0;//年票费用
					  double yearSensorFee=0;
					  double purchaseTax=0;//购车费用
					  //double brandFee=0;
					  //double accidentFee=0;
					  double otherFee=0;//其它费用
					  double accidentFee=0;//定损事故处理费

					  double oneRecordTotal=0;//每一行记录的总和
					  double allTotal=0;//全部的部和


					  double oilCostTotal=0;//总的油耗
					  double oilFeeTotal=0;//总的油费用
					  double fixFeeTotal=0;//总的固定费用
					  double washFeeTotal=0;//总的洗车费用
					  double taxFeeTotal=0;//总的税费用
					  double insureFeeTotal=0;//总的保险费用
					  double roadFeeTotal=0;//总的路费用
					  double yearTicketFeeTotal=0;//总的年票费用
					  double yearSensorFeeTotal=0;
					  double purchaseTaxTotal=0;//总的购车费
					  //double brandFeeTotal=0;
					  //double accidentFeeTotal=0;
					  double bridgeFeeTotal=0;//总的路桥费用
                                          double guideFeeTotal=0;//总的保管费用
                                          double monthFeeTotal=0;//总的月保费

					  double otherFeeTotal=0;//总的其它费用
					  double accidentFeeTotal=0;//总的定损事故费
					  java.text.DecimalFormat fmt=new java.text.DecimalFormat("0.00");
					  
            out.write("\r\n\t\t\t");
            //  logic:iterate
            org.apache.struts.taglib.logic.IterateTag _jspx_th_logic_005fiterate_005f0 = (org.apache.struts.taglib.logic.IterateTag) _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fscope_005fname_005fid.get(org.apache.struts.taglib.logic.IterateTag.class);
            boolean _jspx_th_logic_005fiterate_005f0_reused = false;
            try {
              _jspx_th_logic_005fiterate_005f0.setPageContext(_jspx_page_context);
              _jspx_th_logic_005fiterate_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_html_005fhtml_005f0);
              // /subsidiary_work/companyMonthReportForms.jsp(103,3) name = id type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_logic_005fiterate_005f0.setId("totalList");
              // /subsidiary_work/companyMonthReportForms.jsp(103,3) name = name type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_logic_005fiterate_005f0.setName("totalList");
              // /subsidiary_work/companyMonthReportForms.jsp(103,3) name = scope type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_logic_005fiterate_005f0.setScope("request");
              int _jspx_eval_logic_005fiterate_005f0 = _jspx_th_logic_005fiterate_005f0.doStartTag();
              if (_jspx_eval_logic_005fiterate_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                java.lang.Object totalList = null;
                if (_jspx_eval_logic_005fiterate_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
                  out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_logic_005fiterate_005f0);
                }
                totalList = (java.lang.Object) _jspx_page_context.findAttribute("totalList");
                do {
                  out.write("\r\n     \t\t     \t ");

                        Object[] obj = (Object[])totalList;
                      
                  out.write("\r\n                          ");

                          listorder=listorder+1;
                          if(obj[0]!=null){
							  if(obj[1]!=null)
							  num=obj[1].toString();
							  if(obj[3]!=null){
							  oilCost=Double.parseDouble(obj[3].toString());
							  oilCostTotal+=oilCost;
							  }
							  if(obj[4]!=null){
							  oilFee=Double.parseDouble(obj[4].toString());
							  oilFeeTotal+=oilFee;
							  }
							  if(obj[5]!=null){
							  fixFee=Double.parseDouble(obj[5].toString());
							  fixFeeTotal+=fixFee;
							  }
							  if(obj[6]!=null){
							  washFee=Double.parseDouble(obj[6].toString());
							  washFeeTotal+=washFee;
							  }
							  if(obj[7]!=null){
							  taxFee=Double.parseDouble(obj[7].toString());
							  taxFeeTotal+=taxFee;
							  }
							  if(obj[8]!=null){
							  insureFee=Double.parseDouble(obj[8].toString());
							  insureFeeTotal+=insureFee;
							  }
							  if(obj[9]!=null){
							  roadFee=Double.parseDouble(obj[9].toString());
							  roadFeeTotal+=roadFee;
							  }
							  if(obj[10]!=null){
							  yearTicketFee=Double.parseDouble(obj[10].toString());
							  yearTicketFeeTotal+=yearTicketFee;
							  }
							  if(obj[11]!=null){
							  yearSensorFee=Double.parseDouble(obj[11].toString());
							  yearSensorFeeTotal+=yearSensorFee;
							  }
							  if(obj[12]!=null){

							  purchaseTax=Double.parseDouble(obj[12].toString());
							  purchaseTaxTotal+=purchaseTax;
							  }
							  /*if(obj[13]!=null){
							  brandFee=Double.parseDouble(obj[13].toString());
							  brandFeeTotal+=brandFee;
							  }*/
							  if(obj[14]!=null){
							  otherFee=Double.parseDouble(obj[14].toString());
							  otherFeeTotal+=otherFee;
							  }
							  if(obj[15]!=null){
							  accidentFee=Double.parseDouble(obj[15].toString());
							  accidentFeeTotal+=accidentFee;
							  }
							  if(obj[18]!=null){
							  bridgeFee=Double.parseDouble(obj[18].toString());
							  bridgeFeeTotal+=bridgeFee;
							  }
							  if(obj[19]!=null){
							  guideFee=Double.parseDouble(obj[19].toString());
							  //bridgeFeeTotal+=guideFee;
                                                          guideFeeTotal+=guideFee;
							  }
                                                          if(obj[16]!=null){
							  monthFee=Double.parseDouble(obj[16].toString());
                                                          monthFeeTotal+=monthFee;
							  }

							  oneRecordTotal=oilFee+fixFee+washFee+taxFee+insureFee+
								             roadFee+ yearTicketFee+yearSensorFee+
											 purchaseTax+otherFee+bridgeFee+guideFee+accidentFee+monthFee;
							  allTotal+=oneRecordTotal;

                          
                  out.write("\r\n                        <tr >\r\n\r\n                          <td>");
                  out.print(num);
                  out.write("&nbsp; </td>\r\n                          <td>");
                  out.print(fmt.format(monthFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(bridgeFee));
                  out.write("&nbsp; </td>\r\n                          <td>");
                  out.print(fmt.format(guideFee));
                  out.write("&nbsp; </td>\r\n\r\n\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(oilCost));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(oilFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(fixFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(washFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(purchaseTax));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(taxFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(insureFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(roadFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(yearTicketFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(yearSensorFee));
                  out.write("&nbsp;</td>\r\n\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(otherFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(accidentFee));
                  out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
                  out.print(fmt.format(oneRecordTotal));
                  out.write("&nbsp;</td>\r\n                        </tr>\r\n                        ");

							num="";
							bridgeFee=0;
						   guideFee=0;
                                                   monthFee=0;

						  oilCost=0;
						   oilFee=0;
						   fixFee=0;
						   washFee=0;
						   taxFee=0;
						   insureFee=0;
						   roadFee=0;
						   yearTicketFee=0;
						  yearSensorFee=0;
						   purchaseTax=0;
						   otherFee=0;
						   accidentFee=0;
							oneRecordTotal=0;
						  }
						  
                  out.write("\r\n           ");
                  int evalDoAfterBody = _jspx_th_logic_005fiterate_005f0.doAfterBody();
                  totalList = (java.lang.Object) _jspx_page_context.findAttribute("totalList");
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
                if (_jspx_eval_logic_005fiterate_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
                  out = _jspx_page_context.popBody();
                }
              }
              if (_jspx_th_logic_005fiterate_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005flogic_005fiterate_0026_005fscope_005fname_005fid.reuse(_jspx_th_logic_005fiterate_005f0);
              _jspx_th_logic_005fiterate_005f0_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_logic_005fiterate_005f0, _jsp_getInstanceManager(), _jspx_th_logic_005fiterate_005f0_reused);
            }
            out.write("\r\n\t\t\t\t\t<tr>\r\n\r\n                          <td>合计</td>\r\n                          <td>");
            out.print(fmt.format(monthFeeTotal));
            out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(bridgeFeeTotal));
            out.write("</td>\r\n                          <td>");
            out.print(fmt.format(guideFeeTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(oilCostTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(oilFeeTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(fixFeeTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(washFeeTotal));
            out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(purchaseTaxTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(taxFeeTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(insureFeeTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(roadFeeTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(yearTicketFeeTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(yearSensorFeeTotal));
            out.write("</td>\r\n\r\n\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(otherFeeTotal));
            out.write("</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(accidentFeeTotal));
            out.write("&nbsp;</td>\r\n\t\t\t\t\t\t  <td>");
            out.print(fmt.format(allTotal));
            out.write("</td>\r\n                        </tr>\r\n                  </table>\r\n<script language=\"javascript\">\r\n//打印\r\nfunction printWindow(){\r\ntagPrint.style.display=\"none\";\r\nwindow.print();\r\n}\r\n</script>\r\n</body>\r\n");
            int evalDoAfterBody = _jspx_th_html_005fhtml_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_html_005fhtml_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fhtml_005fhtml.reuse(_jspx_th_html_005fhtml_005f0);
        _jspx_th_html_005fhtml_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_html_005fhtml_005f0, _jsp_getInstanceManager(), _jspx_th_html_005fhtml_005f0_reused);
      }
      out.write("\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
