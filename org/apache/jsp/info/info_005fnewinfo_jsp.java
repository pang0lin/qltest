/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:56:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.info;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.jsflow.service.WorkFlowBD;
import com.js.oa.info.channelmanager.service.ChannelBD;
import com.js.oa.jsflow.vo.*;

public final class info_005fnewinfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("com.js.oa.jsflow.vo");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.info.channelmanager.service.ChannelBD");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowBD");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

String publicchannel=request.getParameter("publicchannel");
String channelType=request.getParameter("channelType");

String userDefine=request.getParameter("userDefine");
String publicinfo=request.getParameter("publicinfo");
String action="add";
String newaddress="";
String isAllowView="";
ChannelBD bd=new ChannelBD();
newaddress = bd.getChannelProcessInfo(publicchannel);
isAllowView=bd.getIsAllowView(channelType,publicchannel);
//System.out.println("-----000000isAllowView000000----->>>>>>>>>"+isAllowView);
String processId="";
if(newaddress!=null && !"null".equals(newaddress)){
	int index=newaddress.indexOf(",");
	if(index>0){
		processId=newaddress.substring(0,index);
		newaddress=publicchannel+newaddress.substring(index);		
	}
	
}
if(!"".equals(processId)){
	//带流程新增发布
	WorkFlowBD wfBD = new WorkFlowBD();
	ModuleVO moduleVO = new ModuleVO();
	moduleVO.setId(4);
	moduleVO.setFormType(0);
	AccessTableVO tableVO = (AccessTableVO) wfBD.getAccessTable(moduleVO).get(0);
	
      out.write("\r\n\t<script>\r\n\t  location.href=\"/jsoa/InformationAction.do?action=adds&allow=");
      out.print(isAllowView);
      out.write("&channelType=");
      out.print(channelType);
      out.write("&userDefine=");
      out.print(userDefine);
      out.write("&newaddress1=");
      out.print(newaddress);
      out.write("&channelId=");
      out.print(publicchannel);
      out.write("&processId=");
      out.print(processId);
      out.write("&moduleId=4&remindField=&tableId=");
      out.print(tableVO.getId());
      out.write("&processName=信息发布流程&processType=1&publicinfo=");
      out.print(publicinfo);
      out.write("\";\r\n\t</script>\r\n\t");

}else{
	//普通新增
	
      out.write("\r\n\t<script>\r\n\t  location.href=\"/jsoa/InformationAction.do?action=add&allow=");
      out.print(isAllowView);
      out.write("&channelType=");
      out.print(channelType);
      out.write("&userDefine=");
      out.print(userDefine);
      out.write("&publicinfo=1&&publicchannel=");
      out.print(publicchannel);
      out.write("\";\r\n\t</script>\r\n\t");

}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
