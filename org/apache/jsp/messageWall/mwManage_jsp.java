/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:03:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.messageWall;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.messageWall.po.MessageWallGrantPO;

public final class mwManage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.messageWall.po.MessageWallGrantPO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");

	response.setHeader("Cache-Control","no-store");
	response.setHeader("Pragma","no-cache");
	response.setDateHeader ("Expires", 0);

      out.write("\r\n<html>\r\n\t<head>\r\n\t\r\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">\r\n\t<title>留言墙设置</title>\r\n\r\n\t<link href=\"skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\t<link rel=stylesheet type=\"text/css\" href=\"/jsoa/public/date_picker/DateObject1.css\">\r\n\r\n\t</head>\r\n\t<script type=\"text/javascript\" src=\"/jsoa/js/resource/");
      out.print(session.getAttribute("org.apache.struts.action.LOCALE"));
      out.write("/CommonResource.js\" type=\"text/javascript\"></script>\r\n\t<script type=\"text/javascript\">\r\n\r\n\tfunction MM_openBrWindow(theURL,winName,features) { //v2.0\r\n\t\tJSMainWinOpen(theURL,winName,features);\r\n\t}\r\n\t\r\n\t//全选|全除\r\n\tfunction selectAll(obj) {\r\n\t\tvar cs = document.getElementsByName(\"checkbox\");\r\n\t\tfor(var i=0; i<cs.length; i++){\r\n\t\t\tcs[i].checked = obj.checked;\r\n\t\t}\r\n\t}\r\n\t</script>\r\n\t<script src=\"/jsoa/js/checkQuery.js\" type=\"text/javascript\"></script>\r\n\t<script src=\"/jsoa/js/util.js\" type=\"text/javascript\"></script>\r\n\t");

	MessageWallGrantPO mg = null!=request.getAttribute("mg") ? (MessageWallGrantPO) request.getAttribute("mg") 
								: new MessageWallGrantPO();
	 
      out.write("\r\n\t<body class=\"MainFrameBox\" onKeyDown=\"if(event.keyCode==13){ query1();return false;}\">\r\n\t\t<br>\r\n\t\t<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"listTable\">\r\n\t\t\t<tr align=\"center\">\r\n\t\t\t\t<td width=\"5%\" nowrap class=\"listTableHead\"><input type=\"checkbox\" name=\"chkSelect\" style=\"cursor:'hand'\" onclick=\"selectAll(this)\"></td>\r\n\t\t\t\t<td width=\"10%\" class=\"listTableHead\">模块名称</td>\r\n\t\t\t\t<td width=\"30%\" class=\"listTableHead\">使用用户</td>\r\n\t\t\t\t<td width=\"30%\" class=\"listTableHead\">管理员</td>\r\n\t\t\t\t<td width=\"20%\" class=\"listTableHead\">最大限制数</td>\r\n\t\t\t\t<td width=\"5%\" nowrap class=\"listTableHeadLast\">处理</td>\r\n\t\t\t</tr>\r\n\t\t\t<tr >\r\n\t\t\t\t<td class=\"listTableLine1\">\r\n\t\t\t\t\t<input type=\"checkbox\" name=\"checkbox\">\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"listTableLine1\">\r\n\t \t\t\t\t<a href=\"#\" onclick=\"MM_openBrWindow('/jsoa/messageWallGrantAction.do?method=see','','TOP=10,LEFT=10,scrollbars=yes,resizable=yes,width=800,height=650')\" >\r\n\t \t\t\t\t\t");
      out.print(null==mg.getWallname() ? "" : mg.getWallname() );
      out.write("\r\n\t \t\t\t\t</a>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td class=\"listTableLine1\">");
      out.print(null==mg.getWallreadname() ? "" : mg.getWallreadname() );
      out.write("</td>\r\n\t\t\t\t<td class=\"listTableLine1\">");
      out.print(null==mg.getWallmanager() ? "" : mg.getWallmanager() );
      out.write("</td>\r\n\t\t\t\t<td class=\"listTableLine1\">");
      out.print(mg.getWallmaxnum() );
      out.write("</td>\r\n\t\t\t\t<td class=\"listTableLine1\">\r\n\t\t\t\t\t<img  style=\"cursor:pointer\" border=\"0\" src=\"images/modi.gif\" alt=\"\" onclick=\"MM_openBrWindow('/jsoa/messageWallGrantAction.do?method=update','','TOP=10,LEFT=10,scrollbars=yes,resizable=yes,width=800,height=650')\" >&nbsp;\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
