/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:38:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.config.SystemCommon;

public final class keylog_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.util.config.SystemCommon");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

String keySerial=session.getAttribute("keySerial")==null?"":session.getAttribute("keySerial").toString();
String uKey=SystemCommon.getUKey(); 
      out.write("\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" />\r\n<TITLE>正在读取UKey信息，请稍候......</TITLE>\r\n<style type=\"text/css\">\r\nbody{ background:#E8EFF5;}\r\n</style>\r\n");
if(uKey.equals("0")){ 
if(!"".equals(keySerial)){
    String a = (int)(Math.random()*100000000)+""+(int)(Math.random()*100000000);
    session.setAttribute("keyRandom",a);
    
      out.write("\r\n<!-- IKEY的客户端检测控件，用于检测最终用户是否安装了客户端 -->\r\n    <OBJECT ID=\"IkeyCheckClient\" CLASSID=\"CLSID:0C9D30AB-1840-463F-BD45-E4BB5AAD4342\" codebase=\"/jsoa/ikey/ikChkClient.dll#version=1,0,0,5\" width=0 height=0></OBJECT>\r\n    <OBJECT ID=iKeyClient CLASSID=clsid:2669C745-AF54-4B50-B97C-7683123FEBA2 codebase='/jsoa/ikey/iKeyClient.dll#version=1,0,0,6' events='true' width=0 height=0></OBJECT>\r\n<!-- 检测客户端是否存在，如存在则只引入网页证证控件，否则引入整个客户端控件 -->\r\n    <script language=\"javascript\">\r\n    var haveClient = IkeyCheckClient.CheckClient();   \r\n    if( haveClient==true ){\r\n       document.write(\"\");\r\n    }\r\n    \r\n    function IKeyRun(){\r\n        var chlng;\r\n        var ikeyDigest=\"\";\r\n        try {\r\n            //打开iKey设备           \r\n            try{\r\n                iKeyClient.Open();\r\n            } catch(e){\r\n            \t//alert(\"open failed!\");\r\n               return \"\";\r\n            }           \r\n            //获取挑战随机数\r\n            chlng = \"");
      out.print(a);
      out.write("\";\r\n            // 得到客户端IKEY对挑战数据的哈希结果\r\n            try {\r\n                ikeyDigest = iKeyClient.Authenticate(2,3,chlng);\r\n            }catch(e){\r\n                //alert(\"哈希运算失败。返回码 \" + (e.number).toString(10));\r\n            }\r\n            try{\r\n                iKeyClient.Close();\r\n            } catch(e){\r\n            \t//alert(e);\r\n            }\r\n        }catch(e)  {\r\n             return \"\";\r\n        }\r\n        return ikeyDigest;\r\n    }\r\n    </script>\r\n");
}	
      out.write("\r\n</HEAD>\r\n<BODY leftMargin=0 marginheight=\"0\" marginwidth=\"0\" onload=\"javascript:logon();\">\r\n<TABLE align=center border=0 height=\"100%\" width=\"100%\">\r\n  <TBODY>\r\n  <TR>\r\n    <TD align=left height=368 vAlign=top>\r\n      <DIV style=\"FONT-SIZE: 18px;\">&nbsp;正在登录系统，请稍候......</DIV>\r\n\t </TD>\r\n </TR>\r\n</TBODY>\r\n</TABLE>\r\n</BODY>\r\n</HTML>\r\n<SCRIPT LANGUAGE=\"JavaScript\">\r\n<!--\r\nfunction logon(){\r\n    var digest=IKeyRun();    \r\n    if(digest==\"\"){\r\n        window.location.href=\"login.jsp?errorType=nokey\";\r\n    }else{\r\n        window.location.href='validate.jsp?keyDigest='+digest;\r\n    }   \r\n}\r\n//-->\r\n</SCRIPT>\r\n");
}else if(uKey.equals("1")){
      out.write("\r\n</HEAD>\r\n<BODY leftMargin=0 marginheight=\"0\" marginwidth=\"0\" onload=\"uKeyCheckLogon();\">\r\n   ");
if(!"".equals(keySerial)){
      out.write("\r\n\t<div style=\"display:none\">\r\n\t\t<OBJECT CLASSID=CLSID:5825CF28-A64B-47B0-9D0D-0D5C57A4FBCC codebase=\"/jsoa/ikey/UKEY1OCXJS.CAB#version=1,0,0,1\" id=\"iKeyServer\" width=\"0\" height=\"0\"></OBJECT>\r\n\t</div>\r\n\t");
 }
      out.write("\r\n<TABLE align=center border=0 height=\"100%\" width=\"100%\">\r\n<TR><TD align=center height=368 vAlign=top><DIV style=\"FONT-SIZE: 18px;\">&nbsp;正在读取UKey信息，请稍候......</DIV></TD></TR>\r\n</TABLE>\r\n<script type=\"text/javascript\">\r\nfunction uKeyCheckLogon(){\r\n\tvar keySerial = '");
      out.print(keySerial);
      out.write("';\r\n\ttry{\r\n\t\tvar iKeySerial = iKeyServer.TCGetDevSNEX();\r\n\t\tif(keySerial == iKeySerial){\r\n\t\t\twindow.location.href = \"desktop.jsp\";\r\n\t\t}else{\r\n\t\t\twindow.location.href = \"login.jsp?errorType=keyErr\";\r\n\t\t}\r\n\t}catch(e){\r\n\t\twindow.location.href = \"login.jsp?errorType=nokey\";\r\n\t}\r\n}\r\n</script>\r\n</BODY>\r\n</HTML>\r\n");
}else if("5".equals(uKey)){
      out.write("\r\n</HEAD>\r\n<BODY leftMargin=0 marginheight=\"0\" marginwidth=\"0\" onload=\"uKeyCheckLogon();\">\r\n   ");
if(!"".equals(keySerial)){
      out.write("\r\n\t<div style=\"display:none\">\r\n\t\t<object id=\"HTCOM\" codebase=\"32.cab#version=5,0,2015,12181\" classid=\"CLSID:3918a9f3-d9f9-4e2d-87ee-3da7beaae9bf\"></object>\r\n\t</div>\r\n\t");
 }
      out.write("\r\n<TABLE align=center border=0 height=\"100%\" width=\"100%\">\r\n<TR><TD align=center height=368 vAlign=top><DIV style=\"FONT-SIZE: 18px;\">&nbsp;正在读取UKey信息，请稍候......</DIV></TD></TR>\r\n</TABLE>\r\n<script type=\"text/javascript\">\r\nfunction uKeyCheckLogon(){\r\n\tvar keySerial = '");
      out.print(keySerial);
      out.write("';\r\n\ttry{\r\n\t\tvar iKeySerial = HTCOM.getKeySN();\r\n\t\tif(keySerial == iKeySerial){\r\n\t\t\twindow.location.href = \"desktop.jsp\";\r\n\t\t}else{\r\n\t\t\twindow.location.href = \"login.jsp?errorType=keyErr\";\r\n\t\t}\r\n\t}catch(e){\r\n\t\twindow.location.href = \"login.jsp?errorType=nokey\";\r\n\t}\r\n}\r\n</script>\r\n</BODY>\r\n</HTML>\r\n");
}
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
