/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:08:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.iWebOfficeSign.Signature;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.text.*;
import java.util.*;
import java.sql.*;
import DBstep.iDBManager2000.*;

public final class SignatureEditFrm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("DBstep.iDBManager2000");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=gb2312");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);
 
      out.write("\r\n<html>\r\n<head>\r\n<title>签章管理</title>\r\n<link rel='stylesheet' type='text/css' href='../test.css'>\r\n<script language=javascript>\r\n\r\n\r\nfunction ConfirmDel(FileUrl){\r\n\tif (confirm('是否确定删除该印签！')){\r\n\t\tlocation.href=FileUrl;\r\n\t}\r\n}\r\n</Script>\r\n</head>\r\n<SCRIPT language=\"javascript\" src=\"/jsoa/js/openEndow.js\"></SCRIPT>\r\n<body bgcolor=\"#ffffff\" onload=\"showIMG1();\">\r\n<div align=\"center\"><font size=4 color=\"ff0000\">签章管理〖修改签章〗</font></div>\r\n<hr size=1>\r\n<br>\r\n");

String mSignatureID=request.getParameter("SignatureID");
boolean mResult=false;

DBstep.iDBManager2000 DbaObj=new DBstep.iDBManager2000();
if (DbaObj.OpenConnection())
{
  String mSql="select * from Signature where SignatureID = " + mSignatureID;
  try
  {
    ResultSet result=DbaObj.ExecuteQuery(mSql) ;
    if (result.next())
    {
    String showPath = "/jsoa/upload/Signature/"+mSignatureID+result.getString("markType");
    String path = request.getSession().getServletContext().getRealPath("/upload/Signature/")+System.getProperty("file.separator")+mSignatureID+result.getString("markType");
    InputStream inStream = result.getBlob("markBody").getBinaryStream();
    try {
        //用文件模拟输出流
	    OutputStream fout = new FileOutputStream(new File(path));
		//下面将BLOB数据写入文件
		byte[] b = new byte[1024];
		int len = 0;
		while ( (len = inStream.read(b)) != -1) {
			fout.write(b, 0, len);
		}
		//依次关闭
		fout.close();
        inStream.close();
    } catch (IOException e) {
        e.printStackTrace();
    }


      out.write("\r\n<form name=\"webform\" method=\"post\" enctype=\"multipart/form-data\"  action=\"SignatureEdit.jsp\" >\r\n<input type=\"hidden\" name=\"SignatureID\" value=\"");
      out.print(result.getString("SignatureID"));
      out.write("\">\r\n<table border=0  cellspacing='0' cellpadding='0' width=100% align=center class=TBStyle>\r\n<tr>\r\n  <td nowrap align=center class=\"TDTitleStyle\" width=64>用户名称</td>\r\n  <td class=\"TDStyle\" width=\"90%\"><input type=\"text\" name=\"UserName\" size=\"50\" maxlength=\"32\" class=\"IptStyle\" value=\"");
      out.print(result.getString("UserName"));
      out.write("\"></td>\r\n</tr>\r\n<tr>\r\n  <td nowrap align=center class=\"TDTitleStyle\" width=64>密码输入</td>\r\n  <td class=\"TDStyle\" width=\"90%\"><input type=\"password\" name=\"PassWord\" size=\"50\" maxlength=\"32\" class=\"IptStyle\" value=\"");
      out.print(result.getString("PassWord"));
      out.write("\"></td>\r\n</tr>\r\n<tr>\r\n  <td nowrap align=center class=\"TDTitleStyle\" width=64>签章名称</td>\r\n  <td class=\"TDStyle\" width=\"90%\"><input type=\"text\" name=\"MarkName\" size=\"50\" maxlength=\"32\" class=\"IptStyle\" value=\"");
      out.print(result.getString("MarkName"));
      out.write("\"></td>\r\n</tr>\r\n<tr>\r\n  <td nowrap align=center class=\"TDTitleStyle\" width=64>签章文件</td>\r\n  <td class=\"TDStyle\"><input type=\"file\" name=\"MarkFile\" size=\"50\" maxlength=\"60\" class=\"IptStyle\" onblur=\"showImg(this);\" ></td>\r\n</tr>\r\n");

String useName=result.getString("useName");
String useUserId=result.getString("useUserId");
String useOrgId=result.getString("useOrgId");
String useGroupId=result.getString("useGroupId");

String useId="";
if(useName==null){
	useName="";
}else{
	if(useUserId!=null){
		useId+=useUserId;
	}
	if(useOrgId!=null){
		useId+=useOrgId;
	}
	if(useGroupId!=null){
		useId+=useGroupId;
	}
}
String belongUserId=result.getString("belongUserId");
String belongUserName=result.getString("belongUserName");


      out.write("\r\n<tr> \r\n  <td nowrap align=center class=\"TDTitleStyle\" width=64>所属用户</td>\r\n  <td class=\"TDStyle\">\r\n     <input type=\"text\" name=\"belongUserName\" id=\"belongUserName\" style=\"width:99%\" maxlength=\"32\" class=\"inputText\" title=\"请点击选择\" value=\"");
      out.print(belongUserName );
      out.write("\"  onclick=\"openEndow('belongUserId','belongUserName',document.all.belongUserId.value,document.all.belongUserName.value,'user','yes','userorggroup','");
      out.print(session.getAttribute("grantRange"));
      out.write("');\"></textarea>&nbsp;\r\n     <input type=hidden name=belongUserId id=belongUserId value=\"");
      out.print(belongUserId );
      out.write("\">\r\n  </td>\r\n</tr>\r\n<tr> \r\n  <td nowrap align=center class=\"TDTitleStyle\" width=64>使用范围</td>\r\n  <td>\r\n     <textarea  cols=110 rows=8 readonly=true name=useName id=useName class=\"inputTextarea\" \r\n     onclick=\"openEndow('useId','useName',document.getElementById('useId').value,document.getElementById('useName').value,'user','no','userorggroup','");
      out.print(session.getAttribute("grantRange"));
      out.write("');\">");
      out.print(useName);
      out.write("</textarea>&nbsp;\r\n     <input type=hidden name=useId id=useId value=\"");
      out.print(useId);
      out.write("\">\r\n     \r\n  </td>\r\n  </tr>\r\n<tr>\r\n  <td colspan=2 class=\"TDTitleStyle\" nowrap>\r\n    <input type=\"button\" name=\"Edit\" value=\"修 改\" onclick=\"Editform()\">\r\n    <input type=\"button\" name=\"Del\" value=\"删 除\" onclick=\"javascript:ConfirmDel('SignatureDel.jsp?SignatureID=");
      out.print(mSignatureID);
      out.write("');\">\r\n    <input type=\"reset\" name=\"Reset\" value=\"重 填\">\r\n    <input type=\"button\" name=\"Return\" value=\"返 回\"  onclick=\"javascript:history.back();\">\r\n  </td>\r\n</tr>\r\n\r\n</table><center>\r\n<div id=\"imgShowDiv\" style=\"padding-top:15px;width:200px;\">\r\n<img id=\"signIMG\" name=\"signIMG\" src=\"\" style=\"width: 200px;\" />\r\n</div></center>\r\n<input type=\"hidden\" name=\"filePath\" id=\"filePath\" value=\"\" />\r\n</form>\r\n<script language=javascript>\r\nfunction Editform(){\r\nif (document.all.MarkName.value == \"\"){\r\n\t\talert(\"请输入印签名.\");\r\n\t\tdocument.all.MarkName.focus();\r\n}else if(document.all.MarkFile.value != \"\"){\r\n\t\tvar fileName = document.all.MarkFile.value.toUpperCase();\r\n\t\tvar fileType1 = fileName.substring(fileName.length-3, fileName.length);\r\n        var fileType2 = fileName.substring(fileName.length-4, fileName.length);\r\n\t\tif(fileType1=='BMP' || fileType1=='JPG' || fileType1=='GIF' || fileType1=='PNG' || fileType2=='JPEG'){\r\n\t\tdocument.webform.submit();\r\n\t\t}else{\r\n\t\t\talert(\"只能上传图片\");\r\n\t\t}\r\n}else if(document.all.MarkFile.value==\"\"||document.all.MarkFile.value==null){\r\n");
      out.write("       if(confirm(\"您没有上传签章文件，这样就会继续使用之前的签章文件。\")){\r\n          document.webform.submit();\r\n       }\r\n}else{\r\n       document.webform.submit();\r\n}\r\n}\r\n\r\n\r\nString.prototype.endWith=function(str){      \r\n\treturn new RegExp(str+\"$\").test(this);        \r\n}\r\nfunction showImg(obj){\r\n\tif(obj.value!=\"\"){\r\n\t\tvar imgPath = obj.value.toLowerCase();\r\n\t\tif(imgPath.endWith(\".jpg\") || imgPath.endWith(\".bmp\") || imgPath.endWith(\".png\") || imgPath.endWith(\".gif\") || imgPath.endWith(\".jpeg\")){\r\n\t\t\tdocument.getElementById(\"imgShowDiv\").innerHTML=\"<img src='\"+obj.value+\"' style='width:200px;' />\";\r\n\t\t}else{\r\n\t\t\tif(document.getElementById(\"filePath\").value!=obj.value){\r\n\t\t\t\talert(\"文件格式不正确，签章只支持bmp,jpg,png,gif,jpeg格式文件\");\r\n\t\t\t}\r\n\t\t\tdocument.getElementById(\"imgShowDiv\").innerHTML=\"&nbsp;\";\r\n\t\t}\r\n\t\tdocument.getElementById(\"filePath\").value = obj.value;\r\n\t}\r\n}\r\nfunction showIMG1(){\r\n\tdocument.getElementById(\"signIMG\").src=\"");
      out.print(showPath );
      out.write("\"+\"?a=\"+new Date();\r\n}\r\n</script>\r\n");

  }
      else
      {
         out.write("数据库中不存在该标签。<input type='button' value='返 回' onclick='javascript:history.back();'");
      }
      result.close();
    }
    catch(Exception e)
    {
        System.out.println(e.toString());
    }
    DbaObj.CloseConnection() ;
}

      out.write("\r\n</body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
