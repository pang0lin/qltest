/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:46:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wap2.workitem;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.jsflow.service.*;
import com.js.oa.jsflow.util.FormReflection;
import com.js.oa.routine.resource.po.SsMasterPO;
import com.js.oa.routine.resource.po.PtMasterPO;
import com.js.oa.jsflow.service.WorkFlowCommonBD;
import java.util.*;
import java.text.SimpleDateFormat;
import com.js.oa.info.infomanager.service.InformationBD;
import com.js.oa.routine.resource.service.IntoOutStockBD;

public final class item_005fsubmit_005fcomplete_005f3g_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {



//根据组织取所有用户
public String getUserByOrg(String orgIdStr) {
    String orgIds = "";
    if (orgIdStr == null || orgIdStr.length() < 1) {
        return orgIds;
    }
    String[] orgIdArr = orgIdStr.split(",");
    com.js.oa.userdb.util.DbOpt dbopt = null;
    java.sql.ResultSet rs = null;
    try {
        dbopt = new com.js.oa.userdb.util.DbOpt();

        for (int i = 0; i < orgIdArr.length; i++) {
            String orgCode = dbopt.executeQueryToStr(
                    "select ORGIDSTRING from ORG_ORGANIZATION where ORG_ID=" +
                    orgIdArr[i]);
            rs = dbopt.executeQuery("select EMP_ID from ORG_ORGANIZATION_USER where ORG_ID in (select ORG_ID from ORG_ORGANIZATION where ORGIDSTRING like '%" +
                                    orgCode + "%')");
            if (rs != null) {
                while (rs.next()) {
                    Object empId = rs.getObject(1);
                    if (empId != null &&
                        orgIds.indexOf(empId.toString()) < 0) {
                        orgIds += empId.toString() + ",";
                    }
                }
                rs.close();
            }
        }

        dbopt.close();
    } catch (Exception e) {
    	  try {
            dbopt.close();
        } catch (Exception ex) {
        }
    } finally {
        
        return orgIds;
    }
}


/**
 * 根据组ID取所有用户
 * @param groupIdStr String
 * @return String
 */
public String getUserByGroup(String groupIdStr) {
    String userStr = "";
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        java.sql.ResultSet rs = stmt.executeQuery(
                "SELECT DISTINCT EMP_ID FROM ORG_USER_GROUP WHERE GROUP_ID IN (" +
                groupIdStr + ")");
        while (rs.next()) {
            userStr += rs.getString(1) + ",";
        }
        if (userStr.endsWith(",")) {
            userStr = userStr.substring(0, userStr.length() - 1);
        }
        rs.close();
        stmt.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
    return userStr;
}
//更新车辆申请信息
public void dealWithModule_11(String recordId){
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        stmt.executeUpdate("update veh_apply set status=2 where applyid="+recordId);
        stmt.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
}
//更新设备申请信息
public void dealWithModule_14(String recordId){
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        stmt.executeUpdate("update OA_EQUIPMENTAPPLY set STATUS=2 where EQUIPMENTAPPLYID="+recordId);
        stmt.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
}
//更新会议室申请信息
public void dealWithModule_15(String recordId){
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        stmt.executeUpdate("update oa_boardroomapply set status=0 where boardroomapplyid="+recordId);
        stmt.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
}
//更新档案借阅申请信息
public void dealWithModule_12(String recordId){
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        stmt.executeUpdate("update oa_archivesborrow set status=2 where borrow_id="+recordId);
        stmt.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
}
//处理入库退货流程
public void dealWithModule_13_rk(String recordId,String userId,String userName,String mode){
    IntoOutStockBD bd = new IntoOutStockBD();
    Long editId = Long.valueOf(recordId);
    PtMasterPO ptMasterPO = new PtMasterPO();
    ptMasterPO = this.setIntoPOForSaveUpdate(editId,mode);
    ptMasterPO.setId(new Long(recordId));
    ptMasterPO.setCheckFlag("Y");
    ptMasterPO.setCheckMan(new Long(userId));
    ptMasterPO.setCheckManName(userName);
    ptMasterPO.setCheckDate(new java.util.Date());
    if (bd.updateIntoStock(ptMasterPO, this.setPara(recordId,mode)).booleanValue()) {
        editId = new Long(1);
    }
}
private PtMasterPO setIntoPOForSaveUpdate(Long editId,String mode) {
     PtMasterPO ptMasterPO = new PtMasterPO();
     com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    java.sql.ResultSet rs = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        rs = stmt.executeQuery("select * from st_ptmaster where pt_no ="+editId);
        if(rs.next()){
           ptMasterPO.setPtStock(rs.getLong("pt_stock"));
           ptMasterPO.setPtSupp(rs.getString("pt_supp"));
           ptMasterPO.setPtMan(rs.getString("pt_man"));
           ptMasterPO.setPtMoney(rs.getFloat("pt_money"));
           ptMasterPO.setRemark(rs.getString("remark"));
           ptMasterPO.setMakeMan(rs.getLong("make_man"));
           ptMasterPO.setMakeDate(new Date());
           ptMasterPO.setCheckFlag("N");
           ptMasterPO.setPtDate(rs.getDate("pt_date"));
           ptMasterPO.setDomainid(Integer.parseInt("0"));
           ptMasterPO.setPtOrg(rs.getString("pt_org"));
           ptMasterPO.setPtOrgName(rs.getString("pt_orgname"));
           ptMasterPO.setPtMode("1");
           ptMasterPO.setPtTypeDefine(rs.getString("pt_typedefine"));
           ptMasterPO.setPtHandleName(rs.getString("pt_handlename"));
           ptMasterPO.setInvoiceNO(rs.getString("invoiceno"));
           ptMasterPO.setPtHaveWorkFlow("1");
           if ("退货".equalsIgnoreCase(mode)) {
               ptMasterPO.setPtMode("4"); //退货模式
               ptMasterPO.setPtMoney(ptMasterPO.getPtMoney()); //退货总金额为负数
           }
        }
        stmt.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
   
        return ptMasterPO;
    }
//处理出库退库流程
public void dealWithModule_13_ck(String recordId,String userId,String userName,String mode){
    
    IntoOutStockBD bd = new IntoOutStockBD();
    Long editId = Long.valueOf(recordId);
    SsMasterPO po = new SsMasterPO();
    po = this.setPOForComplete(editId,mode);
    po.setId(editId);
    Object[] para = this.setPara(recordId,mode);
    bd.updateOutStock(po, para);
            
    bd.updateOutStockAmnout(po, para);//修改物品库存
}
//处理公共信息发布流程
public void dealWithModeul_4(String recordId){
    InformationBD informationBD = new InformationBD();
    informationBD.informationStatus(recordId);
}

private SsMasterPO setPOForComplete(Long editId,String mode) {
        
        SsMasterPO po = new SsMasterPO();
        com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
	    javax.sql.DataSource ds = dsb.getDataSource();
	    java.sql.Connection conn = null;
	    java.sql.Statement stmt = null;
	    java.sql.ResultSet rs = null;
	    try {
	        conn = ds.getConnection();
	        stmt = conn.createStatement();
	        String sql = "select * from st_ssmaster where ss_no = "+editId;
	        rs = stmt.executeQuery(sql);
	        if(rs.next()){
	           po.setSsDate(rs.getDate("ss_date"));
	           po.setSsDept(rs.getLong("ss_dept"));
	           po.setSsMan(rs.getString("ss_man"));
	           po.setSsMoney(rs.getFloat("ss_money"));
	           po.setRemark(rs.getString("remark"));
	           po.setCheckMan(rs.getLong("check_man"));
	           po.setCheckManName(rs.getString("check_manname"));
	           po.setCheckDate(new java.util.Date());
	           po.setCheckFlag("Y");
	           po.setSsOrg(rs.getString("ss_org"));
	           po.setSsOrgName(rs.getString("ss_orgname"));
	           po.setSsTypeDefine(rs.getString("ss_typedefine"));
	           po.setSsMode("2");
	           if ("退库".equals(mode)) {
                   po.setSsMode("3"); //退库模式
                   po.setSsMoney(po.getSsMoney() * -1); //退库总金额为负数
                }
	        }
	        stmt.close();
	    } catch (java.sql.SQLException e) {
	        e.printStackTrace();
	    } finally {
	        try {
	            rs.close();
	            conn.close();
	        } catch (java.sql.SQLException ex) {
	            ex.printStackTrace();
	        }
	    }
        
        return po;
    }
 private Object[] setPara(String recordId,String mode) {
        SsMasterPO po = new SsMasterPO();
        
        com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
	    javax.sql.DataSource ds = dsb.getDataSource();
	    java.sql.Connection conn = null;
	    java.sql.Statement stmt = null;
	    java.sql.ResultSet rs = null;
	    try {
	        conn = ds.getConnection();
	        stmt = conn.createStatement();
	        List<String> goodsIdList = new ArrayList<String>();
	        List<String> amountList = new ArrayList<String>();
	        List<String> priceList = new ArrayList<String>();
	        List<String> moneyList = new ArrayList<String>();
	        List<String> goodsNameList = new ArrayList<String>();
	        List<String> goodsUnitList = new ArrayList<String>();
	        List<String> goodsSpecsList = new ArrayList<String>();
	        String sql = "select goods_id goodsid,ss_amount amount,price,goods_money money,goods_name goodsname,goods_unit goodsunit,goods_specs from st_ssdetail where ss_no="+recordId+
	                     " union all "+
	                     "select goods_id goodsid,amount amount,mcost price,goods_money money,goods_name goodsname,goods_unit goodsunit,goods_specs from st_ptdetail where pt_no="+recordId;
	        rs = stmt.executeQuery(sql);
	        while(rs.next()){
	           goodsIdList.add(rs.getString("goodsid"));
	           amountList.add(rs.getString("amount"));
	           priceList.add(rs.getString("price"));
	           moneyList.add(rs.getString("money"));
	           goodsNameList.add(rs.getString("goodsname"));
	           goodsUnitList.add(rs.getString("goodsunit"));
	           goodsSpecsList.add(rs.getString("goods_specs"));
	        }
	        String[] goodsId = new String[goodsIdList.size()];
            String[] amount = new String[goodsIdList.size()];
            String[] price = new String[goodsIdList.size()];
            String[] money = new String[goodsIdList.size()];
            String[] goodsName = new String[goodsIdList.size()];
            String[] goodsUnit = new String[goodsIdList.size()];
            String[] goodsSpecs = new String[goodsIdList.size()];
            for(int i=0;i<goodsIdList.size();i++){
               goodsId[i] = goodsIdList.get(i);
               amount[i] = amountList.get(i);
               price[i] = priceList.get(i);
               money[i] = moneyList.get(i);
               goodsName[i] = goodsNameList.get(i);
               goodsUnit[i] = goodsUnitList.get(i);
               goodsSpecs[i] = goodsSpecsList.get(i);
            }
            if("退库".equals(mode) || "退货".equals(mode)){
               for (int i = 0; i < amount.length; i++) {
                  amount[i] = "-" + amount[i];
                  money[i] = "-" + money[i];
                }
            }
            String [] stockIdS = new String[1];
            sql = "select ss_stock stock from st_ssmaster where ss_no="+recordId +" union all select pt_stock stock from st_ptmaster where pt_no="+recordId ;
            rs = stmt.executeQuery(sql);
            if(rs.next()){
               stockIdS[0] = rs.getString("stock");
            }
            stmt.close();
            Object[] para = {
                        goodsId, amount, price, money, goodsName, goodsUnit,
                        goodsSpecs,stockIdS};
            return para;
	        
	    } catch (java.sql.SQLException e) {
	        e.printStackTrace();
	    } finally {
	        try {
	            rs.close();
	            conn.close();
	        } catch (java.sql.SQLException ex) {
	            ex.printStackTrace();
	        }
	    }
        return null;
    }

/**
 * 取办理节点
 * @param groupIdStr String
 * @return String
 */
public String getWorkTitle(String processId,String recordId,String tableId) {
    int module = 1;
    String workTitle="";
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        String sql="select wf_module_id from jsf_workflowprocess wp left join jsf_package pk on wp.wf_package_id=pk.wf_package_id where wp.wf_workflowprocess_id="+processId;
        java.sql.ResultSet rs = stmt.executeQuery(sql);
        if (rs.next()) {
            module=rs.getInt(1);
        }        
        rs.close();
        
        if(module==2){
        	//发文
        	sql="select documentsendfile_title from doc_documentsendfile where documentsendfile_id="+recordId;
        	rs=stmt.executeQuery(sql);
        	if(rs.next()){
        		workTitle=rs.getString(1);
        	}
        	rs.close();

        }else if(module==3){
        	//收文
        	sql="select receivefile_title from doc_receivefile where receivefile_id="+recordId;
        	rs=stmt.executeQuery(sql);
        	if(rs.next()){
        		workTitle=rs.getString(1);
        	}
        	rs.close();
        }
        stmt.close();
        
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
    return workTitle;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.js.oa.jsflow.service");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.routine.resource.service.IntoOutStockBD");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowCommonBD");
    _jspx_imports_classes.add("com.js.oa.info.infomanager.service.InformationBD");
    _jspx_imports_classes.add("com.js.oa.routine.resource.po.SsMasterPO");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.js.oa.routine.resource.po.PtMasterPO");
    _jspx_imports_classes.add("com.js.oa.jsflow.util.FormReflection");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"DTD/xhtml1-strict.dtd\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
      out.write("\r\n\r\n");
 
request.setCharacterEncoding("UTF-8");

String type=request.getParameter("type");
String app=request.getContextPath();

WorkFlowCommonBD workFlowCommonBD = new WorkFlowCommonBD();
WorkFlowButtonBD workFlowButtonBD = new WorkFlowButtonBD();

String userId = session.getAttribute("userId").toString();//当前用户ID
String userName=session.getAttribute("userName").toString();//当前用户ID
String orgId = session.getAttribute("orgId").toString();//当前用户部门ID

String orgIdString = session.getAttribute("orgIdString").toString();//当前用户部门ID
String isStandForWork = request.getParameter("isStandForWork");//是否是代办的任务
String standForUserId = request.getParameter("standForUserId");//代办用户ID
String standForUserName = request.getParameter("standForUserName");//代办用户名称
String comment = request.getParameter("include_comment");//用户办理意见
String curActivityId = request.getParameter("curActivityId");//当前节点ID
String curActivityName = request.getParameter("curActivityName");//当前节点名称
String processName = request.getParameter("processName");//流程名称
String tableId = request.getParameter("tableId");//数据表
String recordId = request.getParameter("recordId");//数据记录ID
String workId = request.getParameter("workId");//workId
String stepCount = request.getParameter("stepCount");//步骤数
String activityClass = request.getParameter("activityClass");//有无子过程
String submitPerson = request.getParameter("submitPerson");
String curTransactType = request.getParameter("curTransactType");//当前节点的办理方式
String moduleId = workFlowCommonBD.getModuleId(tableId);
String processId=request.getParameter("processId");

/**
 如果是其它表单
 需要执行其它表单的complete方法 
*/
/*
java.util.Map formClassNameMethod2 = workFlowCommonBD.getProcessClassMethod(processId);
String formClassName2 = "";
String formClassMethod2 = "";
if(formClassNameMethod2 != null && formClassNameMethod2.get("formClassName") != null && formClassNameMethod2.get("formClassCompMethod") != null){
    formClassName2 = formClassNameMethod2.get("formClassName").toString();
    formClassMethod2 = formClassNameMethod2.get("formClassCompMethod").toString();
    if(!formClassName2.equals("") && !formClassName2.toUpperCase().equals("")
       && !formClassMethod2.equals("") && !formClassMethod2.toUpperCase().equals("")){
        FormReflection formReflection2 = new FormReflection();
        formReflection2.execute("com.js.oa.form."+formClassName2, formClassMethod2, request);
    }
}*/
//处理表单结束

//----------如果当前节点中有可写项，并且可写项中有 审批人、审批人部门、审批时间字段，那么不把这些字段相应值写入数据库中
//--------- 取得表单对应的数据库表名称
String tableName = new com.js.oa.eform.service.CustomFormBD().getTable(tableId);
//构造sql语句
StringBuffer updateSQL=new StringBuffer("update ");
updateSQL.append(tableName).append(" set ");

java.util.List list = new WorkFlowBD().getRWList(curActivityId, tableId, recordId, "1");
String[] fieldsStr = null;
boolean needUpdate=false;
for(int i = 0; i < list.size(); i ++){
	fieldsStr = (String[]) list.get(i);
    if(fieldsStr[0].equals("1")){
        //可写字段
        if("121".equals(fieldsStr[2])){
        	//审批人字段
        	if(needUpdate){
        		updateSQL.append(",");
        	}
        	updateSQL.append(fieldsStr[1]).append("='").append(session.getAttribute("userName")).append("'");
        	needUpdate=true;
        }else if("122".equals(fieldsStr[2])){
        	//审批人部门字段
        	if(needUpdate){
        		updateSQL.append(",");
        	}
        	updateSQL.append(fieldsStr[1]).append("='").append(session.getAttribute("orgName")).append("'");
        	needUpdate=true;
        }else if("123".equals(fieldsStr[2])){
        	//审批人字段
        	if(needUpdate){
        		updateSQL.append(",");
        	}
        	String curTime = new SimpleDateFormat(fieldsStr[3]).format(new Date());
        	updateSQL.append(fieldsStr[1]).append("='").append(curTime).append("'");
        	needUpdate=true;
        }
    }
}

if(needUpdate){
	//有审批人等字段
	updateSQL.append(" where ").append(tableName).append("_id=").append(recordId);
	
	com.js.util.util.DataSourceBase dsb = new com.js.util.util.DataSourceBase();
	javax.sql.DataSource ds = dsb.getDataSource();
	java.sql.Connection conn = null;
	java.sql.Statement stmt = null;
	try {
		conn = ds.getConnection();
		stmt = conn.createStatement();
		stmt.executeUpdate(updateSQL.toString());
		stmt.close();
		conn.close();
	} catch (java.sql.SQLException e) {
		if(conn!=null){
			conn.close();
		}
		e.printStackTrace();
	}
	
}

String remindFieldValue="";

java.util.Map dealwithMap = new java.util.HashMap();
dealwithMap.put("tableId", tableId);
dealwithMap.put("recordId", recordId);
dealwithMap.put("curActivityName", curActivityName);
dealwithMap.put("curActivityId", curActivityId);
dealwithMap.put("userId", userId);
dealwithMap.put("comment", comment);
dealwithMap.put("nextActivityName", "");
dealwithMap.put("nextActivityId", "0");
dealwithMap.put("stepCount", stepCount);
dealwithMap.put("isStandForWork", isStandForWork);
dealwithMap.put("standForUserId", standForUserId);
dealwithMap.put("activityClass", activityClass);
dealwithMap.put("subProcWorkId", request.getParameter("subProcWorkId")==null?"0":request.getParameter("subProcWorkId"));
if(request.getParameter("include_commField") != null){
    dealwithMap.put("commentField", request.getParameter("include_commField"));
}

dealwithMap.put("userScope", request.getParameter("userScope"));
dealwithMap.put("scopeId", request.getParameter("scopeId"));

com.js.oa.jsflow.service.WorkFlowCommonBD wfcBD = new com.js.oa.jsflow.service.WorkFlowCommonBD();
wfcBD.insertDealWith(dealwithMap);

//根据moduleId更新业务表
if("11".equals(moduleId)){
    //车辆申请--更新状态
    this.dealWithModule_11(recordId);
}else if("13".equals(moduleId)){
    //物品管理流程
    String mode = "";
    if(processName.indexOf("退货流程")>=0 || processName.indexOf("进货流程")>=0){  //入库、退货流程
       if(processName.indexOf("退货流程")>=0){
          mode = "退货";
       }else{
          mode = "入库";
       }
       this.dealWithModule_13_rk(recordId, userId, userName, mode);
    }else{//出库退库流程
       if(processName.indexOf("出库")>=0){
          mode = "出库";
       }else{
          mode = "退库";
       }
       this.dealWithModule_13_ck(recordId, userId, userName, mode);
    }
}else if("15".equals(moduleId)){
    //会议室申请
    this.dealWithModule_15(recordId);
}else if("12".equals(moduleId)){
    //档案借阅申请
    this.dealWithModule_12(recordId);
}else if("14".equals(moduleId)){
    this.dealWithModule_14(recordId);
}else if("4".equals(moduleId)){
    this.dealWithModeul_4(recordId);
}    
//更新完毕

//String docTitle = ""; //如果是公文审批，直接将公文标题设置为待办任务标题
String docTitle=this.getWorkTitle(processId,recordId,tableId);
/*if(!"".equals(request.getParameter("titleFieldName"))){
    docTitle = request.getParameter(request.getParameter("titleFieldName"));
}*/

String[] para = {tableId,recordId,curActivityId,processName,submitPerson,
                remindFieldValue,curTransactType,stepCount,
                isStandForWork,
                userId,standForUserId,
                standForUserName, docTitle};
Integer result = workFlowCommonBD.completeWork(para,workId);
String href = "";
if(result.intValue() == 1){
    //流程提交成功，添加办理记录
	com.js.oa.jsflow.vo.WorkLogVO workLogVO = new com.js.oa.jsflow.vo.WorkLogVO();
    workLogVO.setSendUserId(session.getAttribute("userId").toString());
    workLogVO.setSendUserName(session.getAttribute("userName").toString());
    workLogVO.setSendAction("流程办理完毕");
    //workLogVO.setReceiveUserId(mainTransactUser+"");
    workLogVO.setReceiveUserName(" ");
    workLogVO.setProcessId(request.getParameter("processId"));
    workLogVO.setTableId(request.getParameter("tableId"));
    workLogVO.setRecordId(request.getParameter("recordId"));
    workLogVO.setDomainId(session.getAttribute("domainId").toString());
    workFlowButtonBD.setDealWithLog(workLogVO);
    
  //办理完毕 将流程实例中临时数据删除(读写控制信息、节点信息)
    if(!"1".equals(com.js.util.config.SystemCommon.getFlowCommentRange())){
 	   //如果不需要使用意见查看范围则删除 读写控制、临时节点信息
    	if("2".equals(moduleId) || "3".equals(moduleId)){
    		//若是公文则不删除临时节点
    		workFlowButtonBD.deleteFlowTempData(request.getParameter("processId"), tableId, recordId, "1");
    	}else{
    		workFlowButtonBD.deleteFlowTempData(request.getParameter("processId"), tableId, recordId, "2");
    	}
    	         	   
    }else{
 	   //只删除读写控制
    	workFlowButtonBD.deleteFlowTempData(request.getParameter("processId"), tableId, recordId, "1");          	   
    }
}


      out.write("\r\n<HTML xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<HEAD>\r\n<TITLE>办理结束</TITLE>\r\n<META content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\" />\r\n<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n<META name=apple-touch-fullscreen content=YES>\r\n<META name=apple-mobile-web-app-capable content=no>\r\n<LINK rel=apple-touch-icon href=\"");
      out.print(app );
      out.write("/wap2/images/iphone.jpg\">\r\n<LINK rel=stylesheet type=text/css href=\"");
      out.print(app );
      out.write("/wap2/css/main_3g.css\">\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(app );
      out.write("/wap2/js/cookie.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(app );
      out.write("/wap2/js/util.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(app );
      out.write("/wap2/js/frost.js\"></SCRIPT>\r\n<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n</head>\r\n<body>\r\n<BODY>\r\n\t<div class=\"main\">\r\n\t\t<div id=\"top\">\r\n\t\t\t<span id=\"lp2\"><div class=\"btn_3\"><a href=\"/jsoa/WorkDealWithAction.do?action=list&amp;status=0\">返回</a></div></span>\r\n\t\t\t<span id=\"title2\"></span>\r\n\t\t</div>\r\n<div align=\"center\"><br/>\r\n\t事项已经办理完毕!\r\n</div>\r\n</body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
