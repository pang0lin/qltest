/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:46:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wap2.workitem;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.system.util.StaticParam;
import com.js.util.util.IO2File;
import java.util.*;
import java.text.SimpleDateFormat;
import java.sql.*;
import com.js.wap.util.WapUtil;
import com.js.wap.bean.WorkDealWithBean;

public final class item_005fselect_005femp_005f3g_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


//根据组织范围取所有用户 姓名、ID
public List<String[]> getUserByRange(String range) {
    java.sql.Connection conn=null;
    
    List<String[]> userList=new ArrayList<String[]>();
    try {
    	String databaseType=com.js.util.config.SystemCommon.getDatabaseType();
        conn=new com.js.util.util.DataSourceBase().getDataSource().getConnection();
        java.sql.Statement stmt=conn.createStatement();
        java.sql.ResultSet rs = null;
        
        //从范围中分解出组织ID、群组ID        
        String orgStr="",groupStr="";
        String orgWhere="";
       
        StringBuffer sql=new StringBuffer("select org_id from org_organization where ");
        if(databaseType.indexOf("oracle")>=0){
        	sql.append("'").append(range).append("' like '%*'||org_id||'*%'");
        }else{
        	sql.append("'").append(range).append("' like concat('%*',org_id,'*%')");
        }  
        
        rs=stmt.executeQuery(sql.toString());
        while(rs.next()){        	
        	if("".equals(orgWhere)){        		
        		if(databaseType.indexOf("oracle")>=0){
        			orgWhere="org.orgIdstring like '%$"+rs.getString(1)+"$%'";
                }else{
                	orgWhere="org.orgIdString like '%$"+rs.getString(1)+"$%'";
                }        		
        	}else{        		
        		if(databaseType.indexOf("oracle")>=0){
        			orgWhere+=" or org.orgIdstring like '%$"+rs.getString(1)+"$%'";
                }else{
                	orgWhere+=" or org.orgIdString like '%$"+rs.getString(1)+"$%'";
                } 
        	}
        }
        rs.close();
        
        sql=sql.delete(0,sql.length());
        sql.append("select group_id from org_group where ");
        if(databaseType.indexOf("oracle")>=0){
        	sql.append("'").append(range).append("' like '%@'||group_id||'@%'");
        }else{
        	sql.append("'").append(range).append("' like concat('%@',group_id,'@%')");
        }
        
        rs=stmt.executeQuery(sql.toString());
        while(rs.next()){
        	if("".equals(groupStr)){
        		groupStr=rs.getString(1);
        	}else{
        		groupStr+=","+rs.getString(1);
        	}
        }
        rs.close();
        
        
        
        sql=sql.delete(0,sql.length());
        sql.append("select emp.emp_id,emp.empname,org.orgnamestring from org_employee emp left join org_organization_user ou on emp.emp_id=ou.emp_id left join org_organization org on ou.org_id=org.org_id where emp.emp_Id>0 and emp.userisactive=1 and emp.userisdeleted=0 ");
        
        if(!"*0*".equals(range)){        
	        if(!"".equals(orgWhere) && !"".equals(groupStr)){
	        	sql.append(" and ((").append(orgWhere).append(") or ")
	        			.append("emp.emp_id in(select oug.emp_id from org_user_group oug where oug.group_id in (").append(groupStr).append(")))");
	        }else{
	        	if(!"".equals(orgWhere)){
	        		sql.append(" and (").append(orgWhere).append(")");
	        	}else if(!"".equals(groupStr)){
	        		sql.append(" and emp.emp_id in(select oug.emp_id from org_user_group oug where oug.group_id in (").append(groupStr).append("))");
	        	}else{
	        		sql.append(" and 1>2");
	        	}
	        }
        }
        
        rs=stmt.executeQuery(sql.toString());
        String[] temp;
        while(rs.next()){
        	temp=new String[3];
        	temp[0]=rs.getString(1);
        	temp[1]=rs.getString(2);
        	temp[2]=rs.getString(3);
        	userList.add(temp);
        }
        rs.close();
        stmt.close();
        conn.close();
    } catch (Exception e) {
    	try {
            conn.close();
        } catch (SQLException ex) {
        	ex.printStackTrace();
        }
        e.printStackTrace();
    }
    return userList;
}


/**
 * 根据组ID取所有用户
 * @param groupIdStr String
 * @return String
 */
public String getUserByGroup(String groupIdStr) {
    String userStr = "";
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        java.sql.ResultSet rs = stmt.executeQuery(
                "SELECT DISTINCT EMP_ID FROM ORG_USER_GROUP WHERE GROUP_ID IN (" +
                groupIdStr + ")");
        while (rs.next()) {
            userStr += rs.getString(1) + ",";
        }
        if (userStr.endsWith(",")) {
            userStr = userStr.substring(0, userStr.length() - 1);
        }
        rs.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
    return userStr;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.system.util.StaticParam");
    _jspx_imports_classes.add("com.js.wap.bean.WorkDealWithBean");
    _jspx_imports_classes.add("com.js.wap.util.WapUtil");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.js.util.util.IO2File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n");
      out.write('\r');
      out.write('\n');

request.setCharacterEncoding("UTF-8");

String path=request.getContextPath();

String include_comment = request.getParameter("include_comment");

String workId=request.getParameter("workId");
String tableId=request.getParameter("tableId");
String recordId=request.getParameter("recordId");
String workType=request.getParameter("workType");
String processId=request.getParameter("processId");
String processName=request.getParameter("processName");
String curActivityId=request.getParameter("curActivityId");

String curActivityName=request.getParameter("curActivityName");
String submitPerson=request.getParameter("submitPerson");
String submitPersonId=request.getParameter("submitPersonId");
String stepCount=request.getParameter("stepCount");
String remindField=request.getParameter("remindField");
String isStandForWork=request.getParameter("isStandForWork");
String standForUserId=request.getParameter("standForUserId");
String standForUserName=request.getParameter("standForUserName");
String mainLinkFile=request.getParameter("mainLinkFile");
String titleFieldName=request.getParameter("titleFieldName");

String msgFrom=request.getParameter("msgFrom");
String inWorkType=request.getParameter("inWorkType");
String submitTime=request.getParameter("submitTime");
String submitPersonTime=request.getParameter("submitPersonTime");
String initActivity=request.getParameter("initActivity");

String isSend=request.getParameter("isSend");
String fromdesktop=request.getParameter("fromdesktop");
String operName=request.getParameter("operName");
String operId=request.getParameter("operId");
String mainUserType=request.getParameter("mainUserType");
String mainAllowStandFor=request.getParameter("mainAllowStandFor");
String mainAllowCancel=request.getParameter("mainAllowCancel");
String mainAllowTransition=request.getParameter("mainAllowTransition");

String mainPressType=request.getParameter("mainPressType");
String mainDeadLineTime=request.getParameter("mainDeadLineTime");
String mainPressMotionTime=request.getParameter("mainPressMotionTime");
String mainNextActivityId=request.getParameter("mainNextActivityId");
String mainNextActivityName=request.getParameter("mainNextActivityName");
String emergence=request.getParameter("emergence");
String needSendMsg=request.getParameter("needSendMsg");
String smsContent=request.getParameter("smsContent");
String dealTips=request.getParameter("dealTips");
String processDeadlineDate=request.getParameter("processDeadlineDate");

String mainNeedPassRound=request.getParameter("mainNeedPassRound");
String mainPassRoundUserType=request.getParameter("mainPassRoundUserType");
String passRoundId=request.getParameter("passRoundId");
String passRoundName=request.getParameter("passRoundName");
String subProcTempWorkId=request.getParameter("subProcTempWorkId");

String pressUserId=request.getParameter("pressUserId");
String pressUserName=request.getParameter("pressUserName");
String pressTitle=request.getParameter("pressTitle");
String pressContent=request.getParameter("pressContent");
String pressSMS=request.getParameter("pressSMS");

String feedUserId=request.getParameter("feedUserId");
String feedUserName=request.getParameter("feedUserName");
String feedTitle=request.getParameter("feedTitle");
String feedContent=request.getParameter("feedContent");

String transitionUser=request.getParameter("transitionUser");
String transitionUserName=request.getParameter("transitionUserName");
String tranType=request.getParameter("tranType");
String tranFromPersonId=request.getParameter("tranFromPersonId");

String receiveActivityId=request.getParameter("receiveActivityId");
String receiveActivityName=request.getParameter("receiveActivityName");
String receiveUserName=request.getParameter("receiveUserName");

String passLinkFile=request.getParameter("passLinkFile");
String approveMode=request.getParameter("approveMode");


String activityClass=request.getParameter("activityClass");
String curCommField=request.getParameter("include_commField");
String opinionMust=request.getParameter("opinionMust");
String actiCommFieldType=request.getParameter("actiCommFieldType"); //当前节点的批示意见类型

com.js.oa.jsflow.service.WorkFlowButtonBD workFlowButtonBD = new com.js.oa.jsflow.service.WorkFlowButtonBD();
com.js.oa.jsflow.service.WorkFlowBD workFlowBD = new com.js.oa.jsflow.service.WorkFlowBD();
com.js.oa.jsflow.vo.WorkVO vo = new com.js.oa.jsflow.vo.WorkVO();

//下一节点信息
String stepName=request.getParameter("nextActivity");
if(stepName!=null && !"null".equals(stepName) && !"".equals(stepName)){
	mainNextActivityId=stepName.split(",")[0];
	mainNextActivityName=stepName.split(",")[1];
	mainAllowStandFor=stepName.split(",")[2];
	mainAllowCancel=stepName.split(",")[3];
	mainPressType=stepName.split(",")[4];
	mainDeadLineTime=stepName.split(",")[5];
	mainPressMotionTime=stepName.split(",")[6];
	mainAllowTransition=stepName.split(",")[7];
}

//节点办理方式

String transactType = "1";//默认多人并行
transactType = workFlowBD.getTransactType(tableId,recordId,mainNextActivityId);
//下一节点办理人选择方式等信息
String[] nextUser = workFlowBD.getProcActiUser(tableId,recordId,mainNextActivityId);

String range = "*0*";//指定范围
String show = "";//显示

String selectUser = "";//待选人员
String selectUserName = "";//待选人员
String selectUserAccounts = "";//待选人员

//流程办理人类型
int participantType=-1;
javax.sql.DataSource ds = new com.js.util.util.DataSourceBase().getDataSource();
Connection conn=null;
Statement stmt=null;
ResultSet rs=null;
conn=ds.getConnection();
stmt=conn.createStatement();
if(nextUser[0]!=null){
	participantType=Integer.parseInt(nextUser[0]);
	java.util.List candidate;
	java.util.List leaderList = null;
	Object[] tmp;
	//IO2File.printFile(participantType+"");
	switch(participantType){
	case 3:
		//指定全部办理人
		candidate = workFlowBD.getCandidateSeq(nextUser[1],nextUser[3]);
		
		for(int i=0;i<candidate.size();i++){
			tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUser="$"+selectUser.replaceAll(",","\\$\\$")+"$";
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
		break;

	case 2:
		//从候选人中指定
		candidate = workFlowBD.getCandidateSeq(nextUser[1],nextUser[3]);
		for(int i=0;i<candidate.size();i++){
			tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
		break;

	case 4:
		//由表单中的某个字段值决定 
		String fieldName = "";
		String fieldShow = "";
		String tableName = "";
		String fieldValue = "";
		rs = stmt.executeQuery("SELECT field_name,field_show FROM tfield WHERE field_id="+nextUser[4]);
		if(rs.next()){
			fieldName = rs.getString(1);
			fieldShow = rs.getString(2);
		}
		rs.close();
		rs = stmt.executeQuery("SELECT area_table FROM tarea WHERE page_id="+tableId);
		if(rs.next()){
			tableName = rs.getString(1);
		}
		rs.close();
		//,recordId
		String sql = "select "+fieldName+" from "+tableName +" where "+tableName+"_id="+recordId;
		rs = stmt.executeQuery(sql);
		if(rs.next()){
			fieldValue = rs.getString(1);
		}
		rs.close();
		//,201,210,211,212,214,213,215,
		if("211".equals(fieldShow)||"210".equals(fieldShow)){//多选人,单选人
			String[] users = fieldValue.split(";");
			selectUser = users[1].startsWith("$")?users[1].replace("$", ","):","+users[1]+",";
			selectUserName = users[0].endsWith(",")?users[0].substring(0,users[0].length()-1):users[0];
		}else if("201".equals(fieldShow)){//当前登录人Id
			selectUser = ","+fieldValue+",";
			selectUserName = StaticParam.getEmpNameByEmpId(fieldValue);
		}else if("213".equals(fieldShow)){//当前登录人部门Id
			sql = "SELECT e.EMP_ID,e.EMPNAME,o.ORGIDSTRING FROM org_employee e JOIN org_organization_user ou "+
						"ON e.emp_id = ou.EMP_ID JOIN org_organization o ON ou.ORG_ID=o.ORG_ID "+
						"WHERE o.ORGIDSTRING LIKE '%$"+fieldValue+"$%'";
			rs = stmt.executeQuery(sql);
			while(rs.next()){
				selectUser += ","+rs.getString(1)+",";
				selectUserName += rs.getString(2)+",";
			}
			rs.close();
		}else if("215".equals(fieldShow)){//工号
			List<String[]> emplist = StaticParam.getEmpInfoByEmpNumber(fieldValue);
			for(int l =0;l<emplist.size();l++){
				String[] emp = emplist.get(l);
				selectUser += ","+emp[0]+",";
				selectUserName += emp[1]+",";
			}
		}else if("212".equals(fieldShow)||"214".equals(fieldShow)){//单选组织，多选组织
			String[] orgs = fieldValue.split(";");
			sql = "SELECT e.EMP_ID,e.EMPNAME,o.ORGIDSTRING FROM org_employee e JOIN org_organization_user ou "+
						"ON e.emp_id = ou.EMP_ID JOIN org_organization o ON ou.ORG_ID=o.ORG_ID "+
						"WHERE 1<>1 ";
			if("212".equals(fieldShow)){
				sql += " or o.ORGIDSTRING LIKE '%$"+orgs[1]+"$%'";
			}else{
				String[] orgshow = orgs[1].replace("**", ",").replace("*", "").split(",");
				for(int o=0;o<orgshow.length;o++){
					sql += " or o.ORGIDSTRING LIKE '%$"+orgshow[o]+"$%'";
				}
			}
			
			rs = stmt.executeQuery(sql);
			while(rs.next()){
				selectUser += ","+rs.getString(1)+",";
				selectUserName += rs.getString(2)+",";
			}
			rs.close();
		}
		//IO2File.printFile(selectUser+"   "+selectUserName);
		break;

	case 8:
		//从指定范围中选定
		range = nextUser[22].toString();
		if(range != null && !range.equals("") && range.indexOf("@") < 0 && range.indexOf("*") < 0){
			show = "user";
		}else if(range != null && !range.equals("") && range.indexOf("@") < 0){
			show = "userorg";
		}else if(range != null && !range.equals("") && range.indexOf("*") < 0){
			show = "usergroup";
		}
		break;

	case 9:
		//由上一节点参与者从所在组织中选择
		//range = "*"+session.getAttribute("orgId")+"*";
		String sidelineOrg = workFlowButtonBD.getUserSideLineOrgId(session.getAttribute("userId").toString())==null?"":workFlowButtonBD.getUserSideLineOrgId(session.getAttribute("userId").toString());
	    range = "*"+session.getAttribute("orgId")+"*"+sidelineOrg;

		show += "user";
		break;

	case 10:
		//组织领导
		//range = "*"+session.getAttribute("orgId")+"*";		
		//show += "org";
		//选择组织领导
		rs=stmt.executeQuery("select orgmanagerempid,orgmanagerempname from org_organization where org_id="+session.getAttribute("orgId"));
		if(rs.next()){
			selectUser =rs.getString(1);
			selectUserName =rs.getString(2);
			if(selectUser!=null && !"null".equals(selectUser) && !"".equals(selectUser)){
				selectUser = selectUser.substring(1,selectUser.length()-1);
				selectUserName = selectUserName.substring(0,selectUserName.length()-1);
				
				selectUser=selectUser.replaceAll("\\$\\$",",");
			}
		}
		rs.close();
		
		break;

	case 13:
		//由上一节点参与者从选定的群组中选择
		//show += "group";
		range =  nextUser[22].toString();
		String temp = range;
		range = "";

		String domainId = session.getAttribute("domainId")==null?"0":session.getAttribute("domainId").toString();
		String userId=session.getAttribute("userId").toString();
		String orgIdString=session.getAttribute("orgIdString").toString();
		String where="";

		if("".equals(orgIdString)){
			//组织Id为0则可以查看所以组
			where=" or 1=1";
		}else{
			orgIdString=orgIdString.substring(1,orgIdString.length()-1);
			String[] orgArr=orgIdString.split("\\$\\$");
			for(int i=0;i<orgArr.length;i++){
				where+=" or rangeorg like '%*"+orgArr[i]+"*%' ";
			}
			rs=stmt.executeQuery("select group_id from org_group where groupuserstring like '%$"+userId+"$%'");
			while(rs.next()){
				where+=" or rangegroup like '%@"+rs.getString(1)+"@%' ";
			}
			rs.close();
		}
		rs=stmt.executeQuery("select group_id from org_group where ((rangeemp is null and rangeorg is null and rangegroup is null) or (rangeemp='' and rangeorg='' and rangegroup='') or  rangeemp like '%$"+userId+"$%' "+where+") and domain_id="+domainId);
		while(rs.next()){
			if(temp.indexOf("@"+rs.getString(1)+"@")!=-1){
				range += "@"+rs.getString(1)+"@";
			}
		}
		rs.close();		
		if(range != null && !"".equals(range)){
			show = "usergroup";
		}
		break;

	case 12:
		//由上一节点参与者从所有组织中选择
		 show += "org";
		break;

	case 1:
		//由上一节点参与者从所有用户中选择
		// show += "user";
		// 与指定范围相同的处理（范围为全部*0*）   从指定范围中选定
		range = "*0*";
		show="userorggroup";
			
		break;

	case 11:
		//上一节点所有参与者
		vo.setProcessId(Long.valueOf(processId));
		vo.setTableId(Long.valueOf(tableId));
		vo.setRecordId(Long.valueOf(recordId));
		vo.setActivity(Long.valueOf(curActivityId));

		candidate = workFlowButtonBD.getFrontActivityOper(vo);
		for(int i=0;i<candidate.size();i++){
			tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
		break;

	case 7:
		//上一节点办理人的上级领导		
		
		if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
			leaderList = workFlowBD.getLeaderList(session.getAttribute("userId").toString());
		} else{
			leaderList = workFlowBD.getLeaderList(standForUserId);
		}
		
		//转办判断
		if(request.getParameter("tranFromPersonId")!=null && !"null".equals(request.getParameter("tranFromPersonId")) && !"-1".equals(request.getParameter("tranFromPersonId"))){
			leaderList = workFlowBD.getLeaderList(request.getParameter("tranFromPersonId"));
		}


		for(int i=0;i<leaderList.size();i++){
			tmp = (Object[])leaderList.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
		break;

	case 0:
		//流程发起人的上级领导 
		leaderList = workFlowBD.getLeaderList(request.getParameter("submitPersonId"));

		for(int i=0;i<leaderList.size();i++){
			tmp = (Object[])leaderList.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
		break;

	case 5:
		//流程发起人
		selectUser = ","+request.getParameter("submitPersonId")+",";
		selectUserName = new com.js.system.service.usermanager.UserBD().getUserNameById(request.getParameter("submitPersonId"));
		break;

	case 6:
		//从角色中指定 
		
		String currentUserId=session.getAttribute("userId").toString();
		
		if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
			//没有代办人
		} else{
			currentUserId=standForUserId;
		}
		
		//转办判断
		if(request.getParameter("tranFromPersonId")!=null && !"null".equals(request.getParameter("tranFromPersonId")) && !"-1".equals(request.getParameter("tranFromPersonId"))){
			currentUserId=request.getParameter("tranFromPersonId");
		}
		
		
		candidate = workFlowBD.getRoleUserIDAndName(nextUser[18], request.getParameter("submitPersonId")+";"+currentUserId);
		for(int i=0;i<candidate.size();i++){
			tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
		break;

	case 14:
		//流程发起人上级组织 并且 职务级别
		candidate = workFlowButtonBD.getLeaderByDutyLevelAndOrg(request.getParameter("submitPersonId"),nextUser[18]);
		for(int i=0;i<candidate.size();i++){
			tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
		break;
	case 15:
		//从岗位中指定 
		currentUserId=session.getAttribute("userId").toString();
		
		if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
			//没有代办人
		} else{
			currentUserId=standForUserId;
		}
		
		//转办判断
		if(request.getParameter("tranFromPersonId")!=null && !"null".equals(request.getParameter("tranFromPersonId")) && !"-1".equals(request.getParameter("tranFromPersonId"))){
			currentUserId=request.getParameter("tranFromPersonId");
		}
		candidate = workFlowBD.getPositionUserIDAndName(nextUser[18], request.getParameter("submitPersonId")+";"+currentUserId);
		for(int i=0;i<candidate.size();i++){
			tmp = (Object[])candidate.get(i); 
			selectUser += tmp[0]+",";
			selectUserName += tmp[1]+",";
		}
		if(selectUser.indexOf(",")!=-1){
			selectUser = selectUser.substring(0,selectUser.length()-1);
			selectUserName = selectUserName.substring(0,selectUserName.length()-1);
		}
		break;
	}//end switch
}//end if(nextUser[0]!=null)
stmt.close();
conn.close();
	

      out.write("\r\n\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r\n<HTML xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<HEAD>\r\n<TITLE>选择办理人</TITLE>\r\n<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n<META name=apple-touch-fullscreen content=YES>\r\n<META name=apple-mobile-web-app-capable content=no>\r\n<LINK rel=apple-touch-icon href=\"");
      out.print(path);
      out.write("/wap2/images/iphone.jpg\">\r\n<LINK rel=stylesheet type=text/css href=\"");
      out.print(path);
      out.write("/wap2/css/main_3g.css\">\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/cookie.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/util.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/frost.js\"></SCRIPT>\r\n\r\n<SCRIPT language=JavaScript>\r\n<!--\r\nfunction init(){\r\n    //...\r\n    var backUrl = \"");
      out.print(path);
      out.write("/login.jsp?action=logout\";\r\n    setTimeout(scrollTo, 100, 0, 1);\r\n}\r\n\r\nfunction gotoPage(url, flag){\r\n    if(flag){\r\n        location.href=encodeURI(url);\r\n    }\r\n}\r\n\r\nfunction findParent(node, localName)\r\n{\r\n\twhile (node && (node.nodeType != 1 || node.localName.toLowerCase() != localName))\r\n\t\tnode = node.parentNode;\r\n\treturn node;\r\n}\r\n\r\nfunction checkOnlineUser(){\r\n\tvar url = encodeURI(\"");
      out.print(path);
      out.write("/common/checkOnlineUser.jsp\");\r\n\tvar resulthtml = XmlHttpHelper.transmit(false, \"get\", \"text\", url, null, null);\r\n\t//alert(resulthtml);\r\n\tvar result = resulthtml.replace(/\\r|\\n/gm,'');//alert(result);\r\n\treturn result;\r\n}\r\n\r\nfunction displaySearch(flag){\r\n    if(flag==1){\r\n        document.all.dd.style.display=\"none\";\r\n        document.all.search.style.display=\"\";\r\n    }else{\r\n        document.all.dd.style.display=\"\";\r\n        document.all.search.style.display=\"none\";\r\n    }\r\n}\r\n//-->\r\n</SCRIPT>\r\n\r\n<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n</HEAD>\r\n<body onload=\"init();\">\r\n\t<div class=\"main\">\r\n\t\t<div id=\"top\">\r\n\t\t\t<span id=\"lp2\"><div class=\"btn_3\"><a href=\"");
      out.print(path );
      out.write("/wap2/workitem/item_info_3g.jsp\">返回</a></div></span>\r\n\t\t\t<span id=\"title2\"></span>\r\n\t\t</div>\r\n\r\n<form name=\"frm\" action=\"\" method=\"post\">\t\r\n<input type=\"hidden\" name=\"actiCommFieldType\" id=\"actiCommFieldType\" value=\"");
      out.print(actiCommFieldType);
      out.write("\"/>\r\n<input type=\"hidden\" name=\"opinionMust\" id=\"opinionMust\" value=\"");
      out.print(opinionMust);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"operName\" id=\"operName\" value=\"");
      out.print(selectUserName );
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"operId\" id=\"operId\" value=\"");
      out.print(selectUser );
      out.write("\"/>\r\n\t\t\r\n\t<input type=\"hidden\" name=\"participantType\" id=\"participantType\" value=\"");
      out.print(participantType);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"include_comment\" id=\"include_comment\" value=\"");
      out.print(include_comment);
      out.write("\"/>\r\n\t\r\n\t<input type=\"hidden\" name=\"workId\" id=\"workId\" value=\"");
      out.print(workId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"tableId\" id=\"tableId\" value=\"");
      out.print(tableId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"recordId\" id=\"recordId\" value=\"");
      out.print(recordId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"workType\" id=\"workType\"  value=\"");
      out.print(workType);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"processId\" id=\"processId\" value=\"");
      out.print(processId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"processName\" id=\"processName\" value=\"");
      out.print(processName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"curActivityId\" id=\"curActivityId\" value=\"");
      out.print(curActivityId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"curActivityName\" id=\"curActivityName\" value=\"");
      out.print(curActivityName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"submitPerson\" id=\"submitPerson\" value=\"");
      out.print(submitPerson);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"submitPersonId\" id=\"submitPersonId\" value=\"");
      out.print(submitPersonId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"stepCount\" id=\"stepCount\" value=\"");
      out.print(stepCount);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"remindField\" id=\"remindField\" value=\"");
      out.print(remindField);
      out.write("\"/>\t\r\n\t<input type=\"hidden\" name=\"isStandForWork\" id=\"isStandForWork\" value=\"");
      out.print(isStandForWork);
      out.write("\"/>\t\r\n\t<input type=\"hidden\" name=\"standForUserId\" id=\"standForUserId\" value=\"");
      out.print(standForUserId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"standForUserName\" id=\"standForUserName\" value=\"");
      out.print(standForUserName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"mainLinkFile\" id=\"mainLinkFile\" value=\"");
      out.print(mainLinkFile);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"titleFieldName\" id=\"titleFieldName\" value=\"");
      out.print(titleFieldName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"msgFrom\" id=\"msgFrom\" value=\"");
      out.print(msgFrom);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"inWorkType\" id=\"inWorkType\" value=\"");
      out.print(inWorkType);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"submitTime\" id=\"submitTime\" value=\"");
      out.print(submitTime);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"submitPersonTime\" id=\"submitPersonTime\" value=\"");
      out.print(submitPersonTime);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"initActivity\" id=\"initActivity\" value=\"");
      out.print(initActivity);
      out.write("\"/>\r\n\t\r\n\t<!-- 新增表单域 -->\r\n\t<input type=\"hidden\" name=\"isSend\" id=\"isSend\" value=\"");
      out.print(isSend);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"fromdesktop\" id=\"fromdesktop\" value=\"");
      out.print(fromdesktop);
      out.write("\"/>\r\n\t<!-- <input type=\"hidden\" name=\"operName\" value=\"");
      out.print(operName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"operId\" value=\"");
      out.print(operId);
      out.write("\"/> -->\r\n\t<input type=\"hidden\" name=\"mainUserType\" id=\"mainUserType\" value=\"");
      out.print(mainUserType);
      out.write("\"/><!--参与人类型-->\r\n\t<input type=\"hidden\" name=\"mainAllowStandFor\" id=\"mainAllowStandFor\" value=\"");
      out.print(mainAllowStandFor);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"mainAllowCancel\" id=\"mainAllowCancel\" value=\"");
      out.print(mainAllowCancel);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"mainAllowTransition\" id=\"mainAllowTransition\" value=\"");
      out.print(mainAllowTransition);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"mainPressType\" id=\"mainPressType\" value=\"");
      out.print(mainPressType);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"mainDeadLineTime\" id=\"mainDeadLineTime\" value=\"");
      out.print(mainDeadLineTime);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"mainPressMotionTime\" id=\"mainPressMotionTime\" value=\"");
      out.print(mainPressMotionTime);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"mainNextActivityId\" id=\"mainNextActivityId\" value=\"");
      out.print(mainNextActivityId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"mainNextActivityName\" id=\"mainNextActivityName\" value=\"");
      out.print(mainNextActivityName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"emergence\" id=\"emergence\" value=\"");
      out.print(emergence);
      out.write("\"/><!--缓急程度-->\r\n\t<input type=\"hidden\" name=\"needSendMsg\" id=\"needSendMsg\" value=\"");
      out.print(needSendMsg);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"smsContent\" id=\"smsContent\" value=\"");
      out.print(smsContent);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"dealTips\" id=\"dealTips\" value=\"");
      out.print(dealTips);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"processDeadlineDate\" id=\"processDeadlineDate\" value=\"");
      out.print(processDeadlineDate);
      out.write("\"/>\r\n\t\r\n\t<!--阅件参数-->\r\n\t<input type=\"hidden\" name=\"mainNeedPassRound\" id=\"mainNeedPassRound\" value=\"");
      out.print(mainNeedPassRound);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"mainPassRoundUserType\" id=\"mainPassRoundUserType\" value=\"");
      out.print(mainPassRoundUserType);
      out.write("\"/><!--阅件人类型-->\r\n\t<input type=\"hidden\" name=\"passRoundId\" id=\"passRoundId\" value=\"");
      out.print(passRoundId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"passRoundName\" id=\"passRoundName\" value=\"");
      out.print(passRoundName);
      out.write("\"/>\r\n\r\n\t<!--子流程临时workID-->\r\n\t<input type=\"hidden\" name=\"subProcTempWorkId\" id=\"subProcTempWorkId\" value=\"");
      out.print(subProcTempWorkId);
      out.write("\"/>\r\n\t\r\n\t<!--催办-->\r\n\t<input type=\"hidden\" name=\"pressUserId\" id=\"pressUserId\" value=\"");
      out.print(pressUserId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"pressUserName\" id=\"pressUserName\" value=\"");
      out.print(pressUserName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"pressTitle\" id=\"pressTitle\" value=\"");
      out.print(pressTitle);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"pressContent\" id=\"pressContent\" value=\"");
      out.print(pressContent);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"pressSMS\" id=\"pressSMS\"  value=\"");
      out.print(pressSMS);
      out.write("\"/>\r\n\t\r\n\t<!--反馈-->\r\n\t<input type=\"hidden\" name=\"feedUserId\" id=\"feedUserId\" value=\"");
      out.print(feedUserId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"feedUserName\" id=\"feedUserName\" value=\"");
      out.print(feedUserName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"feedTitle\"  id=\"feedTitle\" value=\"");
      out.print(feedTitle);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"feedContent\" id=\"feedContent\" value=\"");
      out.print(feedContent);
      out.write("\"/>\r\n\t\r\n\t<!--转办-->\r\n\t<input type=\"hidden\" name=\"transitionUser\" id=\"transitionUser\" value=\"");
      out.print(transitionUser);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"transitionUserName\" id=\"transitionUserName\" value=\"");
      out.print(transitionUserName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"tranType\" id=\"tranType\" value=\"");
      out.print(tranType);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"tranFromPersonId\" id=\"tranFromPersonId\" value=\"");
      out.print(tranFromPersonId);
      out.write("\"/>\r\n\t\r\n\t<!--收回-->\r\n\t<input type=\"hidden\" name=\"receiveActivityId\" id=\"receiveActivityId\" value=\"");
      out.print(receiveActivityId);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"receiveActivityName\" id=\"receiveActivityName\" value=\"");
      out.print(receiveActivityName);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"receiveUserName\" id=\"receiveUserName\" value=\"");
      out.print(receiveUserName);
      out.write("\"/>\r\n\t\r\n\t<!--阅件-->\r\n\t<input type=\"hidden\" name=\"passLinkFile\" id=\"passLinkFile\" value=\"");
      out.print(passLinkFile);
      out.write("\"/>\r\n\t\r\n\t<!--当前节点办理方式 默认 1为多人并行-->\r\n\t<input type=\"hidden\" name=\"approveMode\" id=\"approveMode\" value=\"");
      out.print(approveMode);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"activityClass\" id=\"activityClass\" value=\"");
      out.print(activityClass);
      out.write("\"/>\r\n\t<input type=\"hidden\" name=\"include_commField\" id=\"include_commField\" value=\"");
      out.print(curCommField);
      out.write("\">\r\n\t\r\n\t<div class=\"f_1\">选择办理人</div>\r\n    <div class=\"box_2\">\r\n    \r\n    \t<div class=\"list_2\">\r\n\t\t\t<div class=\"t1\">办理人：</div>\r\n\t\t\t<div class=\"t2\">\r\n\t\t\t\r\n    \r\n    \r\n\r\n  \t");
if(participantType==3 || participantType==5 || 4 ==participantType){//指定全部办理、流程发起人
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print(selectUserName );
      out.write("<br/>\r\n\t<input class=\"button2\" type=\"button\" onclick=\"javascript:submitForm();\" value=\"确定\"/>\r\n\t");
	
	}else if(participantType==6 || participantType==14 || participantType==0 || participantType==7 || participantType==11 || participantType==2 || participantType==10 || participantType==15){
		//从角色中指定、流程发起人上级组织 并且 职务级别、上级领导、上一办理人的上级领导、上一节点所有参与者、从候选人中选择、组织领导、从岗位中选择
		//这些选择方式显示下拉列表
	
      out.write("\r\n\t<select name=\"newSelectedOper\" id=\"newSelectedOper\" multiple=\"true\" style=\"width:200px;\" >\r\n\t\t\t");
String[] selectUserArr=selectUser.split(",");
			String[] selectUserNameArr=selectUserName.split(",");
			for(int i=0;i<selectUserArr.length;i++){
      out.write("         \r\n\t        <option value=\"");
      out.print(selectUserArr[i]);
      out.write(',');
      out.print(selectUserNameArr[i]);
      out.write('"');
      out.write(' ');
      out.print(operId.contains(","+selectUserArr[i]+",")?"selected":"" );
      out.write('>');
      out.print(selectUserNameArr[i]);
      out.write("</option>\r\n\t        ");
}
      out.write("\r\n\t</select>\t      \r\n\t<input class=\"button2\" type=\"button\" onclick=\"javascript:setOperUser();submitForm();\" value=\"确定\"/>\r\n\t");

	}else if(participantType==1){
		//从组织或群组中选择
	
      out.write("\r\n\t请输入用户姓名或帐号查询<br/>\r\n\t<input type=\"text\" name=\"searchValue\"/>\t\r\n\t<input class=\"button2\" type=\"button\" onclick=\"javascript:searchEmp();\" value=\"查询\"/>\t\r\n\t");
}else{//组织或群组 
      out.write("\r\n\t\t<select name=\"newSelectedOper\" id=\"newSelectedOper\" multiple=\"true\" style=\"width:200px;\">\r\n\t\t\t\t");
List<String[]> list=this.getUserByRange(range);
		        for(String[] temp:list){
      out.write("\r\n\t\t        \t<option value=\"");
      out.print(temp[0]);
      out.write(',');
      out.print(temp[1]);
      out.write('"');
      out.write(' ');
      out.print(operId.contains(","+temp[0]+",")?"selected":"" );
      out.write('>');
      out.print(temp[1]);
      out.write("</option>\r\n\t\t        ");
}
      out.write("\r\n\t\t </select>\t\t      \r\n\t\t<input class=\"button2\" type=\"button\" onclick=\"javascript:setOperUser();submitForm();\" value=\"确定\"/>\r\n\t");
}
      out.write("\r\n\t\r\n\t\t\t</div>\r\n\t\t\t<div class=\"clear\"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"height1\"></div>\r\n</form>\r\n\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\nfunction setOperUser(){\r\n\tvar operNameValue = \"\";//document.getElementById(\"operName\").value;\r\n\tvar operIdValue = \"\";//document.getElementById(\"operId\").value;\r\n\tvar newSelectedOperOptions = document.getElementById(\"newSelectedOper\").options;\r\n\tfor(var i=0;i<newSelectedOperOptions.length;i++){\r\n\t\tif(newSelectedOperOptions[i].selected){\r\n\t\t\tvar value = newSelectedOperOptions[i].value.split(\",\");\r\n\t\t\toperNameValue += value[1]+\",\";\r\n\t\t\toperIdValue += \",\"+value[0]+\",\";\r\n\t\t}\r\n\t}\r\n\tdocument.getElementById(\"operName\").value = operNameValue;\r\n\tdocument.getElementById(\"operId\").value = operIdValue;\r\n}\r\nfunction submitForm(){\r\n\tdocument.frm.action=\"");
      out.print(path);
      out.write("/wap2/workitem/item_select_act_3g.jsp?fromSelUser=1\";\r\n\tdocument.frm.submit();\r\n}\r\nfunction searchEmp(){\r\n\tdocument.frm.action=\"");
      out.print(path);
      out.write("/wap2/workitem/item_select_emp_search_3g.jsp\";\r\n\tdocument.frm.submit();\r\n}\r\nfunction endForm(){\r\n\tdocument.frm.action=\"\";\r\n\tdocument.frm.submit();\r\n}\r\n</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
