/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:45:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.module;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;

public final class upFileList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n<html>\r\n<head>\r\n<title>上传文件列表</title>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">\r\n<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<link href=\"/jsoa/style/cssmain.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");

String sub = request.getParameter("sub");
String from = request.getParameter("from");

      out.write("\r\n</head>\r\n\r\n<body   class=\"MainFrameBox\">\r\n<table width=\"100%\" border=0 cellpadding=\"0\" cellspacing=\"0\">\r\n<tr>\r\n<td>\r\n\r\n<!-- LIST TITLE PART -->\r\n<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"listTable outTopline\">\r\n\t<tr>\r\n\t\t<td width=\"8%\"  class=\"listTableHead\" nowrap><font color=\"#FFFFFF\">序号</font></td>\r\n\t\t<td class=\"listTableHead\"><font color=\"#FFFFFF\">文件名称</font></td>\r\n\t\t<td width=\"8%\" align=\"center\"  class=\"listTableHeadLast\" nowrap><font color=\"#FFFFFF\">操作</font></td>\r\n\t</tr>\r\n\t");

	     Calendar cal = Calendar.getInstance(); 
	     String yearstr=String.valueOf(cal.get(Calendar.YEAR));
		String uploadDefPath = "/upload/"+yearstr+"/customize/";
		String path = request.getRealPath("/")  + uploadDefPath;
		File d = new File(path);
		File list[]=d.listFiles();
		for(int i=0;i<list.length;i++){
			String listClass="listTableLine1";
if(i%2 != 0){listClass="listTableLine2";}
	
      out.write("\r\n\t<tr>\r\n\t\t<td class=\"");
      out.print(listClass);
      out.write('"');
      out.write('>');
      out.print(i+1);
      out.write("</td>\r\n\t\t<td class=\"");
      out.print(listClass);
      out.write('"');
      out.write('>');
      out.print(list[i].getName());
      out.write("</td>\r\n\t    <td class=\"");
      out.print(listClass);
      out.write(" listTableLineLastTD\">\r\n\t\t    <a href=\"#\" onclick=\"returnName('");
      out.print(list[i].getName());
      out.write("');\"/>选择\r\n\t\t</td>\r\n\t</tr>\r\n\t");
}
      out.write("\r\n</table>\r\n<!-- LIST TITLE PART -->\r\n\r\n<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"pagebar\">  \r\n  <tr>\r\n    <td></td>\r\n  </tr>  \r\n</table>\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n</body>\r\n</html>\r\n<script>\r\nfunction returnName(name) {\r\n  //alert(name);\r\n  ");

  	if ("true".equals(sub)) {
            if ("1".equals(from)) {
  
      out.write("\r\n  opener.opener.document.getElementById(\"fileFileName\").value = name;\r\n  ");
        }else { 
      out.write("\r\n  opener.opener.document.getElementById(\"hFile\").value = name;\r\n  ");
              }
      out.write("\r\n\r\n  ");
    } else {
         if ("1".equals(from)) { 
      out.write("\r\n  opener.document.getElementById(\"fileFileName\").value = name;\r\n  ");
     } else { 
      out.write("\r\n  opener.document.getElementById(\"hFile\").value = name;\r\n  ");
     }
       }
      out.write("\r\n  window.close();\r\n}\r\n</script>\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
