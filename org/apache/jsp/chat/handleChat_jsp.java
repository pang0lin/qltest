/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:44:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.chat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.online.po.ChatPO;
import com.js.oa.online.service.ChatDB;
import java.text.SimpleDateFormat;
import java.util.*;
import java.text.*;
import com.js.oa.online.po.ChatAccessoryPO;
import java.util.HashSet;
import java.util.Set;
import com.js.oa.userdb.util.DbOpt;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import com.js.system.vo.messages.MessagesVO;
import com.js.system.service.messages.MessagesBD;
import com.js.system.service.usermanager.UserBD;
import java.net.URLDecoder;
import java.net.URLEncoder;

public final class handleChat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

public String getCurrentTime() {
		Date currentTime = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String dateString = formatter.format(currentTime);
		return dateString;
        	}


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.online.po.ChatPO");
    _jspx_imports_classes.add("com.js.system.vo.messages.MessagesVO");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("com.js.oa.online.po.ChatAccessoryPO");
    _jspx_imports_classes.add("com.js.oa.online.service.ChatDB");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.js.system.service.usermanager.UserBD");
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("com.js.system.service.messages.MessagesBD");
    _jspx_imports_classes.add("com.js.oa.userdb.util.DbOpt");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n<html>\r\n\t<body>\r\n\t\t");
	UserBD userBD=new UserBD();
			request.setCharacterEncoding("gbk");
			ChatDB chatDB = new ChatDB();
			MessagesBD messagesBD=new MessagesBD();
			MessagesVO messagesVO = null;
			String action = request.getParameter("myaction");
			String sendID = session.getAttribute("userId").toString();		
			String sendName=session.getAttribute("userName").toString();	
			ChatPO chatPO = new ChatPO();
			if (action.equals("add")) {		
				String toID = request.getParameter("mailtoid");
				if(toID==null){
				      toID="";
				}
				//处理$$$$$
			   	String[] strTmp=toID.split("\\$");
			    List list=new ArrayList();	
			    
			    for (int k = 0; k < strTmp.length; k++) {
				      if(!strTmp[k].equals("")){
				       	   list.add(strTmp[k]);      	  			    
					  }
				}
			    Calendar tmp = Calendar.getInstance();
				tmp.set(2050,12,12);
				//截取时间从第0个字符开始-zx
			    String chatTime=getCurrentTime().substring(0, 16);
			    String content = request.getParameter("content");
			    String msgTitle=content;
				
				if(msgTitle.length()>50)
				{
				msgTitle=msgTitle.substring(0,50);
				msgTitle+="...";
				
				}
				for(int j=0;j<list.size();j++){
					chatPO.setToUserId((String)list.get(j));
						
					chatPO.setContent(content);
					chatPO.setSendUserId(sendID);
					chatPO.setChatTime(chatTime);
					chatPO.setIsRead("0");
					
					chatPO.setMsgSelfFlag("0");
					
					if (request.getParameter("accessorySize") != null
							&& !"".equals(request.getParameter("accessorySize"))) {
						chatPO.setAccessorySize(request
								.getParameter("accessorySize"));
					} else {
						chatPO.setAccessorySize("0");
					}
	
					HashSet Accessory = new HashSet();
					String[] fileName = request.getParameterValues("chatFileName");
					String[] saveName = request.getParameterValues("chatSaveName");
					if (fileName != null) {
						chatPO.setChatHasaccessory("1");
						//如果附件名不为空，就将数据库中 '是否有附件' 这个字段置为1
						for (int i = 0; i < fileName.length; i++) {
							if (!"".equals(fileName[i])) {
								ChatAccessoryPO chatAccessoryPO = new ChatAccessoryPO();
								chatAccessoryPO.setAccessoryName(fileName[i]);
								chatAccessoryPO.setAccessorySavename(saveName[i]);
								chatAccessoryPO.setChatPO(chatPO);
								Accessory.add(chatAccessoryPO);
								chatDB.addChatAccessory(chatAccessoryPO);
							}
						}
					} else {
						chatPO.setChatHasaccessory("0");
						//如果附件为空，就将数据库中 '是否有附件' 这个字段置为0
					}
					chatPO.setChatAccessory((Set) Accessory);
					long dataId=chatDB.saveChat(chatPO);
		        }	
				
				for(int j=0;j<list.size();j++){
					chatPO.setToUserId((String)list.get(j));	
					chatPO.setContent(content);
					chatPO.setSendUserId(sendID);
					chatPO.setChatTime(chatTime);
					chatPO.setIsRead("1");
					
					chatPO.setMsgSelfFlag("1");
					
					if (request.getParameter("accessorySize") != null
							&& !"".equals(request.getParameter("accessorySize"))) {
						chatPO.setAccessorySize(request
								.getParameter("accessorySize"));
					} else {
						chatPO.setAccessorySize("0");
					}
	
					HashSet Accessory = new HashSet();
					String[] fileName = request.getParameterValues("chatFileName");
					String[] saveName = request.getParameterValues("chatSaveName");
					if (fileName != null) {
						chatPO.setChatHasaccessory("1");
						//如果附件名不为空，就将数据库中 '是否有附件' 这个字段置为1
						for (int i = 0; i < fileName.length; i++) {
							if (!"".equals(fileName[i])) {
								ChatAccessoryPO chatAccessoryPO = new ChatAccessoryPO();
								chatAccessoryPO.setAccessoryName(fileName[i]);
								chatAccessoryPO.setAccessorySavename(saveName[i]);
								chatAccessoryPO.setChatPO(chatPO);
								Accessory.add(chatAccessoryPO);
								chatDB.addChatAccessory(chatAccessoryPO);
							}
						}
					} else {
						chatPO.setChatHasaccessory("0");
						//如果附件为空，就将数据库中 '是否有附件' 这个字段置为0
					}
					chatPO.setChatAccessory((Set) Accessory);
					long chatid=chatDB.saveChat(chatPO);					
					messagesVO=new MessagesVO();
					messagesVO.setMessage_send_UserName(sendName);
					messagesVO.setMessage_type("Chat");
					messagesVO.setMessage_send_UserId(Long.parseLong(sendID));
					messagesVO.setMessage_show(1);
					messagesVO.setMessage_status(1);
					messagesVO.setMessage_time(new Date());
					messagesVO.setMessage_title(msgTitle);
					messagesVO.setMessage_url("/jsoa/chat/showChat.jsp?id="+chatid);
					messagesVO.setMessage_toUserId(Long.parseLong(chatPO.getToUserId()));
					messagesVO.setMessage_date_begin(new Date());
					messagesVO.setData_id(chatid);
					messagesVO.setMessage_date_end(tmp.getTime());
					messagesBD.messageAdd(messagesVO);
		       }	
				
				
				out.print("<script language='javaScript'>window.close();</script>");		
			}
			//删除聊天记录
			if (action.equals("delete")) {
			    String deltype=request.getParameter("deltype")==null?"":request.getParameter("deltype");
				String str = request.getParameter("chatId");
				String where=" where chat_id <> 0";
				String oe="0";
			if(!"".equals(deltype)){	 
				 
				 
				 where+=" and ((to_userId =" + sendID+" and msg_self_flag='1') or (send_userId=" + sendID+" and msg_self_flag='0') )";
				 if(!"all".equals(deltype)){
			
				SimpleDateFormat dateFormat = new SimpleDateFormat( "MM-dd HH:mm"); 
				  Calendar calendar=Calendar.getInstance();
				  calendar.setTime(new Date());
				  	if("new".equals(deltype))
				  	{
				  		where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
				  		calendar.add(Calendar.DAY_OF_YEAR,-7);
				  		where+=" and chat_time > '"+dateFormat.format(calendar.getTime())+"'";
				  	}
                 else if("week".equals(deltype))
                 {
                 	 calendar.add(Calendar.DAY_OF_YEAR,-7);
                 	 where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
                 	 
                 }else if("month".equals(deltype)){
                  calendar.add(Calendar.MONTH,-1);
                  where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
                 }else if("tmonth".equals(deltype)){
                  calendar.add(Calendar.MONTH,-3);
                  where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
                 }else if("hyear".equals(deltype)){
                  calendar.add(Calendar.MONTH,-6);
                  where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
                 }else if("year".equals(deltype)){
                  calendar.add(Calendar.MONTH,-12);
                  where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
                 }
				 }else{
				 
				 
				 
				 } 
				 
				 
				 oe="1";
				 
		   }else{
		   
		   if(!"".equals(str))
				 {
				str=str.substring(0,str.trim().length()-1);
				
				 where+=" and chat_id in ("+str+")";
				 }
		   
		   }
			
					DbOpt dbopt = null;
					java.sql.ResultSet rs=null;
					try {
						dbopt = new DbOpt();
						String chatIds="";
						String sql = "delete from  chat "+where;
						if("1".equals(oe)){
						rs=dbopt.executeQuery("select chat_id from  chat "+where);
						while(rs.next()){
						
						chatIds=rs.getString(1)+",";
						
						}
						if(!"".equals(chatIds)){
						chatIds=chatIds.substring(0,chatIds.length()-1);
						dbopt.executeUpdate("delete from  chat_accessory where chat_id in ("+chatIds+")");
						
						dbopt.executeUpdate("delete from  sys_messages where data_id in ("+chatIds+") and message_type like 'Chat' and message_toUserId="+sendID );
						
						}
						}else{
						
						dbopt.executeUpdate("delete from  chat_accessory "+where);
						
						dbopt.executeUpdate("delete from  sys_messages where data_id in ("+str+") and message_type like 'Chat' and message_toUserId="+sendID );
						
						}
						dbopt.executeUpdate(sql);
					} catch (Exception e) {
						e.printStackTrace();
						throw e;
					} finally {
						try {
						   if(null!=dbopt){
							dbopt.close();
							}
							if(null!=rs){
							rs.close();
							}
						} catch (SQLException ex) {
						}
						
				}
				if(request.getParameter("toUserId")!=null){
					String toUserId = request.getParameter("toUserId");
					String userNameString = request.getParameter("username");
					response.sendRedirect("/jsoa/getChat.do?action=getAll&str=all&toUserId="+toUserId+"&username="+URLEncoder.encode(userNameString,"GBK"));
				}else{
					response.sendRedirect("/jsoa/getChat.do?action=getAll&str=all");
				}
				//response.sendRedirect("/jsoa/getChat.do?action=getAll&str=all");
			}
			if("markAsRead".equals(action))
			{
				String markype=request.getParameter("markype")==null?"":request.getParameter("markype");
				String str=request.getParameter("chatId");
				String where=" where chat_id <> 0";
				String oe="0";
				if(!"".equals(markype))
				{
					where+=" and ((to_userId =" + sendID+" and msg_self_flag='1') or (send_userId=" + sendID+" and msg_self_flag='0') )";
					if(!"all".equals(markype))//不是全部
					{
						SimpleDateFormat dateFormat = new SimpleDateFormat( "MM-dd HH:mm"); 
					  	Calendar calendar=Calendar.getInstance();
					  	calendar.setTime(new Date());
					  	if("new".equals(markype))
					  	{
					  		where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
					  		calendar.add(Calendar.DAY_OF_YEAR,-7);
					  		where+=" and chat_time > '"+dateFormat.format(calendar.getTime())+"'";
					  	}
	                 	else if("week".equals(markype))
	                 	{
	                 		calendar.add(Calendar.DAY_OF_YEAR,-7);
	                 		where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
	                 	}
	                 	else if("month".equals(markype))
	                 	{
	                 		calendar.add(Calendar.MONTH,-1);
	                 		where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
	                 	}
	                 	else if("tmonth".equals(markype))
	                 	{
	                 		calendar.add(Calendar.MONTH,-3);
	                 		where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
	                 	}
	                 	else if("hyear".equals(markype))
	                 	{
	                 		calendar.add(Calendar.MONTH,-6);
	                 		where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
	                 	}
	                 	else if("year".equals(markype))
	                 	{
	                 		calendar.add(Calendar.MONTH,-12);
	                 		where+=" and chat_time < '"+dateFormat.format(calendar.getTime())+"'";
	                 	}			 
					 }
					 oe="1";
				}
				else
				{
					if(!"".equals(str))
					{
						str=str.substring(0,str.trim().length()-1);
					 	where+=" and chat_id in ("+str+")";
					}
				}
				DbOpt dbopt = null;
				java.sql.ResultSet rs=null;
				try 
				{
					dbopt = new DbOpt();
					String sql = "update chat set is_read='0' "+where;
					dbopt.executeUpdate(sql);
					String getDataId="select chat_id from chat "+where;
					List list=dbopt.executeQueryToList(getDataId);
					String dataIds="";
					for(int i=0;i<list.size();i++)
					{
						HashMap dataId=(HashMap)list.get(i);
						dataIds+=dataId.get("chat_id")+",";
					}
					if(dataIds.length()>0)
					{
						dataIds=dataIds.substring(0,dataIds.trim().length()-1);
						dbopt.executeUpdate("update sys_messages set message_status ='0' where message_type='Chat' and data_id in("+dataIds+")");
					}
				} 
				catch (Exception e) 
				{
					e.printStackTrace();
					throw e;
				} 
				finally 
				{
					try 
					{
						if(null!=dbopt)
						{
							dbopt.close();
						}
						if(null!=rs)
						{
							rs.close();
						}
					}
					catch (SQLException ex){}
				}
				if(request.getParameter("toUserId")!=null){
					String toUserId = request.getParameter("toUserId");
					String userNameString = request.getParameter("username");
					response.sendRedirect("/jsoa/getChat.do?action=getAll&str=all&toUserId="+toUserId+"&username="+URLEncoder.encode(userNameString,"GBK"));
				}else{
					response.sendRedirect("/jsoa/getChat.do?action=getAll&str=all");
				}
			}
			
		
      out.write("\r\n\t\t");
      out.write("\r\n\t</body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
