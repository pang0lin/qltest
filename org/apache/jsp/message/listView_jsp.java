/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:53:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.message;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.system.manager.service.*;

public final class listView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-nested.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-tiles.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-logic.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-html.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-template.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-bean.tld", Long.valueOf(1499751390000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.js.system.manager.service");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"/jsoa/public/jsp/error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
      com.js.util.util.BASE64 base64 = null;
      base64 = (com.js.util.util.BASE64) _jspx_page_context.getAttribute("base64", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (base64 == null){
        base64 = new com.js.util.util.BASE64();
        _jspx_page_context.setAttribute("base64", base64, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n<html>\r\n\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=GBK\">\r\n<link rel=stylesheet type=\"text/css\" href=\"js/cssmain.css\">\r\n<title>无标题文档</title>\r\n<link href=\"skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\r\n\r\n\r\n\r\n</head>\r\n");
     
		String describe ="";
		if(request.getAttribute("describe")!=null)
		describe=request.getAttribute("describe").toString(); 
        String receivelist="";
		if(request.getAttribute("receivelist")!=null)
		receivelist =request.getAttribute("receivelist").toString();
		String sendlist ="";
		if(request.getAttribute("sendlist")!=null)
		sendlist =request.getAttribute("sendlist").toString();
		String dellist ="";
		if(request.getAttribute("dellist")!=null)
		dellist =request.getAttribute("dellist").toString();

      out.write("\r\n<body  class=\"MainFrameBox\">\r\n<table width=\"100%\" border=0 cellpadding=\"0\" cellspacing=\"0\">\r\n<tr>\r\n<td>\r\n<br/>\r\n<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"listTable outTopline\">\r\n\t<form name=\"form1\" action=\"\" method=\"post\">\r\n\t<tr>\r\n\t\t<td width=\"20%\" class=\"listTableHead\"><a style=\"cursor:pointer\" href=\"/jsoa/MessageAction.do?action=receiveView\" >收信箱</a></td>\r\n\t\t<td width=\"20%\" class=\"listTableLine1 listTableLineLastTD\">");
      out.print(receivelist);
      out.write("封</td>\r\n\t </tr>\r\n");

	ManagerService managerBD = new ManagerService();
	String userId = session.getAttribute("userId").toString();
	if(managerBD.hasRightTypeName(userId,"短信", "发送")){

      out.write("\r\n\t<tr>\r\n\t\t<td width=\"20%\" class=\"listTableHead\"><a style=\"cursor:pointer\" href=\"/jsoa/MessageAction.do?action=sendedView\" >发信箱</a></td>\r\n\t\t<td width=\"20%\" class=\"listTableLine1 listTableLineLastTD\">");
      out.print(sendlist);
      out.write("封</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td width=\"20%\" class=\"listTableHead\"><a style=\"cursor:pointer\" href=\"/jsoa/MessageAction.do?action=sendView\" >草稿箱</a></td>\r\n\t\t<td width=\"20%\" class=\"listTableLine1 listTableLineLastTD\">");
      out.print(describe);
      out.write("封</td>\r\n\t</tr>\r\n");
 }
      out.write("\r\n\t<tr>\r\n\t\t<td width=\"20%\" class=\"listTableHead\"><a style=\"cursor:pointer\" href=\"/jsoa/MessageAction.do?action=desertedView\" >废信箱</a></td>\r\n\t\t<td width=\"20%\" class=\"listTableLine1 listTableLineLastTD\">");
      out.print(dellist);
      out.write("封</td>\r\n\t</tr>\r\n                                   \r\n\t</form>\r\n</table>\r\n</td>\r\n</tr>\r\n</table>\r\n</body>\r\n</html>\r\n\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
