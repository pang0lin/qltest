/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:57:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.public_.edit8._005fexample;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class replacebyclass_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n<html>\r\n<head>\r\n<title>eWebEditor ： 用样式类名把文本框自动替换为编辑器</title>\r\n<meta http-equiv=Content-Type content=\"text/html; charset=GBK\">\r\n<script type=\"text/javascript\" src=\"../ewebeditor.js\"></script>\r\n<link rel='stylesheet' type='text/css' href='example.css'>\r\n\r\n<script type=\"text/javascript\">\r\n//您可以使用下面的属性来设置处理方式\r\n//EWEBEDITOR.ReplaceByClassName = \"ewebeditor\";\t\t//指定使用的类型，默认是\"ewebeditor\"\r\n//EWEBEDITOR.ReplaceByClassEnabled = false;\t\t\t//指定是否启用此功能，默认是启用\r\n</script>\r\n\r\n</head>\r\n<body>\r\n\r\n<p><b>导航 ： <a href=\"default.jsp\">示例首页</a> &gt; 用样式类名把文本框自动替换为编辑器</b></p>\r\n<p>此例演示了您可以通过样式类名很简单的把&lt;textarea&gt;替换为eWebEditor编辑器实例。如下代码所示，您只需要给&lt;textarea&gt;加个指定的class即可。您可以指定自己想用的样式类名。详细使用方法，请参看本页源文件代码中说明或用户手册。</p>\r\n<div class=code>&lt;textarea class=&quot;ewebeditor&quot; name=&quot;content1&quot;&gt;&lt;/textarea&gt;</div>\r\n\r\n\r\n<form action=\"retrieve.jsp\" method=\"post\">\r\n<p><b>示例1：</b></p>\r\n<textarea class=\"ewebeditor\" name=\"content1\" rows=\"10\" cols=\"80\">&lt;p&gt;这是&lt;strong&gt;示例1&lt;/strong&gt;。 您正在使用 &lt;a href=&quot;http://www.ewebeditor.net/&quot;&gt;eWebEditor&lt;/a&gt;.&lt;/p&gt;</textarea>\r\n");
      out.write("\r\n<p><b>示例2：</b></p>\r\n<textarea class=\"ewebeditor\" name=\"content2\" rows=\"10\" cols=\"80\">&lt;p&gt;这是&lt;strong&gt;示例2&lt;/strong&gt;。 您正在使用 &lt;a href=&quot;http://www.ewebeditor.net/&quot;&gt;eWebEditor&lt;/a&gt;.&lt;/p&gt;</textarea>\r\n\r\n\r\n<p>\r\n\t<input type=\"submit\" value=\"提交\" />\r\n</p>\r\n</form>\r\n\r\n</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
