/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:45:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.module;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.jsupload.upload.*;

public final class upload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.jsupload.upload");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=gb2312");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n<html>\r\n<head>\r\n<title>文件上传处理页面</title>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">\r\n</head>\r\n\r\n<body>\r\n");

	String sub = request.getParameter("sub");
        String from = request.getParameter("from");

	// 新建一个SmartUpload对象
	SmartUpload su = new SmartUpload();
	// 上传初始化
	su.initialize(pageContext);
	// 设定上传限制
	// 1.限制每个上传文件的最大长度。
	 su.setMaxFileSize(1024*1024*4);
	// 2.限制总上传数据的长度。
	 su.setTotalMaxFileSize(1024*1024*10);
	// 3.设定允许上传的文件（通过扩展名限制）,仅允许doc,txt文件。
	 su.setAllowedFilesList("doc,txt,html,htm");
	// 4.设定禁止上传的文件（通过扩展名限制）,禁止上传带有exe,bat,
	//jsp,htm,html扩展名的文件和没有扩展名的文件。
	 su.setDeniedFilesList("exe,bat,jsp");
         try {
	// 上传文件
	su.upload();
	// 将上传文件全部保存到指定目录
	java.util.Calendar cal = java.util.Calendar.getInstance(); 
	String yearstr=String.valueOf(cal.get(Calendar.YEAR));
	int count = su.save("/upload/"+yearstr+"/customize");
        if (count > 0) {
            //response.sendRedirect("/jsoa/customize/upFileList.jsp");
            out.println("<script>alert('上传成功！'); " +
            " JSMainWinOpen('/jsoa/customize/upFileList.jsp?from=" + from + "&sub=" + sub + "', '', 'TOP=200,LEFT=200,scrollbars=yes,resizable=no,width=620,height=250'); " +
            " window.close();</script>");
        }
        } catch (Exception ex) {
          out.println("文件上传失败！<br>" + ex.getMessage());
        }
	/*out.println(count+"个文件上传成功！<br>");


	// 利用Request对象获取参数之值
	out.println("TEST="+su.getRequest().getParameter("TEST")
	+"<BR><BR>");

	// 逐一提取上传文件信息，同时可保存文件。
	for (int i=0;i<su.getFiles().getCount();i++)
	{
		com.jsupload.upload.File file = su.getFiles().getFile(i);

		// 若文件不存在则继续
		if (file.isMissing()) continue;

		// 显示当前文件信息
		out.println("<TABLE BORDER=1>");
		out.println("<TR><TD>表单项名（FieldName）</TD><TD>"
		+ file.getFieldName() + "</TD></TR>");
		out.println("<TR><TD>文件长度（Size）</TD><TD>" +
		file.getSize() + "</TD></TR>");
		out.println("<TR><TD>文件名（FileName）</TD><TD>"
		+ file.getFileName() + "</TD></TR>");
		out.println("<TR><TD>文件扩展名（FileExt）</TD><TD>"
		+ file.getFileExt() + "</TD></TR>");
		out.println("<TR><TD>文件全名（FilePathName）</TD><TD>"
		+ file.getFilePathName() + "</TD></TR>");
		out.println("</TABLE><BR>");

		// 将文件另存
		// file.saveAs("/upload/" + myFile.getFileName());
		// 另存到以WEB应用程序的根目录为文件根目录的目录下
		// file.saveAs("/upload/" + myFile.getFileName(),
		//su.SAVE_VIRTUAL);
		// 另存到操作系统的根目录为文件根目录的目录下
		// file.saveAs("c:\\temp\\" + myFile.getFileName(),
		//su.SAVE_PHYSICAL);

	}*/

      out.write("\r\n</body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
