/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:06:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;

public final class workflow_005fexport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/vnd.ms-excel;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n");
request.setCharacterEncoding("utf-8");
ArrayList<String[]> list = (ArrayList<String[]>)request.getAttribute("flowlist");
      out.write("\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"application/vnd.ms-excel; charset=utf-8\">\r\n");
response.setHeader("Content-disposition", "attachment;filename="+new String("流程详细信息表".getBytes("GBK"),"iso8859-1")+".xls");
      out.write("\r\n  <title>导出流程信息</title>\r\n</head>\r\n  <body>\r\n  <table border=\"1\">\r\n    <tr>\r\n        <td colspan=\"15\" height=\"30\" align=\"center\"><h2><b>流程详细信息表</b></h2></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"center\"><b>流程名称</b></td>\r\n        <td align=\"center\"><b>关联表单</b></td>\r\n\t\t<td align=\"center\"><b>流程分类</b></td>\r\n\t\t<td align=\"center\"><b>使用范围</b></td>\r\n\t\t<td align=\"center\"><b>进程监控人</b></td>\r\n\t\t<td align=\"center\"><b>进程维护人</b></td>\r\n\t\t<td align=\"center\"><b>管理员</b></td>\r\n\t\t<td align=\"center\"><b>维护人</b></td>\r\n\t\t<td align=\"center\"><b>维护人部门</b></td>\r\n\t\t<td align=\"center\"><b>维护人</b></td>\r\n\t\t<td align=\"center\"><b>创建人部门</b></td>\r\n\t\t<td align=\"center\"><b>创建日期</b></td>\r\n\t\t<td align=\"center\"><b>最后修改日期</b></td>\r\n\t\t<td align=\"center\"><b>流程状态</b></td>\r\n\t\t<td align=\"center\"><b>启用日期</b></td>\r\n    </tr>\r\n    ");
for(int i=0;i<list.size();i++){
    	String[] flow=(String[])list.get(i);
      out.write("\r\n    <tr>\r\n    \t");

    	  for(int j=0;j<flow.length;j++){
     	
      out.write("\r\n     \t<td align=\"left\">");
      out.print(flow[j] );
      out.write("</td>\r\n     \t");
} 
      out.write("\r\n    </tr>\r\n    ");
} 
      out.write("\r\n    </table>\r\n  </body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
