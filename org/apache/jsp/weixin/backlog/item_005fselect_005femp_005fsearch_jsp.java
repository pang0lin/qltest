/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:58:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.backlog;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.text.SimpleDateFormat;
import com.js.wap.util.WapUtil;
import com.js.wap.bean.WorkDealWithBean;
import com.js.oa.jsflow.service.WorkFlowBD;
import com.js.oa.jsflow.service.WorkFlowButtonBD;
import com.js.system.service.usermanager.UserBD;

public final class item_005fselect_005femp_005fsearch_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.wap.bean.WorkDealWithBean");
    _jspx_imports_classes.add("com.js.wap.util.WapUtil");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowButtonBD");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowBD");
    _jspx_imports_classes.add("com.js.system.service.usermanager.UserBD");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

	int menuIndex = 0;
	request.setCharacterEncoding("UTF-8");

	String app = request.getContextPath();

	String include_comment = request.getParameter("include_comment");
	String searchValue = request.getParameter("searchValue");

	String workId = request.getParameter("workId");
	String tableId = request.getParameter("tableId");
	String recordId = request.getParameter("recordId");
	String workType = request.getParameter("workType");
	String processId = request.getParameter("processId");
	String processName = request.getParameter("processName");
	String curActivityId = request.getParameter("curActivityId");

	String curActivityName = request.getParameter("curActivityName");
	String submitPerson = request.getParameter("submitPerson");
	String submitPersonId = request.getParameter("submitPersonId");
	String stepCount = request.getParameter("stepCount");
	String remindField = request.getParameter("remindField");
	String isStandForWork = request.getParameter("isStandForWork");
	String standForUserId = request.getParameter("standForUserId");
	String standForUserName = request.getParameter("standForUserName");
	String mainLinkFile = request.getParameter("mainLinkFile");
	String titleFieldName = request.getParameter("titleFieldName");

	String msgFrom = request.getParameter("msgFrom");
	String inWorkType = request.getParameter("inWorkType");
	String submitTime = request.getParameter("submitTime");
	String submitPersonTime = request.getParameter("submitPersonTime");
	String initActivity = request.getParameter("initActivity");

	String isSend = request.getParameter("isSend");
	String fromdesktop = request.getParameter("fromdesktop");
	String operName = request.getParameter("operName");
	String operId = request.getParameter("operId");
	String operIdSearch=request.getParameter("operIdSearch")==null?"":request.getParameter("operIdSearch");
	String mainUserType = request.getParameter("mainUserType");
	String mainAllowStandFor = request.getParameter("mainAllowStandFor");
	String mainAllowCancel = request.getParameter("mainAllowCancel");
	String mainAllowTransition = request.getParameter("mainAllowTransition");

	String mainPressType = request.getParameter("mainPressType");
	String mainDeadLineTime = request.getParameter("mainDeadLineTime");
	String mainPressMotionTime = request.getParameter("mainPressMotionTime");
	String mainNextActivityId = request.getParameter("mainNextActivityId");
	String mainNextActivityName = request.getParameter("mainNextActivityName");
	String emergence = request.getParameter("emergence");
	String needSendMsg = request.getParameter("needSendMsg");
	String smsContent = request.getParameter("smsContent");
	String dealTips = request.getParameter("dealTips");
	String processDeadlineDate = request.getParameter("processDeadlineDate");

	String mainNeedPassRound = request.getParameter("mainNeedPassRound");
	String mainPassRoundUserType = request.getParameter("mainPassRoundUserType");
	String passRoundId = request.getParameter("passRoundId");
	String passRoundName = request.getParameter("passRoundName");
	String subProcTempWorkId = request.getParameter("subProcTempWorkId");

	String pressUserId = request.getParameter("pressUserId");
	String pressUserName = request.getParameter("pressUserName");
	String pressTitle = request.getParameter("pressTitle");
	String pressContent = request.getParameter("pressContent");
	String pressSMS = request.getParameter("pressSMS");

	String feedUserId = request.getParameter("feedUserId");
	String feedUserName = request.getParameter("feedUserName");
	String feedTitle = request.getParameter("feedTitle");
	String feedContent = request.getParameter("feedContent");

	String transitionUser = request.getParameter("transitionUser");
	String transitionUserName = request.getParameter("transitionUserName");
	String tranType = request.getParameter("tranType");
	String tranFromPersonId = request.getParameter("tranFromPersonId");

	String receiveActivityId = request.getParameter("receiveActivityId");
	String receiveActivityName = request.getParameter("receiveActivityName");
	String receiveUserName = request.getParameter("receiveUserName");

	String passLinkFile = request.getParameter("passLinkFile");
	String approveMode = request.getParameter("approveMode");

	String activityClass = request.getParameter("activityClass");
	String curCommField = request.getParameter("include_commField");
	String opinionMust = request.getParameter("opinionMust");
	String actiCommFieldType = request.getParameter("actiCommFieldType"); //当前节点的批示意见类型

	String fromParent = request.getParameter("fromParent");
	
	//转发中自动返回
	String actionType = null!=request.getParameter("actionType") ? request.getParameter("actionType") : "";

	com.js.oa.jsflow.service.WorkFlowButtonBD workFlowButtonBD = new com.js.oa.jsflow.service.WorkFlowButtonBD();
	com.js.oa.jsflow.service.WorkFlowBD workFlowBD = new com.js.oa.jsflow.service.WorkFlowBD();
	com.js.oa.jsflow.vo.WorkVO vo = new com.js.oa.jsflow.vo.WorkVO();

	//节点办理方式
	//String activityId = request.getParameter("nextActivity");

	WorkDealWithBean bean = new WorkDealWithBean();
	List userList = bean.searchUserList(searchValue);
	
	String url=request.getParameter("url")==null?"":request.getParameter("url").toString();
	//参与者类型
	//0 流程发起人的上级领导
	//1 由上一节点参与者从所有用户中选择
	//2 从候选人员中指定
	//3 指定全部办理人
	//4 由表单中的某个字段值决定
	//System.out.println("参与人类型："+nextUser[0]);
	String selectUser = "";			// 待选人员
	String selectUserName = "";		// 待选人员
	String selectUserAccounts = "";	// 待选人员

	String range = "*0*";	// 指定范围
	String show = "";		// 显示
	String transactType = "1";	// 默认多人并行

	//
	String participantUserField = "";	// 表单中的某个字段名

	//短信
	boolean showSmsRemind = false;


	//
	tranType = "0";
	String tranCustomExtent = "";
	String tranCustomExtentId = "";

	// 流程类型(业务流程，随机流程)
	String processType = request.getParameter("processType");
	// 流程办理人类型
	int participantType = -1;

	if(!"0".equals(processType)){
		// 当前节点参数
		String activityId = request.getParameter("initActivity");		// 后继节点
		// 节点办理方式
		transactType = workFlowBD.getTransactType(tableId, recordId, activityId);

		String[] nextUser = workFlowBD.getProcActiUser(tableId, recordId, activityId);

		tranType = nextUser[25];
		tranCustomExtent = nextUser[26];
		tranCustomExtentId = nextUser[27];

		if(nextUser[0] != null){
			participantType = Integer.parseInt(nextUser[0]);	// 参与人类型
		}

		//显示短信
		//showSmsRemind = nextUser[24].toString().equals("1") ? true : false;

		if("0".equals(tranType)){	// 全部办理人
			range = "*0*";		// 指定范围
			show = "userorggroup";	// 显示
			participantType = -1;
		} else if("1".equals(tranType)){	// 本部门
			String sidelineOrg = workFlowButtonBD.getUserSideLineOrgId(
					session.getAttribute("userId").toString())==null ? "" : workFlowButtonBD.getUserSideLineOrgId(session.getAttribute("userId").toString());
		    range = "*" + session.getAttribute("orgId") + "*" + sidelineOrg;
			show = "userorg";	// 显示
			participantType = -2;
		} else if("2".equals(tranType)){	// 本单位
			range = "*" + session.getAttribute("corpId").toString() + "*";	// 指定范围
			show = "userorg";//显示
			participantType = -3;
		} else if("4".equals(tranType)){	// 自定义
			range = tranCustomExtentId;		// 指定范围
			show = "user";
			if(range!=null && !range.equals("") && range.indexOf("@")>=0){
				show += "group";
			}
			if(range!=null && !range.equals("") && range.indexOf("*")>=0){
				show += "org";
			}
			//participantType = -4;
		} else if("3".equals(tranType)){	// 本节点办理人
			if(nextUser[0]!=null && nextUser[0].equals("3")){
				// 指定全部办理人
				List candidate = workFlowBD.getCandidate(nextUser[1], nextUser[2]);
				for(int i=0; i<candidate.size(); i++){
					Object[] tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}

			}

			if(nextUser[0]!=null && nextUser[0].equals("2")){	// 从候选人中指定
				List candidate = workFlowBD.getCandidate(nextUser[1], nextUser[2]);
				for(int i=0; i<candidate.size(); i++){
					Object[] tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
			}

			if(nextUser[0]!=null && nextUser[0].equals("4")){
				// 由表单中的某个字段值决定
				participantUserField = nextUser[4];
				participantUserField = workFlowButtonBD.getFieldInfoByFieldId(participantUserField);
			}

			if(nextUser[0]!=null && nextUser[0].equals("8")){
				// 从指定范围中选定
				range = nextUser[22].toString();
				show = "user";
				if(range!=null && !range.equals("") && range.indexOf("@")>=0){
					show += "group";
				}
				if(range!=null && !range.equals("") && range.indexOf("*")>=0){
					show += "org";
				}
			}

			if(nextUser[0]!=null && nextUser[0].equals("9")){
				// 由上一节点参与者从所在组织中选择
				range = "*" + session.getAttribute("orgId") + "*";
				show += "user";
			}

			if(nextUser[0]!=null && nextUser[0].equals("10")){
				// 组织领导
				range = "*" + session.getAttribute("orgId") + "*";
				show += "org";
			}

			if(nextUser[0]!=null && nextUser[0].equals("13")){
				// 由上一节点参与者从所有群组中选择
				//show += "group";
				range =  nextUser[22].toString();
				if(range != null){
					show = "usergroup";
				}
			}

			if(nextUser[0]!=null && nextUser[0].equals("12")){
				// 由上一节点参与者从所有组织中选择
				show += "org";
			}

			if(nextUser[0]!=null && nextUser[0].equals("1")){
				// 由上一节点参与者从所有用户中选择
				show += "user";
			}

			if(nextUser[0]!=null && nextUser[0].equals("11")){
				// 上一节点所有参与者
				vo.setProcessId(Long.valueOf(processId));
				vo.setTableId(Long.valueOf(tableId));
				vo.setRecordId(Long.valueOf(recordId));
				vo.setActivity(Long.valueOf(curActivityId));

				List candidate = workFlowButtonBD.getFrontActivityOper(vo);
				for(int i=0; i<candidate.size(); i++){
					Object[] tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
			}

			if(nextUser[0]!=null && nextUser[0].equals("7")){
				// 上一节点办理人的上级领导
				// String tranFromPersonId = request.getParameter("tranFromPersonId");
				List leaderList = workFlowBD.getLeaderList(
						("-1".equals(tranFromPersonId) ? session.getAttribute("userId").toString() : tranFromPersonId));

				for(int i=0; i<leaderList.size(); i++){
					Object[] tmp = (Object[]) leaderList.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
			}

			if(nextUser[0]!=null && nextUser[0].equals("0")){
				// 流程发起人的上级领导 
				List leaderList = workFlowBD.getLeaderList(request.getParameter("submitPersonId"));

				for(int i=0; i<leaderList.size(); i++){
					Object[] tmp = (Object[]) leaderList.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
			}

			if(nextUser[0]!=null && nextUser[0].equals("5")){
				// 流程发起人
				selectUser = request.getParameter("submitPersonId");
				selectUserName = new UserBD().getUserNameById(request.getParameter("submitPersonId"));
			}

			if(nextUser[0]!=null && nextUser[0].equals("6")){
				// 从角色中指定 
				List candidate = workFlowBD.getRoleUserIDAndName(nextUser[18], request.getParameter("submitPersonId"));
				for(int i=0; i<candidate.size(); i++){
					Object[] tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
			}
			if(nextUser[0]!=null && nextUser[0].equals("15")){
				// 从岗位中指定 
				List candidate = workFlowBD.getPositionUserIDAndName(nextUser[18], request.getParameter("submitPersonId"));
				for(int i=0; i<candidate.size(); i++){
					Object[] tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
			}

		}
	}

	if(!"".equals(selectUser)){
		selectUserAccounts = new UserBD().getUserAccountByIds(selectUser);
	}

      out.write("\r\n<!DOCTYPE HTML>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/wap2/commonImport.jsp", out, false);
      out.write("\r\n<HTML>\r\n\t<HEAD>\r\n\t\t<TITLE>选择执行人</TITLE>\r\n\t\t<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n\t\t<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n\t\t<META name=apple-touch-fullscreen content=YES>\r\n\t\t<META name=apple-mobile-web-app-capable content=no>\r\n\t\t<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n\t\t<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\t\t<script type=\"text/javascript\" src=\"/jsoa/js/weixin/mobiscroll/js/jquery-1.9.1.min.js\" ></script>\r\n\t\t<script type=\"text/javascript\" src=\"/jsoa/js/weixin/wf_stepanduser_tree.js\"></script>\r\n\t\t<style type=\"text/css\">\r\n\t\t.Hidden{ display: none;}\r\n\t\t.Show{ display:;}\r\n\t\t</style>\r\n\t</head>\r\n<BODY onload=\"setHeader('javascript:closeWindow();','人员选择');showList('userorggroup', 'no', '");
      out.print(show);
      out.write("', '', '");
      out.print(range);
      out.write("', '");
      out.print(selectUser);
      out.write("', '");
      out.print(selectUserName);
      out.write("', '");
      out.print(selectUserAccounts);
      out.write("', '");
      out.print(participantType);
      out.write("', 'org_list');\">\r\n\t<div class=\"form\">\r\n\t\t<form name=\"frm\" action=\"\" method=\"post\">\r\n\t\t\t<input type=\"hidden\" name=\"backInfo\" id=\"backInfo\" value=\"backInfo\"/><!-- 用于页面的返回 -->\r\n\t\t\t<input type=\"hidden\" name=\"participantType\" value=\"\" />\r\n\t\t\t<input type=\"hidden\" name=\"include_comment\" value=\"");
      out.print(include_comment);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"opinionMust\" value=\"");
      out.print(opinionMust);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"actiCommFieldType\" value=\"");
      out.print(actiCommFieldType);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"workId\" value=\"");
      out.print(workId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"tableId\" value=\"");
      out.print(tableId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"recordId\" value=\"");
      out.print(recordId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"workType\" value=\"");
      out.print(workType);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"processId\" value=\"");
      out.print(processId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"processName\" value=\"");
      out.print(processName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"curActivityId\" value=\"");
      out.print(curActivityId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"curActivityName\" value=\"");
      out.print(curActivityName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"submitPerson\" value=\"");
      out.print(submitPerson);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"submitPersonId\" value=\"");
      out.print(submitPersonId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"stepCount\" value=\"");
      out.print(stepCount);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"remindField\" value=\"");
      out.print(remindField);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"isStandForWork\" value=\"");
      out.print(isStandForWork);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"standForUserId\" value=\"");
      out.print(standForUserId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"standForUserName\" value=\"");
      out.print(standForUserName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"mainLinkFile\" value=\"");
      out.print(mainLinkFile);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"titleFieldName\" value=\"");
      out.print(titleFieldName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"msgFrom\" value=\"");
      out.print(msgFrom);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"inWorkType\" value=\"");
      out.print(inWorkType);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"submitTime\" value=\"");
      out.print(submitTime);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"submitPersonTime\" value=\"");
      out.print(submitPersonTime);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"initActivity\" value=\"");
      out.print(initActivity);
      out.write("\" />\r\n\t\t\t\r\n\t\t\t<!-- 页面跳转url -->\r\n\t\t\t\t<input type=\"hidden\" id=\"url\" name=\"url\" value=\"");
      out.print(url);
      out.write("\"/>\r\n\r\n\t\t\t<!-- 新增表单域 -->\r\n\t\t\t<input type=\"hidden\" name=\"isSend\" value=\"");
      out.print(isSend);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"fromdesktop\" value=\"");
      out.print(fromdesktop);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"operName\" id=\"operName\" value=\"");
      out.print(operName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"operId\" id=\"operId\" value=\"");
      out.print(operId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"newSelectedOper\" id=\"newSelectedOper\"/>\r\n\t\t\t<input type=\"hidden\" name=\"mainUserType\" value=\"");
      out.print(mainUserType);
      out.write("\" />\r\n\t\t\t<!--参与人类型-->\r\n\t\t\t<input type=\"hidden\" name=\"mainAllowStandFor\" value=\"");
      out.print(mainAllowStandFor);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"mainAllowCancel\" value=\"");
      out.print(mainAllowCancel);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"mainAllowTransition\" value=\"");
      out.print(mainAllowTransition);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"mainPressType\" value=\"");
      out.print(mainPressType);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"mainDeadLineTime\" value=\"");
      out.print(mainDeadLineTime);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"mainPressMotionTime\" value=\"");
      out.print(mainPressMotionTime);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"mainNextActivityId\" value=\"");
      out.print(mainNextActivityId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"mainNextActivityName\" value=\"");
      out.print(mainNextActivityName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"emergence\" value=\"");
      out.print(emergence);
      out.write("\" />\r\n\t\t\t<!--缓急程度-->\r\n\t\t\t<input type=\"hidden\" name=\"needSendMsg\" value=\"");
      out.print(needSendMsg);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"smsContent\" value=\"");
      out.print(smsContent);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"dealTips\" value=\"");
      out.print(dealTips);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"processDeadlineDate\" value=\"");
      out.print(processDeadlineDate);
      out.write("\" />\r\n\r\n\t\t\t<!--阅件参数-->\r\n\t\t\t<input type=\"hidden\" name=\"mainNeedPassRound\" value=\"");
      out.print(mainNeedPassRound);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"mainPassRoundUserType\" value=\"");
      out.print(mainPassRoundUserType);
      out.write("\" />\r\n\t\t\t<!--阅件人类型-->\r\n\t\t\t<input type=\"hidden\" name=\"passRoundId\" value=\"");
      out.print(passRoundId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"passRoundName\" value=\"");
      out.print(passRoundName);
      out.write("\" />\r\n\r\n\t\t\t<!--子流程临时workID-->\r\n\t\t\t<input type=\"hidden\" name=\"subProcTempWorkId\" value=\"");
      out.print(subProcTempWorkId);
      out.write("\" />\r\n\r\n\t\t\t<!--催办-->\r\n\t\t\t<input type=\"hidden\" name=\"pressUserId\" value=\"");
      out.print(pressUserId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"pressUserName\" value=\"");
      out.print(pressUserName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"pressTitle\" value=\"");
      out.print(pressTitle);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"pressContent\" value=\"");
      out.print(pressContent);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"pressSMS\" value=\"");
      out.print(pressSMS);
      out.write("\" />\r\n\r\n\t\t\t<!--反馈-->\r\n\t\t\t<input type=\"hidden\" name=\"feedUserId\" value=\"");
      out.print(feedUserId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"feedUserName\" value=\"");
      out.print(feedUserName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"feedTitle\" value=\"");
      out.print(feedTitle);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"feedContent\" value=\"");
      out.print(feedContent);
      out.write("\" />\r\n\r\n\t\t\t<!--转办-->\r\n\t\t\t<input type=\"hidden\" name=\"transitionUser\" value=\"");
      out.print(transitionUser);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"transitionUserName\" value=\"");
      out.print(transitionUserName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"tranType\" value=\"");
      out.print(tranType);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"tranFromPersonId\" value=\"");
      out.print(tranFromPersonId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"actionType\" value=\"");
      out.print(actionType );
      out.write("\" />\r\n\r\n\t\t\t<!--收回-->\r\n\t\t\t<input type=\"hidden\" name=\"receiveActivityId\" value=\"");
      out.print(receiveActivityId);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"receiveActivityName\" value=\"");
      out.print(receiveActivityName);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"receiveUserName\" value=\"");
      out.print(receiveUserName);
      out.write("\" />\r\n\r\n\t\t\t<!--阅件-->\r\n\t\t\t<input type=\"hidden\" name=\"passLinkFile\" value=\"");
      out.print(passLinkFile);
      out.write("\" />\r\n\r\n\t\t\t<!--当前节点办理方式 默认 1为多人并行-->\r\n\t\t\t<input type=\"hidden\" name=\"approveMode\" value=\"");
      out.print(approveMode);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"activityClass\" value=\"");
      out.print(activityClass);
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" name=\"include_commField\" value=\"");
      out.print(curCommField);
      out.write("\">\r\n\t\t\t<div id=\"submenuBox");
      out.print(menuIndex);
      out.write("\" style=\"width: 100%; overflow: auto;background-color:#fff;\">\r\n\t\t\t\t<div id=\"org_list\" class=\"Hidden\" style=\"padding-top:45px;\"></div>\r\n\t\t  \t</div>\r\n\t\t  \t<div class=\"footer\" id=\"footer0\" style=\"position: absolute;\">\r\n\t      \t<div class=\"buttons\">\r\n\t      \t\t<div class=\"button\" onclick=\"submitForm()\">\r\n\t      \t\t\t确定\r\n\t      \t\t</div>\r\n\t      \t\t<div class=\"button gray\" onclick=\"loadURL()\">\r\n\t     \t\t\t取消\r\n\t      \t\t</div>\r\n\t      \t</div>\r\n\t\t</div>\r\n\t\t</form>\r\n\t</div>\r\n</BODY>\r\n</HTML>\r\n<script>\r\nvar w = $(window).height()*0.8;\r\n$(\"#org_list\").height(w);\r\n\r\nfunction submitForm(){\r\n\tvar userItems = $(\"#org_list\").find(\"input[name='users']:checked\");\r\n\tvar selIds = \"\", selNames = \"\", tempId = \"\";\r\n\tfor(var i=0; i<userItems.length; i++){\r\n\t\ttempId = userItems[i].id.split(\"_\")[1] + \",\";\r\n\t\tif(selIds.indexOf(tempId) < 0){\r\n\t\t\tselIds += tempId;\r\n\t\t\tselNames += userItems[i].value + \",\";\r\n\t\t}\r\n\t}\r\n\tdocument.getElementById(\"operName\").value = selNames;\r\n\tdocument.getElementById(\"operId\").value = selIds;\r\n\tdocument.getElementById(\"newSelectedOper\").value = selIds;\r\n");
      out.write("\t");

	if ("trans".equals(fromParent)) {
		
      out.write("\r\n\t\tdocument.frm.action=\"");
      out.print(app);
      out.write("/weixin/backlog/item_trans_selectemp.jsp?fromSelUser=1&status=0\";\r\n\t\t");

	} else {
		
      out.write("\r\n\t\tdocument.frm.action=\"");
      out.print(app);
      out.write("/weixin/backlog/item_select_act.jsp?fromSelUser=1&status=0\";\r\n\t\t");

	}
	
      out.write("\r\n\tdocument.frm.submit();\r\n}\r\nfunction setOperUser(){\r\n\tvar operNameValue = \"\";\r\n\tvar operIdValue = \"\";\r\n\tvar newSelectedOperOptions = document.getElementById(\"newSelectedOper\").options;\r\n\tfor(var i=0;i<newSelectedOperOptions.length;i++){\r\n\t\tif(newSelectedOperOptions[i].selected){\r\n\t\t\tvar value = newSelectedOperOptions[i].value.split(\",\");\r\n\t\t\toperNameValue += value[1]+\",\";\r\n\t\t\toperIdValue += \",\"+value[0]+\",\";\r\n\t\t}\r\n\t}\r\n\tdocument.getElementById(\"operName\").value = operNameValue;\r\n\tdocument.getElementById(\"operId\").value = operIdValue;\r\n}\r\nfunction loadURL(){\r\n\t");

	if ("trans".equals(fromParent)) {
		
      out.write("\r\n\t\tdocument.frm.action=\"");
      out.print(app);
      out.write("/weixin/backlog/item_trans_selectemp.jsp?fromSelUser=1&status=0\";\r\n\t\t");

	} else {
		
      out.write("\r\n\t\tdocument.frm.action=\"");
      out.print(app);
      out.write("/weixin/backlog/item_select_act.jsp?fromSelUser=1&status=0\";\r\n\t\t");

	}
	
      out.write("\r\n\tdocument.frm.submit();\r\n}\r\n</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
