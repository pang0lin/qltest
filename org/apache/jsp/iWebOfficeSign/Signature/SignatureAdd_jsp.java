/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:08:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.iWebOfficeSign.Signature;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.config.SystemCommon;
import java.io.*;
import java.text.*;
import java.sql.*;
import java.lang.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import DBstep.iFileUpLoad2000.*;
import DBstep.iDBManager2000.*;
import com.js.util.util.StringSplit;
import oracle.sql.BLOB;
import oracle.jdbc.*;
import com.js.util.util.InfoUtil;

public final class SignatureAdd_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


boolean mResult;
DBstep.iFileUpLoad2000 FileObj = null;
DBstep.iDBManager2000 DbaObj = null;

String mUserName;
String mMarkType;
String mMarkPath;
int mMarkSize;
int iSignatureID;
private byte[] mMarkBody;
PreparedStatement prestmt;


 String databaseType=com.js.util.config.SystemCommon.getDatabaseType();
 String isdm = SystemCommon.getIsdm();

 private void PutAtBlob(BLOB vField,int vSize) throws IOException
{
  try
  {
    OutputStream outstream=vField.getBinaryOutputStream();
    outstream.write(mMarkBody,0, vSize);
    outstream.close();
  }
  catch(SQLException e)
  {

  }

}


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("java.lang");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("DBstep.iDBManager2000");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("DBstep.iFileUpLoad2000");
    _jspx_imports_packages.add("oracle.jdbc");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.util.util.StringSplit");
    _jspx_imports_classes.add("com.js.util.config.SystemCommon");
    _jspx_imports_classes.add("oracle.sql.BLOB");
    _jspx_imports_classes.add("com.js.util.util.InfoUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=gb2312");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<html>\r\n");
      out.write("\r\n<head>\r\n<title>签章管理</title>\r\n<link rel='stylesheet' type='text/css' href='../test.css'>\r\n</head>\r\n<body bgcolor=\"#ffffff\">\r\n<div align=\"center\"><font size=4 color=\"ff0000\">签章管理〖签章保存〗</font></div>\r\n<hr size=1>\r\n<br>\r\n");



FileObj = new DBstep.iFileUpLoad2000(request);
DbaObj=new DBstep.iDBManager2000();
String mUserName=FileObj.Request("UserName");
String mPassword=FileObj.Request("Password");
String mMarkName=FileObj.Request("MarkName");
String domainId = session.getAttribute("domainId")==null?"0":session.getAttribute("domainId").toString();

long createEmp=session.getAttribute("userId")==null?0:new Long(session.getAttribute("userId").toString()).longValue();
long createOrg=session.getAttribute("orgId")==null?0:new Long(session.getAttribute("orgId").toString()).longValue();

/**************设置签章权限-取用户 *************************/
String useId=FileObj.Request("useId");
String useName=FileObj.Request("useName");
String useUserId=StringSplit.splitWith(useId, "$", "*@");
String useOrgId=StringSplit.splitWith(useId, "*", "@$");
String useGroupId=StringSplit.splitWith(useId, "@", "$*");
/**************设置签章权限-取用户*************************/

/** 设置签章所属用户***/
String belongUserId=FileObj.Request("belongUserId");
String belongUserName=FileObj.Request("belongUserName");
/** 设置签章所属用户***/

if (FileObj.FileName("MarkFile").equalsIgnoreCase("")) {
  mMarkSize=0;
}
else {
  mMarkSize=FileObj.FileSize("MarkFile");
  mMarkType=FileObj.ExtName("MarkFile");
  mMarkBody=FileObj.FileBody("MarkFile") ;
}

if (DbaObj.OpenConnection())
{
  String mSql="select MarkName from Signature where MarkName='" + mMarkName + "'";
  try
  {
    ResultSet result=DbaObj.ExecuteQuery(mSql) ;
    if (result.next())
    {
      out.write("保存失败，数据库中已存在相同的印签〖" + mMarkName + "〗<input type='button' value='返 回' onclick='javascript:history.back();'");
      mResult = false;
    }
    else
    {

             if ("oracle".equals(databaseType)) {

				mSql="Insert Into Signature (SignatureID,UserName,Password,MarkName,MarkSize,MarkType,DOMAIN_ID,useName,useUserId,useOrgId,USEGROUPID,createEmp,createOrg,belongUserId,belongUserName,MarkBody) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,EMPTY_BLOB())";
			    iSignatureID=DbaObj.GetMaxID("Signature","SignatureID");
			    mResult = true;
			
			 }else if("mysql".equals(databaseType)){

				  mSql="Insert Into Signature (UserName,Password,MarkName,MarkSize,MarkType,MarkBody,DOMAIN_ID,useName,useUserId,useOrgId,USEGROUPID,createEmp,createOrg,belongUserId,belongUserName) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                  mResult = true;

			 }else{	
				   
				  mSql="Insert Into Signature (UserName,Password,MarkName,MarkSize,MarkType,MarkBody,DOMAIN_ID,useName,useUserId,useOrgId,USEGROUPID,createEmp,createOrg,belongUserId,belongUserName) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                  mResult = true;

			 }

     
    }
    result.close();
  }
  catch(Exception e)
  {
    System.out.println(e.toString());
    mResult=false;
  }

  if (mResult)
  {
    java.sql.PreparedStatement prestmt=null;
    try
    {  
		

              if ("oracle".equals(databaseType)&&"0".equals(isdm)) {

				  DbaObj.Conn.setAutoCommit(false) ;//
				  prestmt =DbaObj.Conn.prepareStatement(mSql);
				  prestmt.setInt(1, iSignatureID);
				  prestmt.setString(2, mUserName);
				  prestmt.setString(3, mPassword);
				  prestmt.setString(4, mMarkName);
				  prestmt.setInt(5, mMarkSize);
				  prestmt.setString (6 ,mMarkType);
				  
				  prestmt.setString (7 ,domainId);
				  prestmt.setString (8 ,useName);
				  prestmt.setString (9 ,useUserId);
				  prestmt.setString (10 ,useOrgId);
				  prestmt.setString (11 ,useGroupId);
				  prestmt.setLong (12 ,createEmp);
				  prestmt.setLong (13 ,createOrg);
				  
				  prestmt.setLong(14,Long.valueOf(belongUserId));
				  prestmt.setString(15,belongUserName);
				  
				  
				  prestmt.execute();
				  prestmt.close();

				  Statement stmt=null;
				  stmt = DbaObj.Conn.createStatement();
				  OracleResultSet update=(OracleResultSet)stmt.executeQuery("select * from Signature where SignatureID=" + String.valueOf(iSignatureID) + " for update");
				  if (update.next()&&mMarkBody!=null){
					mMarkSize=mMarkBody.length;
					PutAtBlob(((oracle.jdbc.OracleResultSet)update).getBLOB("MarkBody"),mMarkSize);
				  }
				  update.close();
				  stmt.close();
				  DbaObj.Conn.commit();
				  mMarkBody=null;
				  mResult=true;
			   }else if("1".equals(isdm)){
			      DbaObj.Conn.setAutoCommit(false) ;//
				  prestmt =DbaObj.Conn.prepareStatement(mSql);
				  prestmt.setInt(1, iSignatureID);
				  prestmt.setString(2, mUserName);
				  prestmt.setString(3, mPassword);
				  prestmt.setString(4, mMarkName);
				  prestmt.setInt(5, mMarkSize);
				  prestmt.setString (6 ,mMarkType);
				  prestmt.setString (7 ,domainId);
				  prestmt.setString (8 ,useName);
				  prestmt.setString (9 ,useUserId);
				  prestmt.setString (10 ,useOrgId);
				  prestmt.setString (11 ,useGroupId);
				  prestmt.setLong (12 ,createEmp);
				  prestmt.setLong (13 ,createOrg);
				  prestmt.setLong(14,Long.valueOf(belongUserId));
				  prestmt.setString(15,belongUserName);
				  prestmt.execute();
				  prestmt.close();
				  DbaObj.Conn.commit();
				  InfoUtil.insert_oracle_blob("Signature", "MarkBody", "SignatureID", (long)iSignatureID, mMarkBody);
				  mMarkBody=null;
				  mResult=true;
			   }else if("mysql".equals(databaseType)){

				  prestmt =DbaObj.Conn.prepareStatement(mSql);
				  prestmt.setString(1, mUserName);
				  prestmt.setString(2, mPassword);
				  prestmt.setString(3, mMarkName);
				  prestmt.setInt(4, mMarkSize);
				  prestmt.setString (5 ,mMarkType);
				  prestmt.setBytes(6, mMarkBody);
				  prestmt.setString (7 ,domainId);
				  prestmt.setString (8 ,useName);
				  prestmt.setString (9 ,useUserId);
				  prestmt.setString (10 ,useOrgId);
				  prestmt.setString (11 ,useGroupId);
				  prestmt.setLong (12 ,createEmp);
				  prestmt.setLong (13 ,createOrg);
				  
				  prestmt.setLong(14,Long.valueOf(belongUserId));
				  prestmt.setString(15,belongUserName);

				  //DbaObj.Conn.setAutoCommit(true) ;
				  prestmt.execute();
				  //DbaObj.Conn.commit();
				  prestmt.close();
				  mMarkBody=null;
				  mResult=true;

			   }else{	
				   
				  prestmt =DbaObj.Conn.prepareStatement(mSql);
				  prestmt.setString(1, mUserName);
				  prestmt.setString(2, mPassword);
				  prestmt.setString(3, mMarkName);
				  prestmt.setInt(4, mMarkSize);
				  prestmt.setString (5 ,mMarkType);
				  prestmt.setBytes(6, mMarkBody);

				  prestmt.setString (7 ,domainId);
				  prestmt.setString (8 ,useName);
				  prestmt.setString (9 ,useUserId);
				  prestmt.setString (10 ,useOrgId);
				  prestmt.setString (11 ,useGroupId);
				  prestmt.setLong (12 ,createEmp);
				  prestmt.setLong (13 ,createOrg);
				  
				  prestmt.setLong(14,Long.valueOf(belongUserId));
				  prestmt.setString(15,belongUserName);

				  DbaObj.Conn.setAutoCommit(true) ;
				  prestmt.execute();
				  DbaObj.Conn.commit();
				  prestmt.close();
				  mMarkBody=null;
				  mResult=true;

			   }
     



    
    }
    catch(SQLException e)
    {
      System.out.println(e.toString());
      mResult=false;
    }
  }
  DbaObj.CloseConnection() ;
}

if (mResult)
{
  response.sendRedirect("SignatureList.jsp?haveRight=yes");
}

      out.write("\r\n</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
