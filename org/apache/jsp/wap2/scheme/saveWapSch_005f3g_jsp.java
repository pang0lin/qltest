/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:46:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wap2.scheme;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.TimeZone;
import com.js.wap.util.WapUtil;
import java.util.Calendar;
import com.js.oa.scheme.event.vo.EventVO;
import com.js.util.util.FillBean;
import com.js.oa.scheme.event.action.EventActionForm;
import com.js.oa.scheme.event.service.EventBD;
import com.js.wap.util.DateTools;

public final class saveWapSch_005f3g_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.js.oa.scheme.event.vo.EventVO");
    _jspx_imports_classes.add("com.js.util.util.FillBean");
    _jspx_imports_classes.add("java.util.TimeZone");
    _jspx_imports_classes.add("com.js.wap.util.WapUtil");
    _jspx_imports_classes.add("com.js.oa.scheme.event.service.EventBD");
    _jspx_imports_classes.add("com.js.wap.util.DateTools");
    _jspx_imports_classes.add("com.js.oa.scheme.event.action.EventActionForm");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"DTD/xhtml1-strict.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
 
	request.setCharacterEncoding("UTF-8");
	String path = request.getContextPath();

	String title = request.getParameter("title");
	String beginTime = request.getParameter("beginTime");
	String endTime = request.getParameter("endTime");
	String relProject = request.getParameter("relProject");
	if(null==relProject || "".equals(relProject))
		relProject = "-1";
		
	String attendName = request.getParameter("attendName");
	String attendEmp = request.getParameter("attendEmp");
	String msg = "";
	
	boolean titleflag = false;
	if (null != title && !"".equals(title) && !"null".equals(title)	&& title.length() <= 40) {
		titleflag = true;
	}else{
		msg = "注意：日程主题不能为空且不能超过40个字符！";
	}

	String content = request.getParameter("content");
	if(null==content){
		content = "";
	}
	boolean contentFlag = false;
	if (content.length() <= 1000) {
		contentFlag = true;
	}else{
		msg = "注意：日程内容不得超过1000个字符！";
	}

	if (titleflag && contentFlag) {
		String saveTag = request.getParameter("saveTag");

		if ("YES".equals(saveTag)) {

			EventActionForm eventActionForm = new EventActionForm();
			EventVO eventVO = (EventVO) FillBean.transformOneToOne(eventActionForm, EventVO.class);
			
			EventBD eventBD = new EventBD();
		
			eventVO.setEventTitle(title);
			eventVO.setEventContent(content);
						
			eventVO.setRelProjectId(Long.valueOf(relProject));
		
			eventVO.setEventRemindTime(new Long(0));
			eventVO.setPopRemindMode(new Integer(0));
			eventVO.setNoteRemindMode(new Integer(0));
			eventVO.setOnTimeMode(new Integer(0)); //ONTIMEMODE定期模式 0:不定期(默认)  1:按天  2:按周  3:按月  4:按年 
			
			String[] emps = attendEmp.split(",");

			StringBuffer attendBuff = new StringBuffer();
			for (String str : emps) {
				attendBuff.append("$" + str + "$");
			}

			eventVO.setAttendOrg((String)session.getAttribute(WapUtil.EMP_ORG_ID));//有问题。。。。。。。
			eventVO.setAttendName(attendName);
			eventVO.setAttendEmp(attendBuff.toString());
			
			Long userId = Long.valueOf((String) session
					.getAttribute(WapUtil.EMP_ID));
			eventVO.setEventEmpId(userId);

			String userName = (String) session.getAttribute("userName");
			eventVO.setEventEmpName(userName);

			int bhmSec = DateTools.getSecondByNum(beginTime);
			eventVO.setEventBeginTime(bhmSec);

			int ehmSec = DateTools.getSecondByNum(endTime);
			eventVO.setEventEndTime(ehmSec);

			String beginD=request.getParameter("beginDate");
			String[] begStrings=beginD.split("-");
			String endD=request.getParameter("endDate");
			String[] endStrings=endD.split("-");
			Calendar calendar = Calendar.getInstance(); 
	        calendar.clear(); 
	        calendar.set(Integer.parseInt(begStrings[0]),Integer.parseInt(begStrings[1])-1,Integer.parseInt(begStrings[2])); 
	        TimeZone tz = TimeZone.getTimeZone("GMT");        
	        calendar.setTimeZone(tz);

			long millsec = calendar.getTimeInMillis();
			int dayMill = 24 * 60 * 60 * 1000;
			millsec = millsec / dayMill;
			millsec = millsec * dayMill - 8 * 60 * 60 * 1000;

			eventVO.setEventBeginDate(millsec);
			
			calendar.set(Integer.parseInt(endStrings[0]),Integer.parseInt(endStrings[1])-1,Integer.parseInt(endStrings[2])); 
			millsec = calendar.getTimeInMillis();
			millsec = millsec / dayMill;
			millsec = millsec * dayMill - 8 * 60 * 60 * 1000;
			eventVO.setEventEndDate(millsec);

			Long domainId = session.getAttribute("domainId") == null ? Long.valueOf("0")
					: Long.valueOf(session.getAttribute("domainId").toString());
			eventVO.setEventDomainId(domainId);
			boolean addRes=false;
			if(request.getParameter("modity")!=null&&"yes".equals(request.getParameter("modity"))){
				Long id=Long.valueOf(request.getParameter("eventId"));
				eventVO.setEventId(id);
				addRes=eventBD.modifyEvent(eventVO);
			}else{
				addRes = eventBD.addEvent(eventVO);
			}
			
			if (addRes)
				response.sendRedirect(request.getContextPath() + "/wap/action/WapSchemeAction.do?method=getWapSchList&schUser=mine");
			else{
				msg = "注意：日程持久化失败，请联系管理员！";
			}
		}else{
			msg = "注意：非日程保存操作！";
		}
	}

      out.write("\r\n<HTML xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<HEAD>\r\n<TITLE>日程提交</TITLE>\r\n<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n<META name=apple-touch-fullscreen content=YES>\r\n<META name=apple-mobile-web-app-capable content=no>\r\n<LINK rel=apple-touch-icon href=\"");
      out.print(path);
      out.write("/wap2/images/iphone.jpg\">\r\n<LINK rel=stylesheet type=text/css href=\"");
      out.print(path);
      out.write("/wap2/css/main_3g.css\">\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/cookie.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/util.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/frost.js\"></SCRIPT>\r\n<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n\r\n<script type=\"text/javascript\">\r\n\r\n\tfunction goon(){\r\n\t\tdocument.backForm.action = \"");
      out.print(path);
      out.write("/wap2/scheme/writeSchPage_3g.jsp\";\r\n\t\tdocument.backForm.submit();\r\n\t}\r\n\r\n</script>\r\n</head>\r\n\r\n<body>\r\n\t<div class=\"main\">\r\n\t\t<div id=\"top\">\r\n\t\t\t<span id=\"lp2\"><div class=\"btn_3\"><a href=\"");
      out.print(path);
      out.write("/wap/action/WapSchemeAction.do?method=wapSchList\">返回</a></div></span>\r\n\t\t\t<span id=\"title2\"></span>\r\n\t\t</div>\r\n\r\n  <h1>日程保存失败</h1>\r\n  <form action=\"\" method=\"post\" name=\"backForm\" id=\"backForm\">\r\n    失败原因：<div style=\"color: red;\">");
      out.print(msg);
      out.write("</div>\r\n   \t\t<input type=\"hidden\" name=\"title\" value=\"");
      out.print(title);
      out.write("\"/>\r\n   \t\t<input type=\"hidden\" name=\"beginTime\" value=\"");
      out.print(beginTime);
      out.write("\"/>\r\n   \t\t<input type=\"hidden\" name=\"endTime\" value=\"");
      out.print(endTime);
      out.write("\"/>\r\n   \t\t<input type=\"hidden\" name=\"relProject\" value=\"");
      out.print(relProject);
      out.write("\"/>\r\n   \t\t<input type=\"hidden\" name=\"attendName\" value=\"");
      out.print(attendName);
      out.write("\"/>\r\n   \t\t<input type=\"hidden\" name=\"attendEmp\" value=\"");
      out.print(attendEmp);
      out.write("\"/>\r\n   \t\t<input type=\"hidden\" name=\"content\" value=\"");
      out.print(content );
      out.write("\"/>\r\n   \t\t\t\t   \t\t\t\t\r\n\t\t<a href=\"");
      out.print(path);
      out.write("/wap/action/WapSchemeAction.do?method=wapSchList\">\r\n\t\t<img src=\"");
      out.print(path);
      out.write("/wap2/image/schedule.gif\"/></a>\r\n\t\t<a href=\"javascript:goon()\"><img src=\"");
      out.print(path);
      out.write("/wap2/image/fill_in.gif\"/></a>\r\n\t\r\n </form>\r\n </div>\r\n\r\n</body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
