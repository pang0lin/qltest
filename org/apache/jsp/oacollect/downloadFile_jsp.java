/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:03:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.oacollect;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;

public final class downloadFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");

try{
	String name = request.getAttribute("fileName").toString();
	String src= request.getAttribute("src").toString();
	String filePath = session.getServletContext().getRealPath("/upload/"+src+"/collectfile/");

	response.setContentType("application/x-download");//设置为下载application/x-download   
	String filedownload = filePath+"\\"+name;//即将下载的文件的相对路径   
	//System.out.println("文件："+filedownload);
	String filedisplay = "文件采集下载包.zip";//下载文件时显示的文件保存名称   
	String filenamedisplay = java.net.URLEncoder.encode(filedisplay,"UTF-8");   
	response.addHeader("Content-Disposition","attachment;filename=" + filenamedisplay);  
	File downloadFile = new File(filedownload); 
	try{
		java.io.FileInputStream fis=new java.io.FileInputStream(downloadFile);
		java.io.BufferedInputStream buff=new java.io.BufferedInputStream(fis);
		
		byte [] b=new byte[1024];//相当于我们的缓存
		long k=0;//该值用于计算当前实际下载了多少字节
		
		//从response对象中得到输出流,准备下载
		java.io.OutputStream myout=response.getOutputStream();
		//开始循环下载
		while(k<downloadFile.length()){
			int j=buff.read(b,0,1024);
			k+=j;
			//将b中的数据写到客户端的内存
			myout.write(b,0,j);
		}
		//将写入到客户端的内存的数据,刷新到磁盘
		myout.flush();
		buff.close();
		fis.close();			  
		myout.close();
	}catch(Exception e){
		//e.getMessage();
		e.printStackTrace();
	}finally{//下载完成后将文件删除
		downloadFile.delete();
	}
}catch(Exception ex){
	ex.printStackTrace();
	response.setContentType("text/html; charset=GBK");
      out.write("\r\n\t<html>\r\n\t<head>\r\n\t<title></title>\r\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=GBK\">\r\n\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\t\talert(\"文件不存在!\");\r\n\t\thistory.back();\r\n\t</SCRIPT>\r\n\t</head>\r\n\t<body>\r\n\t</body>\r\n\t</html>\r\n");
}finally{
	out.clear();   
	out = pageContext.pushBody();
}
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
