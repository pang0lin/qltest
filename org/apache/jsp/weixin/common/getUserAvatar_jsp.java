/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:58:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import com.qq.weixin.mp.util.WeixinUserUtil;
import com.js.oa.userdb.util.DbOpt;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class getUserAvatar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.HttpURLConnection");
    _jspx_imports_classes.add("com.qq.weixin.mp.util.WeixinUserUtil");
    _jspx_imports_classes.add("java.util.regex.Matcher");
    _jspx_imports_classes.add("java.net.URL");
    _jspx_imports_classes.add("java.net.URLConnection");
    _jspx_imports_classes.add("java.util.regex.Pattern");
    _jspx_imports_classes.add("com.js.oa.userdb.util.DbOpt");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

	try {
		response.setHeader("Pragma", "No-cache");
		response.setHeader("Cache-Control", "no-cache");
		response.setDateHeader("Expires", 0);
		String userId = request.getParameter("userId");
		OutputStream os = response.getOutputStream();
		String loginType = null!=session.getAttribute("loginType") ? session.getAttribute("loginType").toString() : "";
		if("weixin".equals(loginType)){
		    String img = WeixinUserUtil.getUserAvatar(userId);
			BufferedInputStream bis = null;
			HttpURLConnection httpUrl = null;
			URL url = null;
			if (!"".equals(img)) {
				int BUFFER_SIZE = 1024;
				byte[] buf = new byte[BUFFER_SIZE];
				int size = 0;
				try {
					url = new URL(img);
					httpUrl = (HttpURLConnection) url.openConnection();
					httpUrl.connect();
					bis = new BufferedInputStream(httpUrl.getInputStream());
					while ((size = bis.read(buf)) != -1) {
						os.write(buf, 0, size);
					}
					os.flush();
				} catch (IOException e) {
				} catch (ClassCastException e) {
				} finally {
					try {
						os.close();
						bis.close();
						httpUrl.disconnect();
					} catch (IOException e) {
					} catch (NullPointerException e) {
					}
				}
			} else {
				String localUserGrayPath = request.getSession()
						.getServletContext().getRealPath("/")
						+ "/images/weixin/user-no.png";
				FileInputStream is = new FileInputStream(localUserGrayPath);
	
				int i = is.available(); // 得到文件大小  
				byte data[] = new byte[i];
				is.read(data); // 读数据  
				is.close();
				response.setContentType("image/*"); // 设置返回的文件类型  
				os.write(data); // 输出数据  
				os.close();
			}
		}else if("dingding".equals(loginType)){
		   
		    String img = WeixinUserUtil.getUserAvatar(userId);
			BufferedInputStream bis = null;
			HttpURLConnection httpUrl = null;
			URL url = null;
			if (!"".equals(img)) {
				int BUFFER_SIZE = 1024;
				byte[] buf = new byte[BUFFER_SIZE];
				int size = 0;
				try {
					url = new URL(img);
					httpUrl = (HttpURLConnection) url.openConnection();
					httpUrl.connect();
					bis = new BufferedInputStream(httpUrl.getInputStream());
					while ((size = bis.read(buf)) != -1) {
						os.write(buf, 0, size);
					}
					os.flush();
				} catch (IOException e) {
				} catch (ClassCastException e) {
				} finally {
					try {
						os.close();
						bis.close();
						httpUrl.disconnect();
					} catch (IOException e) {
					} catch (NullPointerException e) {
					}
				}
			} else {
				String localUserGrayPath = request.getSession()
						.getServletContext().getRealPath("/")
						+ "/images/weixin/user-no.png";
				FileInputStream is = new FileInputStream(localUserGrayPath);
	
				int i = is.available(); // 得到文件大小  
				byte data[] = new byte[i];
				is.read(data); // 读数据  
				is.close();
				response.setContentType("image/*"); // 设置返回的文件类型  
				os.write(data); // 输出数据  
				os.close();
			}
		
		
		} else {	// 默认wap
		    DbOpt db = new DbOpt();
			String sql="";
			Pattern pattern = Pattern.compile("[0-9]*"); 
			Matcher isNum = pattern.matcher(userId);
			if( !isNum.matches() ){//非数字时，userId为账号useraccounts
				sql="select empLivingPhoto from org_employee where userisactive=1 and useraccounts='"+userId+"'";
			} else{//数字时，userId为emp_id
				sql="select empLivingPhoto from org_employee where userisactive=1 and  emp_id='"+userId+"'";
			}
		    String picUrl = db.executeQueryToStr(sql);
		    db.close();
		    String src = "";
		    String realFileName="";
		    if(picUrl!=null && !"".equals(picUrl)){
				if(picUrl.length()>6 && picUrl.substring(4,5).equals("_")){
					src+="/upload/"+picUrl.substring(0,4)+"/peopleinfo/";
					String picUrl64 = picUrl.substring(0,picUrl.indexOf("."))+"_64"+picUrl.substring(picUrl.indexOf("."));
					String path = request.getSession()
						.getServletContext().getRealPath("/");
					if(new java.io.File(path+src+picUrl64).exists()){
					    realFileName = src+picUrl64;
					}else if(new java.io.File(path+src+picUrl).exists()){
					    realFileName = src+picUrl;
					}
				}else{
				   realFileName = "";
				}
			} else {
			  realFileName = "";
			}
			if (!"".equals(realFileName)) {
				String localUserGrayPath = request.getSession()
						.getServletContext().getRealPath("/")
						+ realFileName;
				FileInputStream is = new FileInputStream(localUserGrayPath);
	
				int i = is.available(); // 得到文件大小  
				byte data[] = new byte[i];
				is.read(data); // 读数据  
				is.close();
				response.setContentType("image/*"); // 设置返回的文件类型  
				os.write(data); // 输出数据  
				os.close();
			} else {
				String localUserGrayPath = request.getSession()
						.getServletContext().getRealPath("/")
						+ "/images/weixin/user-no.png";
				FileInputStream is = new FileInputStream(localUserGrayPath);
	
				int i = is.available(); // 得到文件大小  
				byte data[] = new byte[i];
				is.read(data); // 读数据  
				is.close();
				response.setContentType("image/*"); // 设置返回的文件类型  
				os.write(data); // 输出数据  
				os.close();
			}
		}
		out.clear();
		out = pageContext.pushBody();
	} catch (Exception e) {
		e.printStackTrace();
	}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
