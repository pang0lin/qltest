/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:07:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.js.util.util.DataSourceBase;
import java.sql.ResultSet;
import com.js.oa.jsflow.util.FieldCorr;

public final class fieldShow_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("com.js.oa.jsflow.util.FieldCorr");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n<hr />\r\n");

String isrunValue = "";
String zhuanyi = "";
String tableId = request.getParameter("tableId");
String flowId = request.getParameter("flowId");
String fieldType = request.getParameter("fieldType");
DataSourceBase dataSourceBase = new DataSourceBase();
ResultSet rs = null;
List areaList = new ArrayList();
FieldCorr fieldCorr = new FieldCorr();
try{
	dataSourceBase.begin();
	//取表单名字，描述
	areaList = fieldCorr.getNameList(tableId,dataSourceBase);
	if(areaList.size()>=1){
		for(int i=0;i<areaList.size();i++){
			String[] name = (String[])areaList.get(i);
			List list = fieldCorr.getFieldList(flowId,i,fieldType,dataSourceBase);
			String dataBase = list.get(0).toString();
			String baseTable = list.get(1).toString();
			Map map = (Map)list.get(2);
			//取条件
			String[] cond = fieldCorr.getCondition(flowId,i,fieldType,dataSourceBase);
			String condid = cond[0];//条件Id
			String operate = cond[1];//操作
			String condition = cond[2];//条件
			isrunValue = cond[3];//数据同步执行条件
			zhuanyi = cond[4];
			if("".equals(baseTable)){
				operate="";
				condition="";
			}
			if(i==0){
      out.write("\r\n\t\t\t&nbsp;&nbsp;数据同步条件：<input type=\"text\" name=\"isrun\" id=\"isrun\" style=\"width:50%\" value=\"");
      out.print(isrunValue );
      out.write("\" />\r\n\t\t\t<div style=\"height:10px;\">&nbsp;</div>\r\n\t\t\t<table width=\"100%\" borderColor=\"#000000\" borderColorDark=\"#e1e1e1\" border=\"1\" cellSpacing=\"0\" cellPadding=\"1\">\r\n\t\t\t<input type=\"hidden\" id=\"tableNum\" name=\"tableNum\" value=\"");
      out.print(areaList.size() );
      out.write("\" />\r\n\t\t\t<input type=\"hidden\" id=\"fieldType\" name=\"fieldType\" value=\"");
      out.print(fieldType );
      out.write("\" />");
} 
      out.write("\r\n\t\t\t<tr><td colspan=\"2\" rowspan=\"2\"><b>&nbsp;&nbsp;");
      out.print(name[0] );
      out.print((i==0)?"(主表)":"(子表)" );
      out.write("</b><input type=\"hidden\" name=\"OAdataBase");
      out.print(i );
      out.write("\" id=\"OAdataBase");
      out.print(i );
      out.write("\" value=\"");
      out.print(name[1] );
      out.write("\" /></td>\r\n\t\t\t<td rowspan=\"2\">&nbsp;&nbsp;数据源：\r\n\t\t\t     <select id=\"dataBase");
      out.print(i );
      out.write("\" name=\"dataBase");
      out.print(i );
      out.write("\">\r\n\t        \t\t<option value=\"system\">系统默认数据源</option>\r\n\t        \t\t");

	        		//数据库连接
	        		String[] userDataSourceName=com.js.util.config.SystemCommon.getUserDatasourceName();
	        		if(userDataSourceName!=null){
	        			for(String dataSourceName:userDataSourceName){
	        				
      out.write("\r\n\t        \t\t\t\t<option value=\"");
      out.print(dataSourceName );
      out.write('"');
      out.write(' ');
if(dataSourceName.equals(dataBase)) out.print("selected"); 
      out.write('>');
      out.print(dataSourceName );
      out.write("</option>\r\n\t        \t\t\t\t");

	        			}
	        		}
      out.write("\r\n\t        \t</select>\r\n\t\t\t</td>\r\n\t\t\t<td colspan=2>&nbsp;&nbsp;操作：<input type=\"hidden\" id=\"condid");
      out.print(i );
      out.write("\" name=\"condid");
      out.print(i );
      out.write("\" value=\"");
      out.print(condid );
      out.write("\" />\r\n\t\t\t\t<input type=\"radio\" name=\"operate");
      out.print(i );
      out.write("\" id=\"operate");
      out.print(i );
      out.write("\" value=\"insert\" ");
      out.print("insert".equals(operate)||"".equals(operate)?"checked":"" );
      out.write(">插入\r\n\t\t\t\t<input type=\"radio\" name=\"operate");
      out.print(i );
      out.write("\" id=\"operate");
      out.print(i );
      out.write("\" value=\"update\" ");
      out.print("update".equals(operate)?"checked":"" );
      out.write(">更新\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td colspan=2>\r\n\t\t\t\t&nbsp;&nbsp;条件：<input type=\"text\" id=\"condition");
      out.print(i );
      out.write("\" name=\"condition");
      out.print(i );
      out.write("\" style=\"width:50%\" value=\"");
      out.print((condition==null||"null".equalsIgnoreCase(condition))?"":condition );
      out.write("\" />\r\n\t\t\t</td></tr>\r\n\t\t\t<tr><td align=\"center\">字段名</td><td align=\"center\">字段类型</td><td align=\"left\">&nbsp;&nbsp;\r\n\t\t\t<input type=\"text\" id=\"dataTable");
      out.print(i );
      out.write("\" name=\"dataTable");
      out.print(i );
      out.write("\" value=\"");
      out.print(baseTable );
      out.write("\"/> 表中字段</td>\r\n\t\t\t<td align=\"center\">是否对应<input type=\"checkbox\" name=\"selectAll");
      out.print(i );
      out.write("\" id=\"selectAll");
      out.print(i );
      out.write("\" onclick=\"selectAllItem(");
      out.print(i );
      out.write(")\" /></td>\r\n\t\t\t<td align=\"center\">是否转义<input type=\"checkbox\" name=\"selectAlls");
      out.print(i );
      out.write("\" id=\"selectAlls");
      out.print(i );
      out.write("\" onclick=\"selectAllItems(");
      out.print(i );
      out.write(")\" /></td></tr>\r\n\t\t\t");

			//取得表单字段和字段相关信息
			String sql = "select elt_table from telt where page_id="+tableId;
			String field_name = "";
			rs = dataSourceBase.executeQuery(sql);
			while(rs.next()){
				field_name+=",'"+rs.getString(1)+"'";
			}
			rs.close();
			sql = "select field_desname,field_name,type_name,field_len,field_id,show_name,show_id "
					+"from tfield,tshow,ttype,ttable where field_show=show_id and field_type=type_id and field_table=table_id and "
					+"field_name in("+field_name.substring(1)+") and "
					+"table_name='"+name[1]+"' order by field_id";
			rs = dataSourceBase.executeQuery(sql);
			//
			String fieldId="-1";
			String otherData = "";
			String allFieldId = "-1";
			while(rs.next()){
				fieldId="-1";otherData="";
				if(map.get(rs.getString(2))!=null){
					String[] fiStrings = (String[])map.get(rs.getString(2));
					fieldId = fiStrings[0];
					otherData = fiStrings[1];
					allFieldId += ","+fieldId;
				}
      out.write("\r\n\t\t\t\t<tr><input type=\"hidden\" id=\"fieldId");
      out.print(i );
      out.write("\" name=\"fieldId");
      out.print(i );
      out.write("\" value=\"");
      out.print(fieldId );
      out.write("\" /><!-- 在数据库对应表中保存的Id -->\r\n\t\t\t\t\t<input type=\"hidden\" id=\"tfieldId");
      out.print(i );
      out.write("\" name=\"tfieldId");
      out.print(i );
      out.write("\" value=\"");
      out.print(rs.getString(5) );
      out.write("\" />\r\n\t\t\t\t\t<td width=\"200px\">&nbsp;&nbsp;");
      out.print(rs.getString(1) );
      out.write("<input type=\"hidden\" id=\"tableField");
      out.print(i );
      out.write("\" name=\"tableField");
      out.print(i );
      out.write("\" value=\"");
      out.print(rs.getString(2) );
      out.write("\" /></td>\r\n\t\t\t\t\t");
String len = "("+rs.getString(4)+")";
					if("".equals(rs.getString(4))||"0".equals(rs.getString(4)))len=""; 
      out.write("\r\n\t\t\t\t\t<td width=\"200px\">");
      out.print(rs.getString(6)+"["+rs.getString(3)+len+"]" );
      out.write("<input type=\"hidden\" name=\"fieldtype");
      out.print(i );
      out.write("\" value=\"");
      out.print(rs.getString(3) );
      out.write("\" /></td>\r\n\t\t\t\t\t<td width=\"300px\"><input type=\"text\" name=\"otherData");
      out.print(i );
      out.write("\" id=\"otherData");
      out.print(i );
      out.write("\" value=\"");
      out.print(otherData );
      out.write("\" style=\"width:100%;\" /></td>\r\n\t\t\t\t\t<td align=\"center\"><input type=\"checkbox\" name=\"isCorrKey");
      out.print(i );
      out.write("\" id=\"isCorrKey");
      out.print(i );
      out.write("\" onclick=\"\" ");
      out.print(("-1".equals(fieldId))?"":"checked" );
      out.write(" /></td>\r\n\t\t\t\t\t");
if(",210,211,212,214,105,104,103".indexOf(rs.getString(7))>=0){ 
      out.write("\r\n\t\t\t\t\t<td align=\"center\"><input type=\"checkbox\" name=\"isCorrKeys");
      out.print(i );
      out.write("\" id=\"isCorrKeys");
      out.print(i );
      out.write("\" value=\"");
      out.print(rs.getString(2) );
      out.write("\" onclick=\"\" ");
      out.print((zhuanyi.indexOf(rs.getString(2))>=0)?"checked":"" );
      out.write(" /></td>\r\n\t\t\t\t\t");
}else{ 
      out.write("\r\n\t\t\t\t\t<td>&nbsp;</td>\r\n\t\t\t\t\t");
} 
      out.write("\r\n\t\t\t\t</tr>");

			}
      out.write("\r\n\t\t\t<input type=\"hidden\" name=\"zhuanyi");
      out.print(i );
      out.write("\" id=\"zhuanyi");
      out.print(i );
      out.write("\" value=\"\" />\r\n\t\t\t<div id=\"fieldDiv");
      out.print(i );
      out.write("\" name=\"fieldDiv");
      out.print(i );
      out.write("\" style=\"display:none;\">\r\n\t\t\t\t<input type=\"hidden\" id=\"deleteId");
      out.print(i );
      out.write("\" name=\"deleteId");
      out.print(i );
      out.write("\" value=\"");
      out.print(allFieldId );
      out.write("\" />\r\n\t\t\t</div>\r\n\t\t\t");

			rs.close();
		}
	}	
	dataSourceBase.end();
      out.write("\r\n\t</table>\r\n");
}catch(Exception e){
	if(rs!=null){
		rs.close();
	}
	dataSourceBase.end();
	e.printStackTrace();

      out.write("\r\n<div style=\"font-size:12px;\">找不到对应关系</div>\r\n");
}
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
