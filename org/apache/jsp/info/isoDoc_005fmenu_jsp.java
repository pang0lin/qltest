/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:55:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.info;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.js.oa.jsflow.service.WorkFlowBD;
import com.js.oa.jsflow.vo.*;
import com.js.system.manager.service.ManagerService;

public final class isoDoc_005fmenu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-bean.tld", Long.valueOf(1499751390000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("com.js.oa.jsflow.vo");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.system.manager.service.ManagerService");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowBD");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

List list = (List) request.getAttribute("docClass");
String channelType = "0";
String userChannelName = "知识管理";
String userDefine ="0";
int menuIndex=0;

      out.write("\r\n\r\n");

  WorkFlowBD wfBD = new WorkFlowBD();
  ModuleVO moduleVO = new ModuleVO();
  moduleVO.setId(50);
  moduleVO.setFormType(0);
  AccessTableVO tableVO = (AccessTableVO) wfBD.getAccessTable(moduleVO).get(0);
 // String[] tmp = (String[]) wfBD.getModuleProc("4").get(0);

 String processId =request.getAttribute("processId")==null?"":request.getAttribute("processId").toString();
 String userId_1=session.getAttribute("userId").toString();

 boolean managerRight=false;
 boolean itMRight=false;
ManagerService mbd = new ManagerService();
managerRight= mbd.hasRight(userId_1,"26*08*26");
itMRight= mbd.hasRight(userId_1,"26*08*27");


String canIssue=request.getAttribute("canIssue")==null?"0":request.getAttribute("canIssue").toString();


      out.write("\r\n\r\n<HTML>\r\n<head><script language=\"JavaScript\" src=\"/jsoa/js/resource/");
      out.print(session.getAttribute("org.apache.struts.action.LOCALE"));
      out.write("/CommonResource.js\" type=\"text/javascript\"></script>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gbk\">\r\n<link href=\"skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<script language=\"JavaScript\" src=\"/jsoa/js/MzTreeView10.js\"></script>\r\n\r\n</HEAD>\r\n<body  style=\"margin-top:3px;\">\r\n<table width=\"100%\" height=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"outFullLine\" >\r\n\r\n\r\n  <tr id=\"submenuBox");
      out.print(menuIndex);
      out.write("\" valign=\"top\" style=\"display:'';\">\r\n    <td height=\"160\" class=\"btnSubModuleBox\">\r\n\t<script language=\"JavaScript\">\r\n\t  var tree = new MzTreeView(\"tree\");\r\n\r\n\t  tree.setIconPath(\"\"); //可用相对路径\r\n\r\n\t  tree.nodes[\"0_1\"] = \"text:所有目录\";//不显示根节点\r\n\t  //tree.displayFolder='none';\r\n\t  ");

		int channelLevel = 0;
		String channelId = "";
		String channelName = "";
		int channelParentId = 0;
		int i=1,k=0;
		String href = "";
		ArrayList alist = new ArrayList();
		String node;
		for(int j = 0; j < list.size(); j ++){
			
			i = i + 1;
			Object[] obj = (Object[]) list.get(j);
			channelId = obj[0].toString();
			channelName = obj[1].toString();
			channelLevel = Integer.parseInt(obj[2].toString());
			channelParentId = Integer.parseInt(obj[3].toString());

			alist.add(j,channelId+"");
			if(channelLevel == 1){

					href = "/jsoa/IsoInfoListAction.do?channelId_v="+obj[0]+"&channelId=" + obj[0] + "&channelName=" + obj[1] + "&channelType=" + channelType + "&userChannelName=" + userChannelName +"&userDefine=" + userDefine;
	
				node="1_"+(Integer.parseInt(channelId) + 1);
		
      out.write("\r\n\t\ttree.nodes[\"");
      out.print(node);
      out.write("\"] = \"text:");
      out.print(obj[1]);
      out.write("; data:id=320; url:");
      out.print(href);
      out.write(";\";\r\n\t\t");

			}else{
				for(k = 0; k <i ; k ++){
					if(alist.get(k).equals(channelParentId+"")){
						break;
					}
				}

					href = "/jsoa/IsoInfoListAction.do?channelId_v="+obj[0]+"&channelId=" + obj[0] + "&channelName=" + obj[1] +  "&channelType=" + channelType + "&userChannelName=" + userChannelName +"&userDefine=" + userDefine;

				node=(channelParentId + 1)+"_"+(Integer.parseInt(channelId) + 1);
				
      out.write("\r\n\t\t\t\ttree.nodes[\"");
      out.print(node);
      out.write("\"] = \"text:");
      out.print(obj[1]);
      out.write(";  url:");
      out.print(href);
      out.write(";\";\r\n\t\t\t\t");

			}
		}
		
      out.write("\r\n\r\n\t   tree.setTarget(\"MainDesktop\");\r\n\t  document.write(tree.toString());\r\n   </script>\r\n\t</td>\r\n  </tr>\r\n \r\n\r\n\r\n  <tr>\r\n    <td>&nbsp;\r\n\t</td>\r\n  </tr>\r\n</table>\r\n</BODY>\r\n</HTML>\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
