/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:38:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import java.io.BufferedReader;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import com.js.oa.logon.service.LogonBD;
import com.js.sso.util.LzlgUtil;
import java.util.HashMap;

public final class lzlglogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.w3c.dom.NodeList");
    _jspx_imports_classes.add("com.js.sso.util.LzlgUtil");
    _jspx_imports_classes.add("java.net.URL");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.w3c.dom.Element");
    _jspx_imports_classes.add("org.w3c.dom.Document");
    _jspx_imports_classes.add("java.net.URLConnection");
    _jspx_imports_classes.add("org.w3c.dom.Node");
    _jspx_imports_classes.add("javax.xml.parsers.DocumentBuilder");
    _jspx_imports_classes.add("com.js.oa.logon.service.LogonBD");
    _jspx_imports_classes.add("javax.xml.parsers.DocumentBuilderFactory");
    _jspx_imports_classes.add("java.io.BufferedReader");
    _jspx_imports_classes.add("java.io.InputStream");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<html>\r\n<head>\r\n<style type=\"text/css\">\r\n\ttd{\r\n\t\tborder: 1px solid;\r\n\t}\r\n</style>\r\n</head>\r\n<body>\r\n");
 
System.out.println("CAS客户端需要设置的service，当单点登录认证成功之后，服务端所重定向的目标url地址");
    //CAS客户端需要设置的service，当单点登录认证成功之后，服务端所重定向的目标url地址
    String service  = "http://202.201.39.3:8080/jsoa/lzlglogin.jsp";
    //SSO认证服务器的域名地址
    String ssoURL = "http://202.201.38.4/sso/";
    
   //接受认证成功之后，服务器返回的ticket
    String ticket = request.getParameter("ticket");
   
   //表示当前没有登录，则重定向到统一身份认证登录界面
   System.out.println("ticket="+ticket);
    if(null == ticket || ticket.equals("")){
    	response.sendRedirect(ssoURL+"login?service="+service);
       return;
    }
    //获取认证成功用户xml数据的url
    String validateURL = ssoURL+"serviceValidate?ticket="+ticket+"&service="+service;
    
    //创建一个代理链接，获取用户xml数据
    URLConnection connection = new URL(validateURL).openConnection();
     connection.connect();
     InputStream is = connection.getInputStream();
     String userName = "";
     try{	  
    	 
    	 //解析xml数据
    	  DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    	  Document document  = db.parse(is);
    	    
    	NodeList nodeList =  document.getElementsByTagName("cas:user");
    	//获取单点登录传来的用户唯一标识
    	 userName = nodeList.item(0).getTextContent();
    	 System.out.println("接收到CAS的参数："+userName);
		 userName = LzlgUtil.getUserAccountByEnglistName(userName);
		 System.out.println("经过处理后的参数："+userName);
		 String userIP = request.getRemoteAddr();
		 String serverIP = java.net.InetAddress.getLocalHost().getHostAddress(); 
		 String sessionId = request.getSession().getId();
		 HashMap userInfo = new HashMap(10, 1);
		 userInfo = new LogonBD().logon(userName, "",userIP,serverIP,sessionId,"jiusi","0");
		 //登录动作
		 String browserVersion=request.getHeader("User-Agent");
		//System.out.println("浏览器："+browserVersion);
		if(browserVersion.indexOf("MSIE")>=0){//判断是否是IE浏览器
			session.setAttribute("browserVersion","MSIEx");
			if(browserVersion.indexOf("MSIE 6.0")>=0){
				session.setAttribute("browserVersion","MSIE6");
			}else if(browserVersion.indexOf("MSIE 10.0")>=0){
				session.setAttribute("browserVersion","IE10");
			}
		}else if(browserVersion.indexOf("Trident/7.0")>=0){//判断是否是IE11
			session.setAttribute("browserVersion","IE11");			
		}else if(browserVersion.indexOf("Firefox")>=0){//判断是否是火狐浏览器
			session.setAttribute("browserVersion","Firefox");
		}else if(browserVersion.indexOf("Chrome")>=0){//谷歌浏览器
			session.setAttribute("browserVersion","Chrome");
		}else if(browserVersion.indexOf("Safari")>=0){//苹果浏览器
			session.setAttribute("browserVersion","Safari");
		}else{
			session.setAttribute("browserVersion","MSIEx");
		}
		if(browserVersion.indexOf("iPad")>=0){//是否是iPad登录
			session.setAttribute("OSType","ipad");
		}else if(browserVersion.indexOf("Android")>=0){//是否是Android移动设备登录
			session.setAttribute("OSType", "Android");
		}else if(browserVersion.indexOf("iPhone")>=0){//是否是iPhone登录
			session.setAttribute("OSType", "iPhone");
		}else{
			session.setAttribute("OSType","pc");
		}
        
		String IE11=(String)request.getParameter("checkBrow");
		if(!"".equals(IE11)&&null!=IE11){
			session.removeAttribute("browserVersion");
			session.setAttribute("browserVersion",IE11);
		}
					session.setAttribute("userName", userInfo.get("userName"));
					session.setAttribute("userId", userInfo.get("userId"));
					session.setAttribute("orgName", userInfo.get("orgName"));
					session.setAttribute("orgId", userInfo.get("orgId"));
					session.setAttribute("domainId","0");
					session.setAttribute("orgIdString", userInfo.get("orgIdString"));
					session.setAttribute("skin", "blue");//userInfo.get("skin")==null?"green":userInfo.get("skin"));
					session.setAttribute("rootCorpId",userInfo.get("rootCorpId"));
					session.setAttribute("corpId",userInfo.get("corpId"));
					session.setAttribute("departId",userInfo.get("departId"));
					if(userInfo.get("sidelineDepartId")!=null){
						session.setAttribute("sidelineCorpId",userInfo.get("sidelineCorpId"));
						session.setAttribute("sidelineDepartId",userInfo.get("sidelineDepartId"));
					}else{
						session.setAttribute("sidelineCorpId","0");
						session.setAttribute("sidelineDepartId","0");
					}
					
					//浏览范围
					if("1".equals(com.js.util.config.SystemCommon.getUseBrowseRange())){
						if (userInfo.get("browseRange") == null || "".equals(userInfo.get("browseRange").toString())) {
							String browseRangeType=com.js.util.config.SystemCommon.getDefaultBrowseRange();
							if("1".equals(browseRangeType)){
								session.setAttribute("browseRange", "*"+userInfo.get("corpId").toString()+"*");
							}else if("0".equals(browseRangeType)){
								session.setAttribute("browseRange", "*0*");
							}else if("2".equals(browseRangeType)){
								session.setAttribute("browseRange", "*"+userInfo.get("departId").toString()+"*");
							}
						} else {
							String browseRangeType=userInfo.get("browseRange").toString();
							if("1".equals(browseRangeType)){
								session.setAttribute("browseRange", "*"+userInfo.get("corpId").toString()+"*");
							}else if("0".equals(browseRangeType)){
								session.setAttribute("browseRange", "*0*");
							}else if("2".equals(browseRangeType)){
								session.setAttribute("browseRange", "*"+userInfo.get("departId").toString()+"*");
							}else{
								session.setAttribute("browseRange",	userInfo.get("browseRange"));
							}
						}
					}else{
						session.setAttribute("browseRange", "*0*");
					}
					//授权范围
					if("1".equals(com.js.util.config.SystemCommon.getUseGrantRange())){
						//使用单独的授权范围
						if (userInfo.get("grantRange") == null || "".equals(userInfo.get("grantRange").toString())) {
							String grantRangeType=com.js.util.config.SystemCommon.getDefaultGrantRange();
							if("1".equals(grantRangeType)){
								session.setAttribute("grantRange", "*"+userInfo.get("corpId").toString()+"*");
							}else if("0".equals(grantRangeType)){
								session.setAttribute("grantRange", "*0*");
							}else if("2".equals(grantRangeType)){
								session.setAttribute("grantRange", "*"+userInfo.get("departId").toString()+"*");
							}
						} else {
							String grantRangeType=userInfo.get("grantRange").toString();
							if("1".equals(grantRangeType)){
								session.setAttribute("grantRange", "*"+userInfo.get("corpId").toString()+"*");
							}else if("0".equals(grantRangeType)){
								session.setAttribute("grantRange", "*0*");
							}else if("2".equals(grantRangeType)){
								session.setAttribute("grantRange", "*"+userInfo.get("departId").toString()+"*");
							}else{
								session.setAttribute("grantRange",	userInfo.get("grantRange"));
							}
						} 
					}else{
						//不使用单独的授权范围，与浏览范围一致
						session.setAttribute("grantRange",session.getAttribute("browseRange"));
					}
                    String userAccount = userName;
					session.setAttribute("userAccount", userAccount);
					session.setAttribute("sysManager", userInfo.get("sysManager"));
					if (userInfo.get("userSimpleName") != null) {
						session.setAttribute("userSimpleName",
								userInfo.get("userSimpleName"));
					} else {
						session.setAttribute("userSimpleName", "");
					}
					if (userInfo.get("orgSerial") != null) {
						session.setAttribute("orgSerial", userInfo.get("orgSerial"));
					} else {
						session.setAttribute("orgSerial", "");
					}
					if (userInfo.get("orgSimpleName") != null) {
						session.setAttribute("orgSimpleName",userInfo.get("orgSimpleName"));
					} else {
						session.setAttribute("orgSimpleName", "");
					}
					session.setAttribute("dutyName",userInfo.get("dutyName")==null?"":userInfo.get("dutyName"));
					session.setAttribute("dutyLevel",userInfo.get("dutyLevel")==null?"0":userInfo.get("dutyLevel"));
					session.setAttribute("imID",userInfo.get("imID")==null?"0":userInfo.get("imID").toString());
				session.setAttribute("hasLoged", null);
				//String userId = session.getAttribute("userId").toString();            

				session.setAttribute("serverIP", serverIP);
				session.setAttribute("userIP", userIP);
				Map uploadMap = com.js.util.config.UploadConfig.getInstance()
						.getUploadMap();
				String lanIP = uploadMap.get("LanIP").toString();
				if (userIP.startsWith(lanIP)) {// 用户使用内网地址
					session.setAttribute("fileServer",
							uploadMap.get("FileInnerServer"));
					session.setAttribute("ftpMap", uploadMap.get("FtpInnerMap"));
				} else {// 用户使用外网地址
					session.setAttribute("fileServer",
							uploadMap.get("FileServer"));
					session.setAttribute("ftpMap", uploadMap.get("FtpMap"));
				}

				session.setAttribute("empEnglishName", userInfo.get("empEnglishName"));
				String other=request.getParameter("other");
				String tan=request.getParameter("tan");
				String showTypeForVB=request.getParameter("showTypeForVB")==null?"2":request.getParameter("showTypeForVB");
				request.setAttribute("showTypeForVB", showTypeForVB);
				request.setAttribute("other", other);
				request.setAttribute("tan", tan);
		 //
         //response.sendRedirect("/jsoa/desktop.jsp");
     }catch(Exception e){
    	 e.printStackTrace();
     }finally{
        is.close();
     }


      out.write("\r\n\r\n</body>\r\n <script type=\"text/javascript\">\r\n    location.href=\"/jsoa/desktop.jsp\";\r\n</script>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
