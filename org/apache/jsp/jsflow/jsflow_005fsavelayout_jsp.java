/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:07:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.jsflow.service.ActivityBD;
import com.js.oa.jsflow.service.WorkFlowBD;
import com.js.oa.jsflow.vo.SimpleFieldVO;
import java.util.Date;

public final class jsflow_005fsavelayout_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.jsflow.vo.SimpleFieldVO");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.ActivityBD");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowBD");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);
//日志记录
com.js.oa.security.log.service.LogBD logBD=new com.js.oa.security.log.service.LogBD();
String moduleCode = "";//模块编码
String moduleName = "";//子模块
String oprType = "";//操作类型
String oprContent = "";// 操作内容
String userId = session.getAttribute("userId").toString();
String userName = session.getAttribute("userName").toString();
String orgName = session.getAttribute("orgName").toString();
String domainId = session.getAttribute("domainId").toString();
String Ip = request.getRemoteAddr();
String moduleId=request.getParameter("moduleId");

//logBD.log(userId,userName,orgName,moduleCode,moduleName,date,date,oprType,oprContent,Ip,domainId);
int moduleId1 = 0 ;
if(request.getParameter("moduleId") != null){
      moduleId1 = Integer.parseInt(moduleId);
}
//---------初始化模块编码和子模块名称
switch(moduleId1){
     case 2:
       moduleCode = "oa_gw_fw";
       moduleName = "发文管理";
     break;
     case 3:
       moduleCode = "oa_gw_fw";
       moduleName = "收文管理";
     break; 
     default:
        moduleCode = "oa_workflow_set";
        moduleName = "流程设置";
        break;
}
String processId=request.getParameter("processId");
String tableId=request.getParameter("tableId");

String action=request.getParameter("action");

String top=request.getParameter("top");
String left=request.getParameter("left");
String nickname=request.getParameter("nickname");


String nicknum="0";
if(nickname!=null){
	nicknum=nickname.substring(5);
}

StringBuffer buffer=new StringBuffer("<?xml version=\"1.0\" encoding=\"GBK\"?>");
buffer.append("<root>");

if("addNode".equals(action)){
	//增加新节点
	oprType="1";
	//设置读写字段
	WorkFlowBD workFlowBD = new WorkFlowBD();
	java.util.List fieldList=workFlowBD.getSimpleField(moduleId, tableId);
	int listSize=0;
	String[] fieldArr=null;
	if(fieldList!=null){
		SimpleFieldVO fieldVO = null;
		int count=0;
	    for(int i = 0; i < fieldList.size(); i ++){
	    	fieldVO = (SimpleFieldVO) fieldList.get(i);
	        if(fieldVO.isCanModify() && !"401".equals(fieldVO.getPoField())){
	        	count++;	        	
	        }   
	    }
	    fieldArr=new String[count];
	    count=0;
	    for(int i = 0; i < fieldList.size(); i ++){
	    	fieldVO = (SimpleFieldVO) fieldList.get(i);
	        if(fieldVO.isCanModify() && !"401".equals(fieldVO.getPoField())){	        	
	        	fieldArr[count]=String.valueOf(fieldVO.getId());
	        	count++;
	        }   
	    }
	 }
	 String activityClass=request.getParameter("activityClass");
	 String activityType="1";
	 String activityName;
	 if("0".equals(activityClass)){
		 activityName="子过程节点";
		 oprContent="新增“"+activityName+"”";
	 }else if("1".equals(activityClass)){
		 activityName="新节点";
		 oprContent="新增“"+activityName+"”";
	 }else if("2".equals(activityClass)){
		 activityName="虚拟节点";
		 oprContent="新增“"+activityName+"”";
		 activityType="0";
	 }else{
		 activityName="自动返回节点";
		 oprContent="新增“"+activityName+"”";
	 }
	 String participantType;
	 //if("1".equals(com.js.util.config.SystemCommon.getUseGrantRange())){
		 
	 //}
	 
	 participantType="9";
	
	 String[] activityParameter = {processId, activityName, "", activityType,"1", 
			"0","0",participantType,"","",
			"","0","0","0","",
			"1","1","-1","0","-1",
			"","","","","",
			"","",activityClass,"0","0",
			"update","","","","",
			"back","","",null,null,
			null,null,"cmdBackcmdWaitcmdFeedbackcmdPrint","0","0",
			"0","3","","","-1",
			"0","3","",""};
	 ActivityBD bd=new ActivityBD();
	 Long id=bd.addWithoutCondition(activityParameter,fieldArr,null,null,tableId);
	 
	 com.js.util.util.DataSourceBase base=new com.js.util.util.DataSourceBase();
	 java.sql.Connection conn=null;
	 try{
		 conn=base.getDataSource().getConnection();
		 java.sql.Statement stmt=conn.createStatement();
		 stmt.executeUpdate("update jsf_activity set positiontop="+top+",positionleft="+left+",nicknum="+nicknum+" where wf_activity_id="+id);
		 
		 conn.close();
	 }catch(Exception ex){
		 conn.close();
	 }
	 logBD.log(userId,userName,orgName,moduleCode,moduleName,new Date(),new Date(),oprType,oprContent,Ip,domainId);
	 buffer.append("<type>addNode</type>")
	       .append("<nick>").append(nickname).append("</nick>")
	       .append("<id>").append(id.toString()).append("</id>");
	
}else if("addLine".equals(action)){
	//增加条件转移线
	oprType="1";
	//若当前节点不是虚拟节点，则后续节点中只能有一个虚拟节点，且虚拟节点不能与其他节点为兄弟节点
	String from=request.getParameter("from");
	String to=request.getParameter("to");
	String fromType=request.getParameter("fromType");
	String lineType=request.getParameter("lineType");
	if("0".equals(lineType)){
		oprContent="新增从节点"+from+"到节点"+to+"路径(直线)";
	}else{
		oprContent="新增从节点"+from+"到节点"+to+"路径(折线)";
	}
	
	Long transId=Long.valueOf(0);
	ActivityBD bd=new ActivityBD();
	
	com.js.util.util.DataSourceBase base=new com.js.util.util.DataSourceBase();
	java.sql.Connection conn=null;
	java.sql.Statement stmt=null;
	try{		
		conn=base.getDataSource().getConnection();
		stmt=conn.createStatement();
		
		if("start".equals(fromType)){
			transId=bd.setStartActivity(to,from);			
		}else{					
			stmt.executeUpdate("update jsf_transition set defaultactivity=0 where transitionfrom="+from);			
			transId=bd.setSingelRelation(from,to,"-1",">","","","1");					
		} 
	  
		stmt.executeUpdate("update jsf_transition set linetype="+lineType+",nicknum="+nicknum+" where wf_transition_id="+transId.toString());
		 
		conn.close();
	 }catch(Exception ex){
		 conn.close();
	 }
	 logBD.log(userId,userName,orgName,moduleCode,moduleName,new Date(),new Date(),oprType,oprContent,Ip,domainId);
	 buffer.append("<type>addLine</type>")
     .append("<nick>").append(nickname).append("</nick>")
     .append("<id>").append(transId.toString()).append("</id>");
	 
}else if("savelayout".equals(action)){
	//保存节点位置
	com.js.util.util.DataSourceBase base=new com.js.util.util.DataSourceBase();
	java.sql.Connection conn=null;
	java.sql.Statement stmt=null;
	try{
		conn=base.getDataSource().getConnection();
		stmt=conn.createStatement();
		String data=request.getParameter("data");
		String[] posArray=data.split(";");
		String posData;
		String[] nodeArray;
		for(int i=0;i<posArray.length;i++){
			posData=posArray[i];
			if(!"".equals(posData)){
				nodeArray=posData.split(",");
				stmt.addBatch("update jsf_activity set positionleft="+nodeArray[1]+",positiontop="+nodeArray[2]+" where wf_activity_id="+nodeArray[0]);
			}
		}
		
		stmt.executeBatch();
		stmt.clearBatch();
		
		stmt.close();
		conn.close();
	}catch(Exception ex){
		conn.close();
		ex.printStackTrace();
	}
	
}else if("moveNode".equals(action)){
	//保存节点位置
}else if("delNode".equals(action)){
	//删除节点
	oprType="3";
	String activityId=request.getParameter("activityId");
	com.js.util.util.DataSourceBase base=new com.js.util.util.DataSourceBase();
	java.sql.Connection conn=null;
	java.sql.Statement stmt=null;
	try{
		conn=base.getDataSource().getConnection();
		stmt=conn.createStatement();
		
		stmt.addBatch("delete from jsf_readwritecontrol where wf_activity_id="+activityId);
		stmt.addBatch("delete from jsf_activity where wf_activity_id="+activityId);
		
		stmt.executeBatch();
		stmt.clearBatch();
		
		stmt.close();
		conn.close();
	}catch(Exception ex){
		conn.close();
		ex.printStackTrace();
	}
	oprContent = "删除节点";
	logBD.log(userId,userName,orgName,moduleCode,moduleName,new Date(),new Date(),oprType,oprContent,Ip,domainId);
}else if("delLine".equals(action)){
	//删除转移线
	String from=request.getParameter("from");
	String to=request.getParameter("to");
	oprType="3";oprContent = "删除从节点"+from+"到节点"+to+"路径";
	String transId=request.getParameter("transId");
	com.js.util.util.DataSourceBase base=new com.js.util.util.DataSourceBase();
	java.sql.Connection conn=null;
	java.sql.Statement stmt=null;
	try{
		conn=base.getDataSource().getConnection();
		stmt=conn.createStatement();
		
		stmt.addBatch("delete from jsf_transitionrestriction where wf_transition_id="+transId);
		stmt.addBatch("delete from jsf_transition where wf_transition_id="+transId);
		
		stmt.executeBatch();
		stmt.clearBatch();
		
		stmt.close();
		conn.close();
	}catch(Exception ex){
		conn.close();
		ex.printStackTrace();
	}
	logBD.log(userId,userName,orgName,moduleCode,moduleName,new Date(),new Date(),oprType,oprContent,Ip,domainId);
}

buffer.append("</root>");
out.clear();
out.print(buffer.toString());

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
