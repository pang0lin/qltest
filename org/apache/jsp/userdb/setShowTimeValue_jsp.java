/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:42:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.userdb;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class setShowTimeValue_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

response.setHeader("Cache-Control", "no-store");
response.setHeader("Pragma", "no-cache");
response.setDateHeader ("Expires", 0);

      out.write("\r\n<script type=\"text/javascript\">\r\nvar checkDate = \"\";\r\n</script>\r\n");

String fieldIndex = request.getParameter("index");
String type = request.getParameter("type");
String dateType = "yyyy-MM-dd";
if(null!=type && !"".equals(type)){
	if("107".equals(type)){
		dateType = "yyyy-MM-dd";
		
      out.write("\r\n\t\t<script type=\"text/javascript\">\r\n\t\tcheckDate = /^(\\d{4})-(0\\d{1}|1[0-2])-(0\\d{1}|[12]\\d{1}|3[01])$/;\r\n\t\t</script>\r\n\t\t");

	} else if("108".equals(type)){
		dateType = "HH:mm:ss";
		
      out.write("\r\n\t\t<script type=\"text/javascript\">\r\n\t\tcheckDate =/^(0\\d{1}|1\\d{1}|2[0-3]):[0-5]\\d{1}:([0-5]\\d{1})$/;\r\n\t\t</script>\r\n\t\t");

	} else if("109".equals(type)){
		dateType = "yyyy-MM-dd HH:mm:ss";
		
      out.write("\r\n\t\t<script type=\"text/javascript\">\r\n\t\t//checkDate = /(\\d{4}-\\d{2}-\\d{2}\\d{2}:\\d{2}:\\d{2})|(\\d{2}-\\d{2}\\d{2}:\\d{2}:\\d{2})|(\\d{2}:\\d{2}:\\d{2})/;\r\n\t\tcheckDate = /(\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2})/;\r\n\t\t</script>\r\n\t\t");

	}
} else{
	
      out.write("\r\n\t<script type=\"text/javascript\">\r\n\talert(\"参数错误！\");\r\n\twindow.close();\r\n\t</script>\r\n\t");

}

      out.write("\r\n<html>\r\n\t<head>\r\n\t\t<title>设置时间默认值</title>\r\n\t\t<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\t\t<script src=\"/jsoa/js/js.js\" language=\"javascript\"></script>\r\n\t\t<link rel=stylesheet type=\"text/css\" href=\"/jsoa/public/date_picker/DateObject2.css\">\r\n\t\t<script type=\"text/javascript\">\r\n\t\tvar valIndex = \"");
      out.print(fieldIndex );
      out.write("\"; // 表示第几个字段\r\n\t\tvar type = \"");
      out.print(type );
      out.write("\";\t// 时间的类型\r\n\t\tvar parentObj = opener.document.getElementsByName(\"fieldShowTimeValue\")[valIndex];\r\n\t\t</script>\r\n\t</head>\r\n\t<body leftmargin=\"0\" scroll=\"auto\" topmargin=\"0\" class=\"MainFrameBox Pupwin\" onload=\"loadData()\">\r\n\t\t<table width=\"100%\" border=\"0\" cellpadding=\"10\" cellspacing=\"0\" class=\"docBoxNoPanel\">\r\n\t\t\t<tr>\r\n    \t\t\t<td width=\"80\" nowrap=\"nowrap\" align=\"right\">显示默认值：</td>\r\n    \t\t\t<td><input type=\"checkbox\" id=\"showDefault\" value=\"1\"></td>\r\n \t\t\t</tr>\r\n \t\t\t<tr>\r\n    \t\t\t<td width=\"80\" nowrap=\"nowrap\" align=\"right\">默认值：</td>\r\n    \t\t\t<td><input type=\"text\" id=\"defaultValue\"></td>\r\n \t\t\t</tr>\r\n \t\t\t<tr>\r\n \t\t\t\t<td colspan=\"2\" style=\"color: red; padding-left: 20px;\">\r\n \t\t\t\t\t1、默认值不填写时，显示当前系统时间；<br><br>\r\n \t\t\t\t\t2、默认值时间格式为“");
      out.print(dateType );
      out.write("”,不足位数用“0”补全。\r\n \t\t\t\t</td>\r\n   \t\t\t</tr>\r\n\t\t\t<tr>\r\n    \t\t\t<td colspan=2 height=\"45\" valign=\"bottom\">\r\n\t\t\t\t\t<input type=\"button\"  class=\"btnButton4font\" onclick=\"javascript:save();\" value=\"保存退出\"/>\r\n\t\t\t\t\t");
      out.write("\r\n\t\t\t\t\t<input type=\"button\" class=\"btnButton2font\" onclick=\"javascript:window.close()\" value=\"退出\" />\r\n \t\t\t\t</td>\r\n  \t\t\t</tr>\r\n\t\t</table>\r\n\t\t<script language=\"javascript\">\r\n\t\tfunction loadData(){\r\n\t\t\tvar parentValue = parentObj.value;\r\n\t\t\tif(\"\" != parentValue){\t\t\r\n\t\t\t\tvar vals = parentValue.split(\"#\");\r\n\t\t\t\tif(\"1\" == vals[0]){\r\n\t\t\t\t\tdocument.getElementById(\"showDefault\").checked = \"chedked\";\r\n\t\t\t\t\tdocument.getElementById(\"defaultValue\").value = vals[1];\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tdocument.getElementById(\"showDefault\").checked = \"chedked\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction save(){\r\n\t\t\tvar show = \"\";\r\n\t\t\tif(document.getElementById(\"showDefault\").checked){\r\n\t\t\t\tshow = document.getElementById(\"showDefault\").value;\r\n\t\t\t}\r\n\t\t\tvar val = document.getElementById(\"defaultValue\").value;\r\n\t\t\t\r\n\t\t\tvar returnData = \"0#\";\r\n\t\t\t// 勾选显示时间\r\n\t\t\tif(\"1\" == show){\r\n\t\t\t\tif(\"\"!=val && !checkDate.test(val)){\r\n\t\t\t\t\talert(\"请设置正确的时间格式！\");\r\n\t\t\t\t\tdocument.getElementById(\"defaultValue\").select();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturnData = show + \"#\" + val;\r\n");
      out.write("\t\t\t}\r\n\t\t\t// 拼接的内容赋值到父页面控件\r\n\t\t\tparentObj.value = returnData;\r\n\t\t\twindow.close();\r\n\t\t}\r\n\t\t</script>\r\n\t</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
