/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:38:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.hgydyy.SyncService;
import com.js.util.util.DataSourceBase;
import java.util.*;
import java.sql.*;
import java.util.*;

public final class testlogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.hgydyy.SyncService");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n");

Connection conn=null;
Statement stmt=null;
try{
	/*conn=new DataSourceBase().getDataSource().getConnection();
	stmt=conn.createStatement();
	
	String sql="";
	
	List<String> userList=new ArrayList<String>();
	
	sql="select emp_id from org_employee where userisdeleted=0";
	ResultSet rs=stmt.executeQuery(sql);
	while(rs.next()){
		userList.add(rs.getString(1));
	}
	rs.close();
	
	
	List<String> typeList=new ArrayList<String>();
	sql="select type from sys_remind_type";
	rs=stmt.executeQuery(sql);
	while(rs.next()){
		typeList.add(rs.getString(1));
	}
	rs.close();
	
	stmt.executeUpdate("delete from sys_remind_set");
	
	for(int i=0;i<userList.size();i++){
		for(int j=0;j<typeList.size();j++){
			stmt.executeUpdate("insert into sys_remind_set(emp_id,status,type) values('"+userList.get(i)+"','$01$$02$','"+typeList.get(j)+"')");
		}
	}
	
	//复制节点关系
    /*List alist=new ArrayList();
    sql = "select wf_transition_id, transitionFrom, transitionName, transitionTo, " +
           " transitionDescription,EXPRESSION,defaultActivity from JSDB.jsf_transition where transitionFrom = 2728707";

    ResultSet rs = stmt.executeQuery(sql);
   Object[] obj2 = new Object[7];
   if(rs.next()){
        
	   obj2[0] = rs.getInt("wf_transition_id") + "";
	   obj2[1] = rs.getInt("transitionFrom") + "";
	   obj2[2] = rs.getString("transitionName");
	   obj2[3] = rs.getInt("transitionTo") + "";
	   obj2[4] = rs.getString("transitionDescription");
	   obj2[5] = rs.getString("EXPRESSION");//新增表达式选项 
	   obj2[6] = rs.getString("defaultActivity");//默认后继        
    }
    rs.close();
    
    //得到 wfProceedActivityId 
    List<String> list=new ArrayList<String>();
    
    sql="select wf_proceedactivity_id from jsf_p_activity where wf_activity_id=2728707 and exists (select wf_work_id from jsf_work where workrecord_id=trecord_id and workstatus=1) ";
    rs=stmt.executeQuery(sql);
    while(rs.next()){
    	list.add(rs.getString(1));
    }
    rs.close();
    
    String domainId="0";
    
    for(int i=0;i<list.size();i++){
    	String wfProceedActivityId=list.get(i);
    	String wf_proceedtransition_id="";
    	rs = stmt.executeQuery("select hibernate_sequence.nextval from dual");
		if (rs.next()) {
			wf_proceedtransition_id = rs.getString(1);
		}
		rs.close();
		
		sql = " insert into JSDB.jsf_p_transition ( " +
		           " wf_proceedtransition_id, transitionFrom, transitionName, transitionTo," +
		           " transitionDescription, wf_proceedactivity_id, DOMAIN_ID, EXPRESSION,defaultActivity " +
		           ") values (" +
		           wf_proceedtransition_id + "," + obj2[1] + ",'" + obj2[2] + "'," + obj2[3] +
		           ",'" + obj2[4] + "'," + wfProceedActivityId + ", " + domainId + ",'"+obj2[5]+ "',"+(obj2[6]==null?"0":obj2[6])+")";
		    
		    //stmt.executeUpdate(sql2);
		  stmt.executeUpdate(sql);
		  
		  
		//复制转移约束
		 sql = "select conditionField, compareValue, relation from JSDB.jsf_transitionrestriction " +
		           " where wf_transition_id = " + obj2[0];

		    rs = stmt.executeQuery(sql);

		    ArrayList blist = new ArrayList();
		    while(rs.next()){
		        Object[] condiObj = new Object[3];
		        condiObj[0] = rs.getInt("conditionField") + "";
		        condiObj[1] = rs.getString("compareValue");
		        condiObj[2] = rs.getString("relation");
		        blist.add(condiObj);
		    }
		    rs.close();
		    
		    Object[] obj3 = null;
		    String wf_proceedtr_id="";
		    for(int k = 0; k < blist.size(); k ++){
		        obj3 = (Object[]) blist.get(k);
		        
		        rs = stmt.executeQuery("select hibernate_sequence.nextval from dual");
				if (rs.next()) {
					wf_proceedtr_id = rs.getString(1);
				}
				rs.close();
		        
		        
		        sql = " insert into JSDB.jsf_p_tr (" +
		               " wf_proceedtr_id, conditionField, compareValue, relation, " +
		               " wf_proceedtransition_id, DOMAIN_ID " +
		               " ) values (" +
		               wf_proceedtr_id + "," + obj3[0] + ",'" + obj3[1] + "','" + obj3[2] + "'," +
		               wf_proceedtransition_id + "," + domainId + ")";
		        
		        stmt.executeUpdate(sql);
		     }    	
    	
    }*/
    
		
	
	/*sql="select receivefile_id,tableid from doc_receivefile";
	ResultSet rs=stmt.executeQuery(sql);
	List<String[]> list=new ArrayList<String[]>();
	while(rs.next()){
		String[] tmp=new String[]{rs.getString(1),rs.getString(2)};
		 list.add(tmp);		
	}
	rs.close();
	
	String recordId,tableId,processId;
	for(int i=0;i<list.size();i++){
		  String[] tmp=list.get(i);
		  recordId=tmp[0];
		  tableId=tmp[1];
		  processId="0";
		  sql="select workprocess_id from jsf_work where worktable_id="+tableId+" and workrecord_id="+recordId;
		  rs=stmt.executeQuery(sql);
		  if(rs.next()){
			  processId=rs.getString(1);
		  }
		  rs.close();
		  
		  stmt.executeUpdate("update doc_receivefile set processId='"+processId+"' where receivefile_id="+recordId);
		  
	 }
	 
	
	stmt.close();
	conn.close();*/
}catch(Exception ex){
	if(conn!=null){
		try{
			conn.close();
		}catch(Exception err){
			err.printStackTrace();
		}
	}
	ex.printStackTrace();
}

SyncService syncService=new SyncService();
syncService.syncUser("");


      out.write("\r\n<html>\r\n<body>\r\n<form name=\"frm\" action=\"\" method=\"post\">\r\n<table>\r\n<tr>\r\n  <td>\r\n    LDAP同步\r\n  </td>\r\n  <td>\r\n  \t<select name=\"kaitong\">\r\n  \t\t<option value=\"1\">是</option>\r\n  \t\t<option value=\"0\">否</option>\r\n  \t</select>\r\n  </td>\r\n</tr>\r\n<tr>\r\n  <td colspan=\"2\">\r\n    <input type=\"button\" value=\"确定\" onclick=\"javascript:frm.submit();\"/>\r\n  </td>\r\n  <td>\r\n</tr>\r\n</table>\r\n</form>\r\n</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
