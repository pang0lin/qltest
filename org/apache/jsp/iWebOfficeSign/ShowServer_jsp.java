/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:08:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.iWebOfficeSign;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.util.DataSourceBase;
import java.io.*;
import java.text.*;
import java.util.*;
import java.sql.*;
import DBstep.iMsgServer2000.*;
import DBstep.iDBManager2000.*;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;
import oracle.sql.BLOB;
import oracle.jdbc.*;

public final class ShowServer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

String userId = "";
String userName = "";

public class iWebOffice {
 private int mFileSize;
 private byte[] mFileBody;
 private String mFileName;
 private String filePath;
 private String yearStr;
 private String mFileType;
 private String mFileDate;
 private String mFileID;


 private String mRecordID;
 private String mTemplate;
 private String mDateTime;
 private String mOption;
 private String mMarkName;
 private String mPassword;
 private String mMarkList;
 private String mBookmark;
 private String mDescript;
 private String mHostName;
 private String mMarkGuid;
 private String mCommand;
 private String mContent;
 private String mHtmlName;
 private String mDirectory;
 private String mFilePath;

 private String mUserName;
 private int mColumns;
 private int mCells;
 private String mMyDefine1;
 private String mLocalFile;
 private String mRemoteFile;
 private String mLabelName;
 private String mImageName;
 private String mTableContent;

 private String Sql;

 //打印控制
 private String mOfficePrints;
 private int mCopies; 

 //自定义信息传递
 private String mInfo;

 private DBstep.iMsgServer2000 MsgObj = null;
 private DBstep.iDBManager2000 DbaObj = null;

 private String databaseType=com.js.util.config.SystemCommon.getDatabaseType();

 private int mTemplateId;


// ************* Bolb字段处理、公共函数、接收流、写回流代码    开始  *******************************
 private void PutAtBlob(BLOB vField,int vSize) throws IOException
 {
   try
   {
     OutputStream outstream=vField.getBinaryOutputStream();
     outstream.write(mFileBody,0, vSize);
     outstream.close();
   }
   catch(SQLException e)
   {

   }
 }

 private void GetAtBlob(BLOB vField,int vSize) throws IOException
 {
   try
   {
     mFileBody = new byte[vSize];
     InputStream instream=vField.getBinaryStream();
     instream.read(mFileBody,0,vSize);
     instream.close();
   }
   catch(SQLException e)
   {

   }
 }
  /**
   * 功能或作用：格式化日期时间
   * @param DateValue 输入日期或时间
   * @param DateType 格式化 EEEE是星期, yyyy是年, MM是月, dd是日, HH是小时, mm是分钟,  ss是秒
   * @return 输出字符串
   */
  public String FormatDate(String DateValue,String DateType)
  {
    String Result;
    SimpleDateFormat formatter = new SimpleDateFormat(DateType);
    try{
      Date mDateTime = formatter.parse(DateValue);
      Result = formatter.format(mDateTime);
    }catch(Exception ex){
      Result = ex.getMessage();
    }
    if (Result.equalsIgnoreCase("1900-01-01")){
      Result = "";
    }
    return Result;
  }

//取得客户端发来的数据包
private byte[] ReadPackage(HttpServletRequest request)
{
  byte mStream[]=null;
  int totalRead = 0;
  int readBytes = 0;
  int totalBytes = 0;
  try
  {
    totalBytes = request.getContentLength();
    mStream = new byte[totalBytes];
    while(totalRead < totalBytes)
    {
      request.getInputStream();
      readBytes = request.getInputStream().read(mStream, totalRead, totalBytes - totalRead);
      totalRead += readBytes;
      continue;
    }
  }
  catch (Exception e)
  {
    System.out.println(e.toString());
  }
  return (mStream);
}

//发送处理后的数据包
  private void SendPackage(HttpServletResponse response)
  {
    try
    {
      ServletOutputStream OutBinarry=response.getOutputStream() ;
      OutBinarry.write(MsgObj.MsgVariant()) ;
      OutBinarry.flush();
      //OutBinarry.close();
    }
    catch(IOException e)
    {
      System.out.println(e.toString());
    }
  }
// ************* Bolb字段处理、公共函数、接收流、写回流代码    结束  *******************************


  // ************* 文档、模板管理代码    开始  *******************************

 //调出文档，将文档内容保存在mFileBody里，以便进行打包
  private boolean LoadFile()
  {
    boolean mResult = false;
    String Sql = "SELECT FileBody,FileSize FROM Document_File WHERE RecordID='" + mRecordID + "'";
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          if (result.next()) {
            try {				
				if ("oracle".equals(databaseType)) {
				mFileSize=result.getInt("FileSize");
	            GetAtBlob(((OracleResultSet)result).getBLOB("FileBody"),mFileSize);
                mResult = true ;				
				}else{
              mFileBody = result.getBytes("FileBody");
              if (result.wasNull()) {
                mFileBody = null;
              }
              mResult = true ;				
				}

            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
    return (mResult);
  }

  //调出文档，将文档内容保存在mFileBody里，以便进行打包 从磁盘调入文件，一般为查看留痕文件的时候使用
  private boolean LoadFileFromDisk(String fileName,String path)
  {
    boolean mResult = false;
    mFileBody=null;
    File f = new File(path+fileName);   
    if(!f.exists()){
    	f=new File(path+fileName);
    	if(!f.exists()){ 
        	return false;
    	}
    }   

    ByteArrayOutputStream bos = new ByteArrayOutputStream((int)f.length());   
    BufferedInputStream in = null;   
    try{   
        in = new BufferedInputStream(new FileInputStream(f));   
        int buf_size = 1024;   
        byte[] buffer = new byte[buf_size];   
        int len = 0;   
        while(-1 != (len = in.read(buffer,0,buf_size))){   
            bos.write(buffer,0,len);   
        }   
        mFileBody= bos.toByteArray(); 
        in.close(); 
        bos.close();
        mResult=true;
    }catch (IOException e) {          
        try{   
            in.close();             
        }catch (IOException e1) {   
            e1.printStackTrace();   
        }   
        try{
        	bos.close();  
        }catch (IOException e2) {   
            e2.printStackTrace();   
        }
        e.printStackTrace(); 
    }
    
    return (mResult);
  }

 //保存文档，如果文档存在，则覆盖，不存在，则添加
  private boolean SaveFile()
  {
    boolean mResult = false;
    int iFileId = -1;
    String Sql = "SELECT * FROM Document_File WHERE RecordID='" + mRecordID + "'";
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          if (result.next()) {

				if ("oracle".equals(databaseType)) {

				Sql="update Document_File set FileID=?,RecordID=?,FileName=?,FileType=?,FileSize=?,FileDate=?,FileBody=EMPTY_BLOB(),FilePath=?,UserName=?,Descript=? WHERE RecordID='" + mRecordID + "'";
                iFileId=result.getInt("FileId");
			
			   }else if("mysql".equals(databaseType)){

				 Sql="update Document_File set RecordID=?,FileName=?,FileType=?,FileSize=?,FileDate=?,FileBody=?,FilePath=?,UserName=?,Descript=? WHERE RecordID='" + mRecordID + "'";

			   }else{	
				   
				 Sql="update Document_File set RecordID=?,FileName=?,FileType=?,FileSize=?,FileDate=?,FileBody=?,FilePath=?,UserName=?,Descript=? WHERE RecordID='" + mRecordID + "'";

			   }
           
          }
          else {


			  if ("oracle".equals(databaseType)) {

				 Sql="insert into Document_File (FileID,RecordID,FileName,FileType,FileSize,FileDate,FileBody,FilePath,UserName,Descript) values (?,?,?,?,?,?,EMPTY_BLOB(),?,?,? )";
                  iFileId=DbaObj.GetMaxID("Document_File","FileId");
			
			   }else if("mysql".equals(databaseType)){

				  Sql="insert into Document_File (RecordID,FileName,FileType,FileSize,FileDate,FileBody,FilePath,UserName,Descript) values (?,?,?,?,?,?,?,?,? )";

			   }else{	
				   
				  Sql="insert into Document_File (RecordID,FileName,FileType,FileSize,FileDate,FileBody,FilePath,UserName,Descript) values (?,?,?,?,?,?,?,?,? )";

			   }
           
          }
          result.close();
        }
        catch (SQLException e) {
          System.out.println(e.toString());
          mResult = false;
        }

        java.sql.PreparedStatement prestmt=null;
        try {


		 if ("oracle".equals(databaseType)) {

	      prestmt =DbaObj.Conn.prepareStatement(Sql);
          prestmt.setInt(1,iFileId);
          prestmt.setString(2, mRecordID);
          prestmt.setString(3, mFileName);
          prestmt.setString(4, mFileType);
          prestmt.setInt(5, mFileSize);
          prestmt.setDate(6 ,DbaObj.GetDate());
          prestmt.setString(7, mFilePath);
          prestmt.setString(8, mUserName);
          prestmt.setString(9, mDescript);                                          //"通用版本"
          DbaObj.Conn.setAutoCommit(true) ;
          prestmt.execute();
          DbaObj.Conn.commit();
          prestmt.close();
          Statement stmt=null;
          DbaObj.Conn.setAutoCommit(false) ;
          stmt = DbaObj.Conn.createStatement();
          OracleResultSet update=(OracleResultSet)stmt.executeQuery("select FileBody from Document_File where Fileid=" + String.valueOf(iFileId)+ " for update");
          if (update.next()){
            try
            {
              PutAtBlob(((oracle.jdbc.OracleResultSet)update).getBLOB("FileBody"),mFileSize);
            }
            catch (IOException e) {
               System.out.println(e.toString());
               mResult = false;
            }
          }
          update.close();
          stmt.close();

          DbaObj.Conn.commit();
          mFileBody=null;
          mResult=true;
	
	   }else if("mysql".equals(databaseType)){

	      prestmt =DbaObj.Conn.prepareStatement(Sql);
          prestmt.setString(1, mRecordID);
          prestmt.setString(2, mFileName);
          prestmt.setString(3, mFileType);
          prestmt.setInt(4, mFileSize);
          prestmt.setString (5 ,mFileDate);
          prestmt.setBytes(6, mFileBody);
          prestmt.setString(7, mFilePath);
          prestmt.setString(8, mUserName);
          prestmt.setString(9, mDescript);                                          //"通用版本"
          //DbaObj.Conn.setAutoCommit(true) ;
          prestmt.execute();
          //DbaObj.Conn.commit();
          prestmt.close();
          mResult=true;

	   }else{	
		   
	      prestmt =DbaObj.Conn.prepareStatement(Sql);
          prestmt.setString(1, mRecordID);
          prestmt.setString(2, mFileName);
          prestmt.setString(3, mFileType);
          prestmt.setInt(4, mFileSize);
          prestmt.setString (5 ,mFileDate);
          prestmt.setBytes(6, mFileBody);
          prestmt.setString(7, mFilePath);
          prestmt.setString(8, mUserName);
          prestmt.setString(9, mDescript);                                          //"通用版本"
          DbaObj.Conn.setAutoCommit(true) ;
          prestmt.execute();
          DbaObj.Conn.commit();
          prestmt.close();
          mResult=true;
	   }

          
        }
        catch (SQLException e) {
          System.out.println(e.toString());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
    return (mResult);
  }

 //调出模板文档，将模板文档内容保存在mFileBody里，以便进行打包
  private boolean LoadTemplate()
  {
    boolean mResult = false;
    String Sql = "SELECT FileBody,FileSize FROM Template_File WHERE RecordID='" + mTemplate + "'";
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          if (result.next()) {
            try {


				if ("oracle".equals(databaseType)) {

				     mFileSize=result.getInt("FileSize");
	                 GetAtBlob(((OracleResultSet)result).getBLOB("FileBody"),mFileSize);//此处？mFileSize 应该就是
                     mResult = true ;
			
			   }else if("mysql".equals(databaseType)){

					 mFileBody = result.getBytes("FileBody");
					  if (result.wasNull()) {
						mFileBody = null;
					  }
					  mResult = true ;

			   }else{	
						   
					 mFileBody = result.getBytes("FileBody");
				     if (result.wasNull()) {
				  	 mFileBody = null;
				     }
				     mResult = true ;

			   }

             
            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
    return (mResult);
  }

 //保存模板文档，如果模板文档存在，则覆盖，不存在，则添加
  private boolean SaveTemplate()
  {
    boolean mResult = false;
    int iFileId = -1;
    String Sql = "SELECT * FROM Template_File WHERE RecordID='" + mTemplate + "'";
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          if (result.next()) {


            if ("oracle".equals(databaseType)) {

				     Sql="update Template_File set TemplateID=?,RecordID=?,FileName=?,FileType=?,FileSize=?,FileDate=?,FileBody=EMPTY_BLOB(),FilePath=?,UserName=?,Descript=? WHERE RecordID='" + mTemplate + "'";
                     mTemplateId=result.getInt("TemplateId");
			
			   }else if("mysql".equals(databaseType)){

					 Sql="update Template_File set RecordID=?,FileName=?,FileType=?,FileSize=?,FileDate=?,FileBody=?,FilePath=?,UserName=?,Descript=? WHERE RecordID='" + mTemplate + "'";

			   }else{	
						   
					 Sql="update Template_File set RecordID=?,FileName=?,FileType=?,FileSize=?,FileDate=?,FileBody=?,FilePath=?,UserName=?,Descript=? WHERE RecordID='" + mTemplate + "'";

			   }


           
          }
          else {


			  if ("oracle".equals(databaseType)) {

				     Sql="insert into Template_File (TemplateID,RecordID,FileName,FileType,FileSize,FileDate,FileBody,FilePath,UserName,Descript) values (?,?,?,?,?,?,EMPTY_BLOB(),?,?,? )";
                     mTemplateId=DbaObj.GetMaxID("Template_File","TemplateId");
			
			   }else if("mysql".equals(databaseType)){

					 Sql="insert into Template_File (RecordID,FileName,FileType,FileSize,FileDate,FileBody,FilePath,UserName,Descript) values (?,?,?,?,?,?,?,?,? )";

			   }else{	
						   
					Sql="insert into Template_File (RecordID,FileName,FileType,FileSize,FileDate,FileBody,FilePath,UserName,Descript) values (?,?,?,?,?,?,?,?,? )";

			   }

            
          }
          result.close();
        }
        catch (SQLException e) {
          System.out.println(e.toString());
          mResult = false;
        }
        java.sql.PreparedStatement prestmt=null;
        try {


            if ("oracle".equals(databaseType)) {

				      prestmt =DbaObj.Conn.prepareStatement(Sql);
					  prestmt.setInt(1,mTemplateId);
					  prestmt.setString(2, mTemplate);
					  prestmt.setString(3, mFileName);
					  prestmt.setString(4, mFileType);
					  prestmt.setInt(5, mFileSize);
					  prestmt.setDate(6 ,DbaObj.GetDate());
					  prestmt.setString(7, mFilePath);
					  prestmt.setString(8, mUserName);
					  prestmt.setString(9, mDescript);                                          //"通用版本"
					  DbaObj.Conn.setAutoCommit(true) ;
					  prestmt.execute();
					  DbaObj.Conn.commit();
					  prestmt.close();
					  Statement stmt=null;
					  DbaObj.Conn.setAutoCommit(false) ;
					  stmt = DbaObj.Conn.createStatement();
					  OracleResultSet update=(OracleResultSet)stmt.executeQuery("select FileBody from Template_File where TEMPLATEID=" + String.valueOf(mTemplateId)+ " for update");
					  if (update.next()){
						try
						{
					  mFileSize=mFileBody.length;
						  PutAtBlob(((oracle.jdbc.OracleResultSet)update).getBLOB("FileBody"),mFileSize);
						}
						catch (IOException e) {
						   System.out.println(e.toString());
						   mResult = false;
						}
					  }
					  update.close();
					  stmt.close();

					  DbaObj.Conn.commit();
					  mFileBody=null;
					  mResult=true;
						
			   }else if("mysql".equals(databaseType)){

					  prestmt =DbaObj.Conn.prepareStatement(Sql);
					  prestmt.setString(1, mTemplate);
					  prestmt.setString(2, mFileName);
					  prestmt.setString(3, mFileType);
					  prestmt.setInt(4, mFileSize);
					  prestmt.setString (5 ,mFileDate);
					  prestmt.setBytes(6, mFileBody);
					  prestmt.setString(7, mFilePath);
					  prestmt.setString(8, mUserName);
					  prestmt.setString(9, mDescript);                                          //"通用版本"
					  //DbaObj.Conn.setAutoCommit(true) ;
					  prestmt.execute();
					  //DbaObj.Conn.commit();
					  prestmt.close();
					  mResult=true;

			   }else{	
						   
					  prestmt =DbaObj.Conn.prepareStatement(Sql);
					  prestmt.setString(1, mTemplate);
					  prestmt.setString(2, mFileName);
					  prestmt.setString(3, mFileType);
					  prestmt.setInt(4, mFileSize);
					  prestmt.setString (5 ,mFileDate);
					  prestmt.setBytes(6, mFileBody);
					  prestmt.setString(7, mFilePath);
					  prestmt.setString(8, mUserName);
					  prestmt.setString(9, mDescript);                                          //"通用版本"
					  DbaObj.Conn.setAutoCommit(true) ;
					  prestmt.execute();
					  DbaObj.Conn.commit();
					  prestmt.close();
					  mResult=true;
			   }


         
        }
        catch (SQLException e) {
          System.out.println(e.toString());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
    return (mResult);
  }
// ************* 文档、模板管理代码    结束  *******************************



//************* 版本管理代码    开始  *******************************
//列出所有版本信息
private boolean ListVersion()
{
   boolean mResult=false;
   String mDesc="";
   String Sql= "SELECT FileID,FileDate,UserName,Descript FROM Version_File WHERE RecordID='" + mRecordID + "'";

   mFileID="\r\n";
   mDateTime="保存时间\r\n";
   mUserName="用户名\r\n";
   mDescript="版本说明\r\n";
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          while (result.next()) {
            try {

                if ("oracle".equals(databaseType)) {// mysql , sqlserver 的 没写

				       mFileID+=String.valueOf(result.getInt("FileID"))+"\r\n";                  //文件号列表
					   mDateTime+=result.getString("FileDate")+"\r\n";                           //日期列表
					   mUserName+=result.getString("UserName")+"\r\n";                           //用户名列表
					   mDesc=result.getString("Descript");                              //如果说明信息里有回车，则将回车变成>符号
					   mDesc=mDesc.replace('\r','>');
					   mDesc=mDesc.replace('\n','>');
					   mDescript+=mDesc +"\r\n";
			
			   }else if("mysql".equals(databaseType)){

					   mFileID+=String.valueOf(result.getInt("FileID"))+"\r\n";                  //文件号列表
					   mDateTime+=result.getString("FileDate")+"\r\n";                           //日期列表
					   mUserName+=result.getString("UserName")+"\r\n";                           //用户名列表
					   mDescript+=result.getString("Descript")+"\r\n";                   //如果说明信息里有回车，则将回车变成>符号

			   }else{	
						   
					   mFileID+=String.valueOf(result.getInt("FileID"))+"\r\n";                  //文件号列表
					   mDateTime+=result.getString("FileDate")+"\r\n";                           //日期列表
					   mUserName+=result.getString("UserName")+"\r\n";                           //用户名列表
					   mDescript+=result.getString("Descript")+"\r\n";                   //如果说明信息里有回车，则将回车变成>符号
			   }


            
            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
          mResult=true;
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
   return (mResult);
}

//调入选中版本，通过文件号调用mFileID,并把文件放入mFileBody里，以便进行打包
private boolean LoadVersion(String mFileID)
{
    boolean mResult = false;
    String Sql= "SELECT FileBody,FileSize FROM Version_File WHERE RecordID='" + mRecordID + "' and  FileID=" + mFileID;
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          if (result.next()) {
            try {        

			   if ("oracle".equals(databaseType)) {

				        mFileSize=result.getInt("FileSize");
	                    GetAtBlob(((OracleResultSet)result).getBLOB("FileBody"),mFileSize);
                        mResult = true ;
			
			   }else if("mysql".equals(databaseType)){

					  mFileBody = result.getBytes("FileBody");
					  if (result.wasNull()) {
						mFileBody = null;
					  }
					  mResult = true ;

			   }else{	
						   
					 mFileBody = result.getBytes("FileBody");
					  if (result.wasNull()) {
						mFileBody = null;
					  }
					  mResult = true ;

			   }

            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
    return (mResult);
}

//保存版本，将该版本文件存盘，并将说明信息也保存起来
private boolean SaveVersion()
{
    boolean mResult = false;
    int iFileId = -1;
    String Sql = "insert into Version_File (RecordID,FileName,FileType,FileSize,FileDate,FileBody,FilePath,UserName,Descript) values (?,?,?,?,?,?,?,?,? )";
    
	      
     if ("oracle".equals(databaseType)) {
	  Sql="insert into Version_File (FileID,RecordID,FileName,FileType,FileSize,FileDate,FileBody,FilePath,UserName,Descript) values (?,?,?,?,?,?,EMPTY_BLOB(),?,?,? )";
    if (mFileID.equalsIgnoreCase("")){
       iFileId=DbaObj.GetMaxID("Version_File","FileId");
    }
    else
    {
       iFileId = Integer.getInteger(mFileID.toString()).intValue();
    }
	
	}
	
	try {
      if (DbaObj.OpenConnection()) {
        java.sql.PreparedStatement prestmt=null;
        try {

           
		    if ("oracle".equals(databaseType)) {

				      prestmt =DbaObj.Conn.prepareStatement(Sql);
					  prestmt.setInt(1,iFileId);
					  prestmt.setString(2, mRecordID);
					  prestmt.setString(3, mFileName);
					  prestmt.setString(4, mFileType);
					  prestmt.setInt(5, mFileSize);
					  prestmt.setDate(6 ,DbaObj.GetDate());
					  prestmt.setString(7, mFilePath);
					  prestmt.setString(8, mUserName);
					  prestmt.setString(9, mDescript);                                          //"通用版本"
					  DbaObj.Conn.setAutoCommit(true) ;
					  prestmt.execute();
					  DbaObj.Conn.commit();
					  prestmt.close();
					  Statement stmt=null;
					  DbaObj.Conn.setAutoCommit(false) ;
					  stmt = DbaObj.Conn.createStatement();
					  OracleResultSet update=(OracleResultSet)stmt.executeQuery("select FileBody from Version_File where Fileid=" + String.valueOf(iFileId)+ " for update");
					  if (update.next()){
						try
						{
						  PutAtBlob(((oracle.jdbc.OracleResultSet)update).getBLOB("FileBody"),mFileSize);
						}
						catch (IOException e) {
						   System.out.println(e.toString());
						   mResult = false;
						}
					  }
					  update.close();
					  stmt.close();

					  DbaObj.Conn.commit();
					  mFileBody=null;
					  mResult=true;
			
			   }else if("mysql".equals(databaseType)){

					  prestmt =DbaObj.Conn.prepareStatement(Sql);
					  prestmt.setString(1, mRecordID);
					  prestmt.setString(2, mFileName);
					  prestmt.setString(3, mFileType);
					  prestmt.setInt(4, mFileSize);
					  prestmt.setString (5 ,mFileDate);
					  prestmt.setBytes(6, mFileBody);
					  prestmt.setString(7, mFilePath);
					  prestmt.setString(8, mUserName);
					  prestmt.setString(9, mDescript);                                          //"通用版本"
					  //DbaObj.Conn.setAutoCommit(true) ;
					  prestmt.execute();
					  //DbaObj.Conn.commit();
					  prestmt.close();
					  mResult=true;

			   }else{	
						   
					  prestmt =DbaObj.Conn.prepareStatement(Sql);
					  prestmt.setString(1, mRecordID);
					  prestmt.setString(2, mFileName);
					  prestmt.setString(3, mFileType);
					  prestmt.setInt(4, mFileSize);
					  prestmt.setString (5 ,mFileDate);
					  prestmt.setBytes(6, mFileBody);
					  prestmt.setString(7, mFilePath);
					  prestmt.setString(8, mUserName);
					  prestmt.setString(9, mDescript);                                          //"通用版本"
					  DbaObj.Conn.setAutoCommit(true) ;
					  prestmt.execute();
					  DbaObj.Conn.commit();
					  prestmt.close();
					  mResult=true;

			   }

         

         
        }
        catch (SQLException e) {
          System.out.println(e.toString());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
    return (mResult);
}
// ************* 版本管理代码    结束  *******************************


//************ 标签管理代码   开始  *******************************
//取得书签列表
private boolean ListBookmarks()
{
    boolean mResult=false;
    String Sql= "SELECT * FROM Bookmarks ";
    mBookmark="";
    mDescript="";
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          while (result.next()) {
            try {
               mBookmark+=result.getString("BookMarkName")+"\r\n";   //用户名列表
               mDescript+=result.getString("BookMarkDesc")+"\r\n";   //如果说明信息里有回车，则将回车变成>符号
            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
          mResult=true;
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
   return (mResult);
}

//装入书签
private boolean LoadBookMarks()
{
   boolean mResult=false;
   String Sql=" select b.BookMarkName,b.BookMarkText from Template_BookMarks a,BookMarks b where a.BookMarkname=b.BookMarkName and a.RecordID='"+ mTemplate +"'";
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          while (result.next()) {
            try {
                //说明：我们测试程序把SQL语句直接写到替换标签内容
                //实际使用中，这个标签内容是通过Sql语句得到的。
                //生成SQL查询语句  result.getString("BookMarkText") & "条件"
                //当前纪录号位 mRecordID
               //BookMarkValue=生成SQL运行结果
               String mBookMarkName=result.getString("BookMarkName");
               String mBookMarkValue=result.getString("BookMarkText");
               MsgObj.SetMsgByName(mBookMarkName,mBookMarkValue);
            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
          mResult=true;
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
   return (mResult);
}

//保存书签
private boolean SaveBookMarks()
{
  boolean mResult=false;
  String mBookMarkName;
  int mBookMarkId;
  int mIndex;
    try {
      if (DbaObj.OpenConnection()) {
        try {
          java.sql.PreparedStatement prestmt=null;
          String Sql = "DELETE FROM Template_BookMarks Where RecordID='"+ mTemplate+"'";
          prestmt =DbaObj.Conn.prepareStatement(Sql);
          if("mysql".equals(databaseType)){
				//DbaObj.Conn.setAutoCommit(true) ;
				prestmt.execute();
				//  DbaObj.Conn.commit();
				// prestmt.close();
		   }else{
				  DbaObj.Conn.setAutoCommit(true) ;
				  prestmt.execute();
				  DbaObj.Conn.commit();
				 // prestmt.close();	   
		   }

          for (mIndex=7;mIndex<=MsgObj.GetFieldCount()-1;mIndex++)
          {
            java.sql.PreparedStatement prestmtx=null;
            mBookMarkName=MsgObj.GetFieldName(mIndex);
            Sql="insert into Template_BookMarks (RecordId,BookMarkName) values ('"+ mTemplate +"','"+ mBookMarkName +"')";


			if ("oracle".equals(databaseType)) {
             mBookMarkId=DbaObj.GetMaxID("Template_BookMarks","BookMarkId");
             Sql="insert into Template_BookMarks (BookMarkId,RecordId,BookMarkName) values ('" + String.valueOf(mBookMarkId)+ "','"+ mTemplate +"','"+ mBookMarkName +"')";		
			}else{
				
				
				
			}

    

            prestmtx =DbaObj.Conn.prepareStatement(Sql);
           // DbaObj.Conn.setAutoCommit(true) ;
            prestmtx.execute();
           // DbaObj.Conn.commit();
            prestmtx.close();
          }
          mResult=true;
        }
        catch (SQLException e) {
          System.out.println(e.toString());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
  return(mResult);
}
//************ 标签管理代码   结束  *******************************


//************ 签章管理代码    开始  *******************************
//取得签名列表
private boolean LoadMarkList()
{
   String Sql= "SELECT MarkName FROM Signature";
   mMarkList="";
   boolean mResult=false;
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          while (result.next()) {
            try {
                mMarkList+=result.getString("MarkName")+"\r\n";
            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
          mResult=true;
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
   return (mResult);
}



//取得签名列表
private boolean LoadMarkList(String domainId,String userId,String orgId)
{
	StringBuffer where=new StringBuffer(" where domain_id=");   //构造取签章的条件
	where.append(domainId);
	//where.append(" and (useOrgId like '%*").append(orgId).append("*%'");
	where.append(" and  (useUserId like '%$").append(userId).append("$%'");

	//查询部门
	java.util.StringTokenizer stOrg = new java.util.StringTokenizer(orgId, "$");
	while(stOrg.hasMoreElements()){
		where.append(" or useOrgId like '%*").append(stOrg.nextElement().toString()).append("*%'");
	}

	//查询组
	try{
		if (DbaObj.OpenConnection()) {
			ResultSet result = DbaObj.ExecuteQuery("select group_id from org_user_group where emp_id="+userId);
			while(result.next()){
				where.append(" or useGroupId like '%@").append(result.getString(1)).append("@%'");
			}
			result.close();
			DbaObj.CloseConnection();
		}

	}catch(Exception ex){
		System.out.println(ex.getMessage());
	}
    where.append(" or (useOrgId='' and useUserId='' and useGroupId='') or (useOrgId is null and useUserId is null and useGroupId is null) "); 
	where.append(")");



   String Sql= "SELECT MarkName FROM Signature "+where.toString();
   //System.out.println("###################:"+Sql);

   mMarkList="";
   boolean mResult=false;
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          while (result.next()) {
            try {
                mMarkList+=result.getString("MarkName")+"\r\n";
            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
          mResult=true;
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
   return (mResult);
}



//取得签名列表
private boolean LoadMarkList2(String domainId,String userId,String orgIdString)
{
	StringBuffer where=new StringBuffer(" where domain_id=");   //构造取签章的条件
	where.append(domainId);
	//where.append(" and (useOrgId like '%*").append(orgId).append("*%'");
	where.append(" and  (useUserId like '%$").append(userId).append("$%'");

	//查询部门
	/*java.util.StringTokenizer stOrg = new java.util.StringTokenizer(orgId, "$");
	while(stOrg.hasMoreElements()){
		where.append(" or useOrgId like '%*").append(stOrg.nextElement().toString()).append("*%'");
	}*/


	  if (orgIdString != null && orgIdString.length() > 3) {
                String cStr = orgIdString.substring(1, orgIdString.length() - 1);
                cStr = cStr.replaceAll("\\$", ",");
                 cStr = cStr.replaceAll(",,", ",");
                String[] gg1 = cStr.split(",");
                if (gg1 != null && gg1.length > 0) {
                    for (int i = 0; i < gg1.length; i++) {
          
                       where.append(" or useOrgId like '%*").append(gg1[i]).append("*%' ");
                    }
                }
            }


	//查询组
	try{
		if (DbaObj.OpenConnection()) {
			ResultSet result = DbaObj.ExecuteQuery("select group_id from org_user_group where emp_id="+userId);
			while(result.next()){
				where.append(" or useGroupId like '%@").append(result.getString(1)).append("@%'");
			}
			result.close();
			DbaObj.CloseConnection();
		}

	}catch(Exception ex){
		System.out.println(ex.getMessage());
	}
    where.append(" or (useOrgId='' and useUserId='' and useGroupId='') or (useOrgId is null and useUserId is null and useGroupId is null) "); 
	where.append(")");



   String Sql= "SELECT MarkName FROM Signature "+where.toString();
   //System.out.println("###################:"+Sql);

   mMarkList="";
   boolean mResult=false;
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          while (result.next()) {
            try {
                mMarkList+=result.getString("MarkName")+"\r\n";
            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
          mResult=true;
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
   return (mResult);
}





//调入签名纪录
private boolean LoadMarkImage(String vMarkName,String vPassWord)
{
  String  Sql= "SELECT MarkBody,MarkType FROM Signature WHERE MarkName='" + vMarkName + "' and PassWord='" + vPassWord + "'";
  boolean mResult=false;
    try {
      if (DbaObj.OpenConnection()) {
        try {
          ResultSet result = DbaObj.ExecuteQuery(Sql);
          if (result.next()) {
            try {
              mFileBody=result.getBytes("MarkBody");
              mFileType=result.getString("MarkType");
              mResult=true;
            }
            catch (Exception ex) {
              System.out.println(ex.toString());
            }
          }
          result.close();
        }
        catch (SQLException e) {
          System.out.println(e.getMessage());
          mResult = false;
        }
      }
    }
    finally {
      DbaObj.CloseConnection();
    }
    return (mResult);
}

 //保存签名
 private boolean SaveSignature()
 {
  boolean mResult=false;

          String Sql="";
          int iSignatureID=1;

          if ("oracle".equals(databaseType)) {//  []问题 

			 Sql="insert into Document_Signature (SignatureID,RecordID,MarkName,UserName,DateTime,HostName,MarkGuid) values (?,?,?,?,to_date('"+mDateTime+"','yyyy-mm-dd hh24:mi:ss'),?,? ) ";
			 iSignatureID=DbaObj.GetMaxID("Document_Signature","SignatureID");
		
		   }else if("mysql".equals(databaseType)){

			  Sql="insert into Document_Signature ([RecordID],[MarkName],[UserName],[DateTime],[HostName],[MarkGuid]) values (?,?,?,?,?,? ) ";

		   }else{	
			  Sql="insert into Document_Signature ([RecordID],[MarkName],[UserName],[DateTime],[HostName],[MarkGuid]) values (?,?,?,?,?,? ) ";

		   }

   

 
  if (DbaObj.OpenConnection())
  {
    java.sql.PreparedStatement prestmt=null;
    try
    {

		 if ("oracle".equals(databaseType)) {//

			  prestmt =DbaObj.Conn.prepareStatement(Sql);
			  prestmt.setInt(1, iSignatureID);
			  prestmt.setString(2, mRecordID);
			  prestmt.setString(3, mMarkName);
			  prestmt.setString(4, mUserName);
			  prestmt.setString(5, mHostName);
			  prestmt.setString(6, mMarkGuid);
			  DbaObj.Conn.setAutoCommit(true);
			  prestmt.execute();
			  DbaObj.Conn.commit();
			  prestmt.close();
			  mResult=true;
		
		   }else if("mysql".equals(databaseType)){

			  prestmt =DbaObj.Conn.prepareStatement(Sql);
			  prestmt.setString(1, mRecordID);
			  prestmt.setString(2, mMarkName);
			  prestmt.setString(3, mUserName);
			  prestmt.setString(4, mDateTime);
			  prestmt.setString(5, mHostName);
			  prestmt.setString(6, mMarkGuid);
			  //DbaObj.Conn.setAutoCommit(true);
			  prestmt.execute();
			  //DbaObj.Conn.commit();
			  prestmt.close();
			  mResult=true;

		   }else{	
			  prestmt =DbaObj.Conn.prepareStatement(Sql);
			  prestmt.setString(1, mRecordID);
			  prestmt.setString(2, mMarkName);
			  prestmt.setString(3, mUserName);
			  prestmt.setString(4, mDateTime);
			  prestmt.setString(5, mHostName);
			  prestmt.setString(6, mMarkGuid);
			  DbaObj.Conn.setAutoCommit(true);
			  prestmt.execute();
			  DbaObj.Conn.commit();
			  prestmt.close();
			  mResult=true;
		   }
     
    }
    catch(SQLException e)
    {
      System.out.println(e.toString()+Sql);
      mResult=false;
    }
    DbaObj.CloseConnection();
  }
  return (mResult);
 }


 //列出所有签名
 private boolean LoadSignature()
 {
   boolean mResult=false;
   SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

   String Sql= "SELECT [MarkName],[UserName],[DateTime],[HostName],[MarkGuid] FROM Document_Signature WHERE RecordID='" + mRecordID + "'";

   mMarkName="印章名称\r\n";
   mUserName="签名人\r\n";
   mDateTime="签章时间\r\n";
   mHostName="客户端IP\r\n";
   mMarkGuid="序列号\r\n";

   if (DbaObj.OpenConnection())
   {
     try
     {
         mResult=true;
         ResultSet result=DbaObj.ExecuteQuery(Sql);
         while (result.next())
         {
           mMarkName+=result.getString("MarkName")+"\r\n";                  	     //文件号列表
           mUserName+=result.getString("UserName")+"\r\n";                           //日期列表
           mDateTime+=formatter.format(result.getTimestamp("DateTime"))+"\r\n";
           mHostName+=result.getString("HostName")+"\r\n";
           mMarkGuid+=result.getString("MarkGuid")+"\r\n";
         }
         result.close();
     }
     catch(Exception e)
     {
       System.out.println(e.toString());
       mResult=false;
     }
     DbaObj.CloseConnection();
   }
   return (mResult);
 }
// ************ 签章管理代码    结束  *******************************


//************ 扩展功能代码    开始  *******************************
 //调出所对应的文本
 private boolean LoadContent()
 {
   boolean mResult=false;
   //打开数据库
   //根据 mRecordID 或 mFileName 等信息
   //提取文本信息付给mContent即可。
   //本演示假设取得的文本信息如下：
   mContent="";
   mContent+="本文的纪录号："+mRecordID+"\n";
   mContent+="本文的文件名："+mFileName+"\n";
   mContent+="    这个部分请自己加入，和您们的数据库结合起来就可以了\n";
   mResult=true;
   return (mResult);
 }

 //保存所对应的文本
 private boolean SaveContent()
 {
   boolean mResult=false;
   //打开数据库
   //根据 mRecordID 或 mFileName 等信息
   //插入文本信息 mContent里的文本到数据库中即可。
   mResult=true;
   return (mResult);
 }

 //增加行并填充表格内容
 private boolean GetWordTable()
 {
   int i,n;
   String strI,strN;
   boolean mResult;
   mColumns=3; mCells=8;
   MsgObj.MsgTextClear();
   MsgObj.SetMsgByName("COLUMNS",String.valueOf(mColumns));  		     //设置表格行
   MsgObj.SetMsgByName("CELLS",String.valueOf(mCells));      		     //设置表格列
   //该部分内容可以从数据库中读取
   try{
     for (i=1;i<=mColumns;i++)
     {
       strI = String.valueOf(i);
       for (n=1;n<=mCells;n++)
       {
         MsgObj.SetMsgByName( String.valueOf(i)+String.valueOf(n),"内容" + DbaObj.GetDateTime());
       }
     }
     mResult=true;
   }
   catch(Exception e)
   {
     System.out.println(e.toString());
     mResult=false;
   }
   return (mResult);
 }

 //更新打印份数
 private boolean UpdataCopies(int mLeftCopies)
 {
   boolean mResult=true;
   //该函数可以把打印减少的次数记录到数据库

   //根据自己的系统进行扩展该功能
   return mResult;
 }
/**


*/
//复制文件
public void copyFile(String sourceFile, String targetFile) throws IOException {
    BufferedInputStream inBuff = null;
    BufferedOutputStream outBuff = null;
    try {
        // 新建文件输入流并对它进行缓冲
        inBuff = new BufferedInputStream(new FileInputStream(new File(sourceFile)));
        // 新建文件输出流并对它进行缓冲
        outBuff = new BufferedOutputStream(new FileOutputStream(new File(targetFile)));
        // 缓冲数组
        byte[] b = new byte[1024 * 5];
        int len;
        while ((len = inBuff.read(b)) != -1) {
            outBuff.write(b, 0, len);
        }
        // 刷新此缓冲的输出流
        outBuff.flush();
    } finally {
        // 关闭流
        if (inBuff != null)
            inBuff.close();
        if (outBuff != null)
            outBuff.close();
    }
}
 
//************ 扩展功能代码    结束  *******************************


public void ExecuteRun(HttpServletRequest request,HttpServletResponse response){
  DbaObj=new DBstep.iDBManager2000();      //创建数据库对象
  MsgObj=new DBstep.iMsgServer2000();      //创建信息包对象

  mOption="";
  mRecordID="";
  mTemplate="";
  mFileBody=null;
  mFileName="";
  mFileType="";
  mFileSize=0;
  mFileID="";
  mDateTime="";
  mMarkName="";
  mPassword="";
  mMarkList="";
  mBookmark="";
  mMarkGuid="";
  mDescript="";
  mCommand="";
  mContent="";
  mLabelName="";
  mImageName="";
  mTableContent="";
  mMyDefine1="";
  filePath=""; 
  
  mFilePath = request.getSession().getServletContext().getRealPath("upload") ;  //取得服务器路径
  filePath=request.getSession().getAttribute("officeFilePath")+"";
  yearStr=request.getSession().getAttribute("yearStr")+"";
  if(yearStr==null || "".equals(yearStr)){
    yearStr="0000";
  }
//加此处判断是为了区别发文转收文，正文再线预览mFileNames：govdocumentmanager-1493890807531.doc
//若大于5就是发文转收文正文再线预览，并截取相应路径，9999指定是发文转收文正文年份标识
  if("9999".equals(yearStr)){
	  mFilePath=mFilePath+"/"+filePath+"/";
  }else{
	  mFilePath=mFilePath+"/"+yearStr+"/"+filePath+"/";
  }
  try{
    if (request.getMethod().equalsIgnoreCase("POST")){
    	//MsgObj.MsgVariant(ReadPackage(request));                              //老版本后台类，不支持UTF-8编码自适应功能
        MsgObj.Load(request);                                                   //8.1.0.2版后台类新增解析接口，可支持UTF-8编码自适应功能

      if (MsgObj.GetMsgByName("DBSTEP").equalsIgnoreCase("DBSTEP")){	//如果是合法的信息包
        mOption=MsgObj.GetMsgByName("OPTION") ;							//取得操作信息
        mUserName=MsgObj.GetMsgByName("USERNAME") ;						//取得系统用户
        //System.out.println("操作："+mOption);									//打印出调试信息

        if(mOption.equalsIgnoreCase("LOADFILE")){						//下面的代码为打开服务器数据库里的文件
		  mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
		  mFileName=MsgObj.GetMsgByName("FILENAME");					//取得文档名称
		  mFileType=MsgObj.GetMsgByName("FILETYPE");
		  
		  					//取得文档类型
		  String viewDocHistory="1";MsgObj.GetMsgByName("viewDocHistory");  //是否查看留痕文件
		  MsgObj.MsgTextClear();										//清除文本信息
		  boolean loadFileSuccess=false;
		  	  
		 	
		  if("1".equals(viewDocHistory)){
			  //从文件夹中调人文档 查看留痕文件的情况	
			  //loadFileSuccess=MsgObj.MsgFileLoad(mFilePath+"/upload/govdocumentmanager/"+mFileName);
			  loadFileSuccess=LoadFileFromDisk(mFileName,mFilePath);
		  }else{
			  //从数据库调入文档
			  loadFileSuccess=LoadFile();
		  }
		  
		  //System.out.println(mFilePath+"//"+mFileName);
		  //if (MsgObj.MsgFileLoad(mFilePath+"//"+mFileName))			//从文件夹调入文档
		  if (loadFileSuccess)	{										//从数据库调入文档
            MsgObj.MsgFileBody(mFileBody);								//将文件信息打包
            MsgObj.SetMsgByName("STATUS","打开成功!");					//设置状态信息
            MsgObj.MsgError("");										//清除错误信息            
          } else{
            MsgObj.MsgError("打开失败!");								//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("SAVEFILE")){					//下面的代码为保存文件在服务器的数据库里
			System.out.println("保存文件");
			//System.out.println("保存文件");
          mRecordID=MsgObj.GetMsgByName("RECORDID");		    //取得文档编号
          mFileName=MsgObj.GetMsgByName("FILENAME");
          
          filePath=MsgObj.GetMsgByName("FILEPATH");		    //取得文档名称
          
          mFileType=MsgObj.GetMsgByName("FILETYPE");		    //取得文档类型
          mFileSize=MsgObj.MsgFileSize();			    //取得文档大小
          mFileDate=DbaObj.GetDateTime();                           //取得文档时间
          mFileBody=MsgObj.MsgFileBody();			    //取得文档内容
          //mFilePath="";                                             //如果保存为文件，则填写文件路径
          mUserName=mUserName;                                      //取得保存用户名称
          //mMyDefine1=MsgObj.GetMsgByName("MyDefine1");            //取得客户端传递变量值 MyDefine1="自定义变量值1"
		  String isDoc=MsgObj.GetMsgByName("isDoc");//是否保存为doc文档
		  String moduleType=MsgObj.GetMsgByName("moduleType");//模块类型
		  String docName=MsgObj.GetMsgByName("docName");//文件保存名
		  String isReTemplate=MsgObj.GetMsgByName("isReTemplate");  //是否套红头
          mDescript="通用版本";                                 	    //版本说明
	  	  MsgObj.MsgTextClear();				    //清除文本信息
	  		  
		  if(isDoc.equals("false")){
			  /*System.out.println("保存文件11");
			  if (SaveFile()) 					    //保存文档内容
			  {
				MsgObj.SetMsgByName("STATUS", "保存成功!");	            //设置状态信息
				MsgObj.MsgError("");				    //清除错误信息
			  }
			  else{
				MsgObj.MsgError("保存失败!");			            //设置错误信息
			  }*/
		  }else if(isDoc.equals("true")){
			  System.out.println("moduleType:"+moduleType);
			  System.out.println("mFilePath:"+mFilePath);
			  
			 String myPath=mFilePath+"/iWebOfficeSign/Document";
			 if("govdocumentmanager".equals(moduleType)){
				 
				myPath=mFilePath;
			 }else{ //if(moduleType.equals("information")){
				 /*String pathMore = "";
				 if(mRecordID.indexOf("_")>0){
					 pathMore = mRecordID.split("_")[0]+"/";
				 }
				myPath=mFilePath+"/upload/"+pathMore+"information";
				*/
				 myPath=mFilePath;
			 } 
			 
			
			 
			 /**  在套红头定稿前应将带痕迹的花脸文件另存，以备将来查询 */
			 /*if("1".equals(isReTemplate)){
				 com.js.util.util.JSFile.copyToFileServerPath(myPath+ "/" + mRecordID + mFileType,mRecordID + mFileType,
						 mFilePath+"/upload","/govdocumentmanager_his/");
			 }*/
			 if("govdocumentmanager".equals(moduleType)){
				 //修改公文附件			
				 MsgObj.MsgFileSave(myPath + "/" +mFileName);
				 
			 }else if("information".equals(moduleType)){
				 String[] ids = mRecordID.split("_");
				 String oldStr = myPath + "/" + ids[0]+"_"+ids[1]+"_"+ids[2] + mFileType;
				 mRecordID = mRecordID.substring(0,mRecordID.lastIndexOf("_"));
				 String newStr = myPath + "/" + ids[0]+"_"+ids[1] + mFileType;
				 //System.out.println("oldStr:"+oldStr);
				 //System.out.println("newStr:"+newStr);
				 File f = new File(oldStr);
				 if(!f.exists()){
					 copyFile(newStr,oldStr);
					 DataSourceBase base = new DataSourceBase();
					 String sql = "SELECT MAX(HISTORYVERSION) FROM OA_INFORMATIONHISTORY where information_id="+ids[3];
					 try{
						 base.begin();
						 ResultSet rs = null;
						 //System.out.println(sql);
						 rs = base.executeQuery(sql);
						 String version = "1.0";
						 if(rs.next()){
							 version = rs.getString(1);
						 }
						 version = version==null?"1.0":version;
						 rs.close();
						 float versionF = Float.valueOf(version);
						 versionF = (float)((versionF*10+1)/10);
						 if(com.js.util.config.SystemCommon.getDatabaseType().contains("mysql")){
							 sql = "INSERT into OA_INFORMATIONHISTORY (information_id,historyTitle,HISTORYCONTENT,HISTORYISSUERID,"+
									 "HISTORYISSUERNAME,HISTORYTIME,HISTORYVERSION,historyhead,DOMAIN_Id,hisdisplayimage) VALUES "+
									 "("+ids[3]+",'"+ids[4]+"','"+ids[0]+"_"+ids[1]+"_"+ids[2] + mFileType+"',"
									 +userId+",'"+userName+"',NOW(),'"+versionF+"',0,'0',1)";
							 //System.out.println(sql);
							 base.executeUpdate(sql);
						 }else{
							 Connection connSql = base.getDataSource().getConnection();
							 Statement statSql = connSql.createStatement();
							 sql = "INSERT into OA_INFORMATIONHISTORY (history_id,information_id,historyTitle,HISTORYCONTENT,HISTORYISSUERID,"+
									 "HISTORYISSUERNAME,HISTORYTIME,HISTORYVERSION,historyhead,DOMAIN_Id,hisdisplayimage) VALUES "+
									 "(hibernate_sequence.nextval,"+ids[3]+",'"+ids[4]+"',EMPTY_CLOB(),"
									 +userId+",'"+userName+"',sysdate,'"+versionF+"',0,'0',1)";
							 statSql.executeUpdate(sql);
							 sql = "select HISTORYCONTENT from OA_INFORMATIONHISTORY where information_id="+ids[3]+" and HISTORYVERSION='"+
									 versionF+"' for update";
							 ResultSet rsSql = statSql.executeQuery(sql);
							 if(rsSql.next()){
								 oracle.sql.CLOB clob=(oracle.sql.CLOB)(rsSql.getClob(1));
                                 BufferedWriter out=new BufferedWriter(clob.getCharacterOutputStream());
                                 String content=ids[0]+"_"+ids[1]+"_"+ids[2] + mFileType;
                                 out.write(content,0,content.length());
                                 out.close();
							 }
							 rsSql.close();
							 statSql.close();		

							 connSql.commit();
							 connSql.setAutoCommit(true);
							 connSql.close();
						 }
						 base.end();
					 }catch(Exception e){
						 base.end();
						 e.printStackTrace();
					 }		 
				 }
				 //System.out.println("保存文件2");
			 	 MsgObj.MsgFileSave(newStr);
			 }else{
				 MsgObj.MsgFileSave(myPath + "/" +mFileName);
			 }
			 //System.out.println("保存文件2");
                /*------用ftp把保存的doc文件上传到文件服务器------------*/
		   //此处添加上传至ftp服务器代码
/*------------------------------------------------------*/
          	//----------------------------------------
          	/*try{
          		byte[] buff = new byte[256];
          		java.io.File myFile = new java.io.File("config/ky.prop");
          		java.io.FileInputStream fis = new java.io.FileInputStream(myFile);
            	fis.read(buff);
            	String str = new String(buff);
            	str = str.trim();
            	String[] tmp = str.split(((char) 10) + "");
            	String myPath = tmp[4].trim();
            	MsgObj.MsgFileSave(myPath + "/" + mRecordID + ".doc");
          	}catch(Exception e){}*/
          	//----------------------------------------
		  }

          MsgObj.MsgFileClear();                                    //清除文档内容
        }

		//-----服务器处理页保存PDF文档--------------------------------------------------------//
		else if(mOption.equalsIgnoreCase("SAVEPDF")){ //下面的代码为保存PDF文件

			mRecordID=MsgObj.GetMsgByName("RECORDID"); //取得文档编号
			mFileName=MsgObj.GetMsgByName("FILENAME"); //取得文档名称
			MsgObj.MsgTextClear(); //清除文本信息



			 String myPath=mFilePath+"/upload/govdocumentmanager"+ "/" + mRecordID + ".pdf";

			//保存文档内容到文件夹中
			if (MsgObj.MsgFileSave(myPath)){
				MsgObj.SetMsgByName("STATUS", "保存成功!"); //设置状态信息

               //此处添加上传至ftp服务器代码

				MsgObj.MsgError(""); //清除错误信息
			}
			else {
				MsgObj.MsgError("保存失败!"); //设置错误信息
			}
			MsgObj.MsgFileClear(); //清除文档内容

		}


        else if(mOption.equalsIgnoreCase("LOADTEMPLATE")){				//下面的代码为打开服务器数据库里的模板文件
           mTemplate=MsgObj.GetMsgByName("TEMPLATE");		    //取得模板文档类型
 	   //本段处理是否调用文档时打开模版，
	   //还是套用模版时打开模版。
	   mCommand=MsgObj.GetMsgByName("COMMAND");		    //取得客户端定义的变量COMMAND值
           if (mCommand.equalsIgnoreCase("INSERTFILE"))
           {
 	     //if (MsgObj.MsgFileLoad(mFilePath+"//Document//"+mTemplate))//调入模板文档
	    // {
		//MsgObj.SetMsgByName("STATUS","打开模板成功!");	    //设置状态信息
		//MsgObj.MsgError("");		                    //清除错误信息
	    // }
	    // else
	    // {
		//MsgObj.MsgError("打开模板失败!");		            //设置错误信息
	   //  }
          //}
          // else
          //{
            // MsgObj.MsgTextClear();                                 //清除文本信息
             if (LoadTemplate())				    //调入模板文档
             {
               MsgObj.MsgFileBody(mFileBody);			    //将文件信息打包
               MsgObj.SetMsgByName("STATUS","打开模板成功!");         //设置状态信息
               MsgObj.MsgError("");		                    //清除错误信息
             }
             else
             {
               MsgObj.MsgError("打开模板失败!");			    //设置错误信息
             }
           }else{
             MsgObj.MsgTextClear();
			 if (LoadTemplate())				    //调入模板文档
             {
               MsgObj.MsgFileBody(mFileBody);			    //将文件信息打包
               MsgObj.SetMsgByName("STATUS","打开模板成功!");         //设置状态信息
               MsgObj.MsgError("");		                    //清除错误信息
             }
             else
             {
               //MsgObj.MsgError("打开模板失败!");			    //设置错误信息
			   MsgObj.MsgError("新建模板!");			    //设置错误信息
             }
		   }
        }

        else if(mOption.equalsIgnoreCase("SAVETEMPLATE")){				//下面的代码为保存模板文件在服务器的数据库里
          mTemplate=MsgObj.GetMsgByName("TEMPLATE");					//取得文档编号
          mFileName=MsgObj.GetMsgByName("FILENAME");					//取得文档名称
          mFileType=MsgObj.GetMsgByName("FILETYPE");					//取得文档类型
          //mMyDefine1=MsgObj.GetMsgByName("MyDefine1");				//取得客户端传递变量值 MyDefine1="自定义变量值1"
          mFileSize=MsgObj.MsgFileSize();								//取得文档大小
          mFileDate=DbaObj.GetDateTime();								//取得文档时间
          mFileBody=MsgObj.MsgFileBody();								//取得文档内容
          mFilePath="";													//如果保存为文件，则填写文件路径
          mUserName=mUserName;											//取得保存用户名称
          mDescript="通用模板"; 										//版本说明
          MsgObj.MsgTextClear();
          if (SaveTemplate()){											//保存模板文档内容
            MsgObj.SetMsgByName("STATUS", "保存模板成功!");				//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("保存模板失败!");							//设置错误信息
          }
          MsgObj.MsgFileClear();
        }

        else if(mOption.equalsIgnoreCase("LISTVERSION")){				//下面的代码为打开版本列表
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          MsgObj.MsgTextClear();
          if (ListVersion()){											//生成版本列表
            MsgObj.SetMsgByName("FILEID",mFileID);						//将文档号列表打包
            MsgObj.SetMsgByName("DATETIME",mDateTime);		            //将日期时间列表打包
            MsgObj.SetMsgByName("USERNAME",mUserName);					//将用户名列表打包
            MsgObj.SetMsgByName("DESCRIPT",mDescript);					//将说明信息列表打包
            MsgObj.SetMsgByName("STATUS","版本列表成功!");				//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("版本列表失败!");							//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("LOADVERSION")){				//下面的代码为打开版本文档
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mFileID=MsgObj.GetMsgByName("FILEID");					    //取得版本文档号
          MsgObj.MsgTextClear();
          if (LoadVersion(mFileID)){									//调入该版本文档
            MsgObj.MsgFileBody(mFileBody);								//将文档信息打包
            MsgObj.SetMsgByName("STATUS","打开版本成功!");				//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("打开版本失败!");							//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("SAVEVERSION")){				//下面的代码为保存版本文档
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mFileID=MsgObj.GetMsgByName("FILEID");					    //取得版本文档号   如:WebSaveVersionByFileID，则FileID值存在
          mFileName=MsgObj.GetMsgByName("FILENAME");				    //取得文档名称
          mFileType=MsgObj.GetMsgByName("FILETYPE");					//取得文档类型
          mFileSize=MsgObj.MsgFileSize();							    //取得文档大小
          mFileDate=DbaObj.GetDateTime();								//取得文档时间
          mFileBody=MsgObj.MsgFileBody();								//取得文档内容
          mFilePath="";													//如果保存为文件，则填写文件路径
          mUserName=mUserName;											//取得保存用户名称
          mDescript=MsgObj.GetMsgByName("DESCRIPT");				    //取得说明信息
          MsgObj.MsgTextClear();
          if (SaveVersion()){ 				        				    //保存版本文档
            MsgObj.SetMsgByName("STATUS", "保存版本成功!");				//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("保存版本失败!");							//设置错误信息
          }
          MsgObj.MsgFileClear();										//清除文档内容
        }

        else if(mOption.equalsIgnoreCase("LOADBOOKMARKS")){				//下面的代码为取得文档标签
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mTemplate=MsgObj.GetMsgByName("TEMPLATE");					//取得模板编号
          mFileName=MsgObj.GetMsgByName("FILENAME");					//取得文档名称
          mFileType=MsgObj.GetMsgByName("FILETYPE");					//取得文档类型
          MsgObj.MsgTextClear();
          if (LoadBookMarks()){
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("装入标签信息失败!");						//设置错误信息
          }
        }

        else if (mOption.equalsIgnoreCase("SAVEBOOKMARKS")){			//下面的代码为取得标签文档内容
          mTemplate=MsgObj.GetMsgByName("TEMPLATE");					//取得模板编号
          if (SaveBookMarks()){
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("保存标签信息失败!");						//设置错误信息
          }
          MsgObj.MsgTextClear();										//清除文本信息
        }

        else if(mOption.equalsIgnoreCase("LISTBOOKMARKS")){				//下面的代码为显示标签列表
          MsgObj.MsgTextClear();										//清除文本信息
          if (ListBookmarks()){
            MsgObj.SetMsgByName("BOOKMARK",mBookmark);					//将用户名列表打包
            MsgObj.SetMsgByName("DESCRIPT",mDescript);					//将说明信息列表打包
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("调入标签失败!");							//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("LOADMARKLIST")){				//下面的代码为创建印章列表
          MsgObj.MsgTextClear();										//清除文本信息
          if(LoadMarkList2("0", request.getSession().getAttribute("userId").toString(), request.getSession().getAttribute("orgIdString").toString())){
            MsgObj.SetMsgByName("MARKLIST",mMarkList);					//显示签章列表
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("创建印章列表失败!");						//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("LOADMARKIMAGE")){				//下面的代码为打开印章文件
          mMarkName=MsgObj.GetMsgByName("IMAGENAME");					//取得签名名称
          mUserName=MsgObj.GetMsgByName("USERNAME");					//取得用户名称
          mPassword=MsgObj.GetMsgByName("PASSWORD");					//取得用户密码
          MsgObj.MsgTextClear();										//清除文本信息
          if (LoadMarkImage(mMarkName,mPassword)){						//调入签名信息
            MsgObj.SetMsgByName("IMAGETYPE",mFileType);					//设置签名类型
            MsgObj.MsgFileBody(mFileBody);								//将签名信息打包
            MsgObj.SetMsgByName ("POSITION","Manager");					//插入位置  在文档中标签"Manager"
            MsgObj.SetMsgByName ("ZORDER","5");							//4:在文字上方 5:在文字下方
            MsgObj.SetMsgByName("STATUS","打开成功!");					//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("签名或密码错误!");							//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("SAVESIGNATURE")){				//下面的代码为保存签章基本信息
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mFileName=MsgObj.GetMsgByName("FILENAME");					//取得文件名称
          mMarkName=MsgObj.GetMsgByName("MARKNAME");					//取得签名名称
          mUserName=MsgObj.GetMsgByName("USERNAME");					//取得用户名称
          mDateTime=MsgObj.GetMsgByName("DATETIME");				    //取得签名时间
          mHostName=request.getRemoteAddr();							//取得用户IP
          mMarkGuid=MsgObj.GetMsgByName("MARKGUID");					//取得唯一编号
          MsgObj.MsgTextClear();										//清除文本信息
          if (SaveSignature()){											//保存签章
            MsgObj.SetMsgByName("STATUS","保存印章成功!");				//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("保存印章失败!");							//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("LOADSIGNATURE")){				//下面的代码为调出签章基本信息
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          MsgObj.MsgTextClear();										//清除文本信息
          if (LoadSignature()){											//调出签章
            MsgObj.SetMsgByName("MARKNAME",mMarkName);					//将签名名称列表打包
            MsgObj.SetMsgByName("USERNAME",mUserName);					//将用户名列表打包
            MsgObj.SetMsgByName("DATETIME",mDateTime);					//将时间列表打包
            MsgObj.SetMsgByName("HOSTNAME",mHostName);					//将盖章IP地址列表打包
            MsgObj.SetMsgByName("MARKGUID",mMarkGuid);					//将唯一编号列表打包
            MsgObj.SetMsgByName("STATUS","调入印章成功!");				//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("调入印章失败!");							//设置错误信息
          }
        }

        else if (mOption.equalsIgnoreCase("SAVEASHTML")){				//下面的代码为将OFFICE存为HTML页面
          mHtmlName=MsgObj.GetMsgByName("HTMLNAME");					//取得文件名称
          mDirectory=MsgObj.GetMsgByName("DIRECTORY");					//取得目录名称
          MsgObj.MsgTextClear();
          if (mDirectory.trim().equalsIgnoreCase("")){
            mFilePath=mFilePath + "/HTML";
          }
          else{
            mFilePath=mFilePath + "/HTML/" + mDirectory;
          }
          MsgObj.MakeDirectory(mFilePath);								//创建路径


          if (MsgObj.MsgFileSave(mFilePath+"/"+mHtmlName)){			//保存HTML文件

              //此处添加上传至ftp服务器代码

            MsgObj.MsgError("");										//清除错误信息
            MsgObj.SetMsgByName("STATUS","保存HTML成功!");				//设置状态信息
          }
          else{
            MsgObj.MsgError("保存HTML失败!");							//设置错误信息
          }
          MsgObj.MsgFileClear();
        }

        else if (mOption.equalsIgnoreCase("SAVEIMAGE"))	{				//下面的代码为将OFFICE存为HTML图片页面
           mHtmlName=MsgObj.GetMsgByName("HTMLNAME");		    //取得文件名称
           mDirectory=MsgObj.GetMsgByName("DIRECTORY");	            //取得目录名称

           String moduleType=MsgObj.GetMsgByName("EXTPARAM");		    //取得模块类型
		   String myPath="/iWebOfficeSign";//默认位置
		   if(moduleType.equals("information")){
				myPath="/upload/information";
		   }
		   else if(moduleType.equals("govdocument")){
				myPath="/upload/govdocumentmanager";
		   }

           MsgObj.MsgTextClear();
           if (mDirectory.trim().equalsIgnoreCase(""))
           {
             mFilePath=mFilePath +myPath+ "/HTMLIMAGE";
           }
           else
           {
             mFilePath=mFilePath +myPath+ "/HTMLIMAGE/" + mDirectory;
           }
           //System.out.println("****************************************");
		  // System.out.println(mFilePath);
		  // System.out.println("*****************************************");
           MsgObj.MakeDirectory(mFilePath);                         //创建路径
           if (MsgObj.MsgFileSave(mFilePath+"//"+mHtmlName))        //保存HTML文件
           {
             MsgObj.MsgError("");                                   //清除错误信息
             MsgObj.SetMsgByName("STATUS","保存HTML图片成功!");       //设置状态信息
           }
           else
           {
             MsgObj.MsgError("保存HTML图片失败!");                    //设置错误信息
           }
           MsgObj.MsgFileClear();
		}

        else if (mOption.equalsIgnoreCase("SAVEASPAGE")){				//下面的代码为将手写批注存为HTML图片页面
          mHtmlName=MsgObj.GetMsgByName("HTMLNAME");					//取得文件名称
          mDirectory=MsgObj.GetMsgByName("DIRECTORY");					//取得目录名称
          MsgObj.MsgTextClear();
          if (mDirectory.trim().equalsIgnoreCase("")){
            mFilePath=mFilePath + "/HTML";
          }
          else{
            mFilePath=mFilePath + "/HTML/" + mDirectory;
          }
          MsgObj.MakeDirectory(mFilePath);								//创建路径
          if (MsgObj.MsgFileSave(mFilePath+"/"+mHtmlName)){			//保存HTML文件
		    
			   //此处添加上传至ftp服务器代码
			  
            MsgObj.MsgError("");										//清除错误信息
            MsgObj.SetMsgByName("STATUS","保存批注HTML图片成功!");		//设置状态信息
          }
          else{
            MsgObj.MsgError("保存批注HTML图片失败!");					//设置错误信息
          }
          MsgObj.MsgFileClear();
        }

        else if(mOption.equalsIgnoreCase("INSERTFILE")){				//下面的代码为插入文件
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mFileName=MsgObj.GetMsgByName("FILENAME");					//取得文档名称
          mFileType=MsgObj.GetMsgByName("FILETYPE");					//取得文档类型
          MsgObj.MsgTextClear();
          if (LoadFile()){												//调入文档
            MsgObj.MsgFileBody(mFileBody);								//将文件信息打包
            MsgObj.SetMsgByName("POSITION","Content");					//设置插入的位置[书签]
            MsgObj.SetMsgByName("STATUS","插入文件成功!");				//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("插入文件成功!");							//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("UPDATEFILE")){				//下面的代码为更新保存文件
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mFileName=MsgObj.GetMsgByName("FILENAME");					//取得文档名称
          mFileType=MsgObj.GetMsgByName("FILETYPE");					//取得文档类型
          mFileSize=MsgObj.MsgFileSize();								//取得文档大小
          mFileDate=DbaObj.GetDateTime();								//取得文档时间
          mFileBody=MsgObj.MsgFileBody();								//取得文档内容
          mFilePath="";													//如果保存为文件，则填写文件路径
          mUserName=mUserName;											//取得保存用户名称
          mDescript="定稿版本";											//版本说明
          MsgObj.MsgTextClear();
          if (SaveVersion()){											//保存文档内容
            MsgObj.SetMsgByName("STATUS", "保存定稿版本成功!");			//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("保存定稿版本失败!");						//设置错误信息
          }
          MsgObj.MsgFileClear();
        }

        else if(mOption.equalsIgnoreCase("INSERTIMAGE")){				//下面的代码为插入服务器图片
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mLabelName=MsgObj.GetMsgByName("LABELNAME");					//标签名
          mImageName=MsgObj.GetMsgByName("IMAGENAME");					//图片名
          mFilePath=mFilePath+"/upload/govReadHead/"+mImageName;				//图片在服务器的完整路径
          mFileType=mImageName.substring(mImageName.length()-4).toLowerCase() ;	//取得文件的类型
          MsgObj.MsgTextClear();
          if (MsgObj.MsgFileLoad(mFilePath)){							//调入图片
            MsgObj.SetMsgByName("IMAGETYPE",mFileType);					//指定图片的类型
            MsgObj.SetMsgByName("POSITION",mLabelName);					//设置插入的位置[书签对象名]
            MsgObj.SetMsgByName("STATUS","插入图片成功!");				//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("插入图片失败!");							//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("PUTFILE")){					//下面的代码为请求上传文件操作
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mFileBody=MsgObj.MsgFileBody();								//取得文档内容
          mLocalFile=MsgObj.GetMsgByName("LOCALFILE");					//取得本地文件名称
          mRemoteFile=MsgObj.GetMsgByName("REMOTEFILE");				//取得远程文件名称
          MsgObj.MsgTextClear();										//清除文本信息
          mFilePath=mFilePath+"/Document/"+mRemoteFile;
          if (MsgObj.MsgFileSave(mFilePath)){							//调入文档
            MsgObj.SetMsgByName("STATUS","保存上传文件成功!");			//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("上传文件失败!");							//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("GETFILE")){					//下面的代码为请求下载文件操作
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mLocalFile=MsgObj.GetMsgByName("LOCALFILE");					//取得本地文件名称
          mRemoteFile=MsgObj.GetMsgByName("REMOTEFILE");				//取得远程文件名称
          MsgObj.MsgTextClear();										//清除文本信息
          mFilePath=mFilePath+"/Document/"+mRemoteFile;
          if (MsgObj.MsgFileLoad(mFilePath)){							//调入文档内容
            MsgObj.SetMsgByName("STATUS","保存下载文件成功!");			//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("下载文件失败!");							//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("DATETIME")){					//下面的代码为请求取得服务器时间
          MsgObj.MsgTextClear();										//清除文本信息
          MsgObj.SetMsgByName("DATETIME",DbaObj.GetDateTime());		//标准日期格式字串，如 2005-8-16 10:20:35
		  //MsgObj.SetMsgByName("DATETIME","2006-01-01 10:24:24");		//标准日期格式字串，如 2005-8-16 10:20:35
        }

        else if(mOption.equalsIgnoreCase("SENDMESSAGE")){				//下面的代码为Web页面请求信息[扩展接口]
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          mFileName=MsgObj.GetMsgByName("FILENAME");					//取得文档名称
          mFileType=MsgObj.GetMsgByName("FILETYPE");					//取得文档类型
          mCommand=MsgObj.GetMsgByName("COMMAND");						//取得操作类型 InportText or ExportText
          mContent=MsgObj.GetMsgByName("CONTENT");						//取得文本信息 Content
          mOfficePrints=MsgObj.GetMsgByName("OFFICEPRINTS");			//取得Office文档的打印次数
		  mInfo = MsgObj.GetMsgByName("TESTINFO");						//取得客户端传来的自定义信息

          MsgObj.MsgTextClear();
          MsgObj.MsgFileClear();
          //System.out.println(mCommand);

          if (mCommand.equalsIgnoreCase("INPORTTEXT")){
			if (LoadContent()){
			  MsgObj.SetMsgByName("CONTENT",mContent);
			  MsgObj.SetMsgByName("STATUS", "导入成功!");				//设置状态信息
			  MsgObj.MsgError("");										//清除错误信息
            }else{
			  MsgObj.MsgError("导入失败!");								//设置错误信息
            }
          }else if (mCommand.equalsIgnoreCase("EXPORTTEXT")){
			if (SaveContent()){
			  MsgObj.SetMsgByName("STATUS", "导出成功!");				//设置状态信息

			  String myPath=mFilePath+"/upload/govdocumentmanager/"+mRecordID+".txt";
			  FileWriter file = new FileWriter(myPath);
			  file.write(mContent,0,mContent.length());
			  file.close();

			  MsgObj.MsgError("");										//清除错误信息
			}else{
			  MsgObj.MsgError("导出失败!");								//设置错误信
			}
          }else if (mCommand.equalsIgnoreCase("WORDTABLE")){
			if (GetWordTable()){
			  MsgObj.SetMsgByName("COLUMNS",String.valueOf(mColumns));	//列
			  MsgObj.SetMsgByName("CELLS",String.valueOf(mCells));		//行
			  MsgObj.SetMsgByName("WORDCONTENT",mTableContent);			//表格内容
			  MsgObj.SetMsgByName("STATUS", "增加和填充成功成功!");		//设置状态信息
			  MsgObj.MsgError("");										//清除错误信息
			}else{
			  MsgObj.MsgError("增加表格行失败!");						//设置错误信息
			}
          }else if (mCommand.equalsIgnoreCase("COPIES")){				//打印限制
            //System.out.println(mOfficePrints);
            mCopies=Integer.parseInt(mOfficePrints);					//获得客户需要打印的份数
            if (mCopies<=2){											//比较打印份数，拟定该文档允许打印的总数为2份，注：可以在数据库中设置好文档允许打印的份数
              if (UpdataCopies(2-mCopies)){								//更新打印份数
                MsgObj.SetMsgByName("STATUS", "1");						//设置状态信息，允许打印
                MsgObj.MsgError("");									//清除错误信息
              }
            }
            else{
              MsgObj.SetMsgByName("STATUS", "0");						//不允许打印
              MsgObj.MsgError("超过打印限度不允许打印!");				//设置错误信息
            }
          }else if (mCommand.equalsIgnoreCase("SELFINFO")){
			mInfo = "服务器端收到客户端传来的信息：“" + mInfo + "” | " ;
            //组合返回给客户端的信息
			mInfo = mInfo + "服务器端发回当前服务器时间：" + DbaObj.GetDateTime();
			MsgObj.SetMsgByName("RETURNINFO",mInfo);					//将返回的信息设置到信息包中
		  }else{
            MsgObj.MsgError("客户端Web发送数据包命令没有合适的处理函数!["+mCommand+"]");
            MsgObj.MsgTextClear();
            MsgObj.MsgFileClear();
          }
        }

        else if(mOption.equalsIgnoreCase("SAVEPAGE")){					//下面的代码为保存为全文批注格式文件
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          MsgObj.MsgTextClear();										//清除文本信息
          mFilePath=mFilePath+"/Document/"+mRecordID+".pgf";			//全文批注文件的完整路径
          if (MsgObj.MsgFileSave(mFilePath)){							//保存全文批注文件
            MsgObj.SetMsgByName("STATUS","保存全文批注成功!");			//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("保存全文批注失败!");						//设置错误信息
          }
        }

        else if(mOption.equalsIgnoreCase("LOADPAGE")){					//下面的代码为调入全文批注格式文件
          mRecordID=MsgObj.GetMsgByName("RECORDID");					//取得文档编号
          MsgObj.MsgTextClear();										//清除文本信息
          mFilePath=mFilePath+"/Document/"+mRecordID+".pgf";			//全文批注文件的完整路径
          if (MsgObj.MsgFileLoad(mFilePath)){							//调入文档内容
            MsgObj.SetMsgByName("STATUS","打开全文批注成功!");			//设置状态信息
            MsgObj.MsgError("");										//清除错误信息
          }
          else{
            MsgObj.MsgError("打开全文批注失败!");						//设置错误信息
          }
        }
      }
      else{      
        MsgObj.MsgError("客户端发送数据包错误!");
        MsgObj.MsgTextClear();
        MsgObj.MsgFileClear();
      }
    }
    else{    
      MsgObj.MsgError("请使用Post方法");
      MsgObj.MsgTextClear();
      MsgObj.MsgFileClear();
    }
    //System.out.println("SendPackage") ;
    //ServletOutputStream out = response.getOutputStream();
    //SendPackage(response);
    //out = null ;
   
    //SendPackage(response);                                                    //老版后台类返回信息包数据方法
    MsgObj.Send(response); 
  }
  catch(IOException e){  
    System.out.println(e.toString()) ;
  }
}
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("DBstep.iMsgServer2000");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("DBstep.iDBManager2000");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("oracle.jdbc");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("oracle.sql.BLOB");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.text.DateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=gb2312");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
      out.write('\r');
      out.write('\n');
userId = session.getAttribute("userId").toString();
userName = session.getAttribute("userName").toString(); 
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

iWebOffice officeServer = new iWebOffice();
officeServer.ExecuteRun(request,response);
out.clear();
out=pageContext.pushBody();

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
