/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:58:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.backlog;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.js.oa.jsflow.vo.WorkVO;
import com.js.oa.jsflow.service.*;

public final class item_005fsubmit_005fdelete_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.js.oa.jsflow.service");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.jsflow.vo.WorkVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n");

	request.setCharacterEncoding("UTF-8");

	String type = request.getParameter("type");
	String app = request.getContextPath();

	String processId = request.getParameter("processId");
	String tableId = request.getParameter("tableId");
	String recordId = request.getParameter("recordId");//数据记录ID
	String submitPerson = request.getParameter("submitPerson");//发起人
	String submitTime = request.getParameter("submitTime");//发起时间
	String curActivityName = request.getParameter("curActivityName");
	String userName = session.getAttribute("userName") + "";
	String workId = request.getParameter("workId");//workId
	String stepCount = request.getParameter("stepCount");//步骤数

	//发邮件提醒
	java.text.SimpleDateFormat sf = new java.text.SimpleDateFormat("yy-MM-dd HH:mm:ss");
	com.js.oa.jsflow.service.WorkFlowButtonBD workflowButtonBD = new com.js.oa.jsflow.service.WorkFlowButtonBD();
	//取得流程发起人 
	String to = workflowButtonBD.getSubmitPerson(workId, tableId, recordId);

	String title = "工作";

	//发送消息通知给发送人

	if (to != null && to.length() > 1) {
		title = "您发起的" + title + "被" + userName + "[" + curActivityName + "]作废";
		com.js.system.service.messages.RemindUtil.sendMessageToUsersNoURL(title, "", to, "jsflow",
						new java.util.Date(), new java.util.Date("2050/1/1"));
	}

	//作废时业务表单的处理
	WorkFlowCommonBD workFlowCommonBD = new WorkFlowCommonBD();
	Map formClassNameMethod = workFlowCommonBD.getProcessClassMethod(request.getParameter("processId"));
	String formClassName = "";
	if (null != formClassNameMethod) {
		if (null != formClassNameMethod.get("formClassName")
				&& !"".equals(formClassNameMethod.get("formClassName").toString())
				&& !"".equals(formClassNameMethod.get("formClassName").toString().toUpperCase())) {
			formClassName = formClassNameMethod.get("formClassName").toString();
		}
	}
	if (!"".equals(formClassName)) {
		com.js.oa.jsflow.util.FormReflection formReflection = new com.js.oa.jsflow.util.FormReflection();
		Object obj = formReflection.execute("com.js.oa.form." + formClassName, "delete", request);//作废表单
	}

	//删除
	WorkVO workVO = new WorkVO();
	workVO.setProcessId(Long.valueOf(processId));
	workVO.setTableId(Long.valueOf(tableId));
	workVO.setRecordId(Long.valueOf(recordId));
	WorkFlowButtonBD bd = new WorkFlowButtonBD();
	bd.deleteWork(workVO);

	String showDoc = request.getParameter("showDoc") != null
			&& "doc".equals(request.getParameter("showDoc")) ? "&amp;showDoc=doc" : "";
	
	String loginType = null==session.getAttribute("loginType") ? "wap" : session.getAttribute("loginType").toString();

      out.write("\r\n<!DOCTYPE HTML>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/wap2/commonImport.jsp", out, false);
      out.write("\r\n<HTML>\r\n\t<HEAD>\r\n\t\t<TITLE>工作办理</TITLE>\r\n\t\t<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n\t\t<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n\t\t<META name=apple-touch-fullscreen content=YES>\r\n\t\t<META name=apple-mobile-web-app-capable content=no>\r\n\t\t<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n\t\t");

		String loginType2017 = null==session.getAttribute("loginType") ? "" : session.getAttribute("loginType").toString();
		if(!"weixin".equals(loginType2017)){
		  out.print("<script type=\"text/javascript\">window.history.forward(1);</script>");
		}
		
      out.write("\r\n\t</head>\r\n\t<body>\r\n\t\t<div class=\"form\">\r\n\t\t\t<div class=\"item\">\r\n\t\t\t\t<div class=\"content\">事项已经办理完毕!</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n\t\t<div class=\"footer\">\r\n\t  \t\t<div class=\"buttons\">\r\n\t  \t\t\t");

	  			if("wap".equals(loginType)){
	  				
      out.write("\r\n\t  \t\t\t\t<div id=\"closeWindow\" class=\"button gray\" onclick=\"javascript:loadURL();\">关&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;闭</div>\r\n\t  \t\t\t\t");

	  			} else{
	  				
      out.write("\r\n\t  \t\t\t\t<div id=\"closeWindow\" class=\"button gray\" onclick=\"javascript:closeWindow();\">关&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;闭</div>\r\n\t  \t\t\t\t");

	  			}
	  			
      out.write("\r\n\t    \t</div>\r\n\t    </div>\r\n\t    \r\n\t</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
