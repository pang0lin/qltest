/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:04:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.doc.form;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.doc.doc.bean.DocWordMust;
import java.util.List;
import java.util.ArrayList;

public final class chooseMustWord_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-nested.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-tiles.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-logic.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-html.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-template.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-bean.tld", Long.valueOf(1499751390000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.doc.doc.bean.DocWordMust");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);
request.setCharacterEncoding("GBK");
//获取公文类别，0发文，1收文
String dovtype=request.getParameter("dovtype")+"";
String mustfield=request.getParameter("mustfield")+"";
DocWordMust dm=new DocWordMust();
List<String[]> list=dm.getfield(dovtype);

      out.write("\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">\r\n<meta name=\"GENERATOR\" content=\"Microsoft FrontPage 4.0\">\r\n<meta name=\"ProgId\" content=\"FrontPage.Editor.Document\">\r\n<title>选择必填字段</title>\r\n<link href=\"skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<script src=\"/jsoa/js/js.js\" language=\"javascript\"></script>\r\n<script language=\"javascript\" src=\"js/openEndow.js\"></script>\r\n</head>\r\n<body bgcolor=\"#B7B7B7\">\r\n<table width=\"95%\" align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"listTable\" style=\"margin:10px 10px 10px 10px;\">\r\n\t<tr>\r\n\t\t<td class=\"listTableHead\"  width=\"40%\">字段</td>\r\n\t\t<td class=\"listTableHead\">必填</td>\r\n\t</tr>\r\n\t");

	int index=0;
	for(int i=0;i<list.size();i=i+1){
		Object[] obj=(Object[])list.get(i);
		index ++;
		String listClass="listTableLine1";
		if(index%2 != 0){
			listClass="listTableLine2";
		}
	
      out.write("\r\n\t<tr>\r\n\t\t<td class=\"");
      out.print(listClass);
      out.write('"');
      out.write('>');
      out.print(obj[0] );
      out.write("</td>\r\n\t\t<td class=\"");
      out.print(listClass);
      out.write("\">\r\n\t\t\t<input type=\"checkbox\" name=\"wordmust\" id=\"wordmust\" ");
if(mustfield.indexOf(obj[1]+"")>=0){
      out.write(" checked");
} 
      out.write(" value=\"");
      out.print(obj[1]+","+obj[0] );
      out.write("\"/>\r\n\t\t</td>\r\n\t</tr>\r\n\t");
}
      out.write("\r\n</table>\r\n<div style=\"margin-left:10px;\">\r\n\t<input type=\"button\" class=\"btnButton2Font\" onClick=\"Submit();\" value=\"保存\" />\r\n\t<input type=\"button\" class=\"btnButton2Font\" onClick=\"exit()\" value=\"退出\" />\r\n</div>\r\n</body>\r\n</html>\r\n<script language=\"javascript\">\r\nfunction getCheckBoxID() {\r\n    var fields = \"\" ;\r\n    var fieldname=\"\";\r\n    var str=\"\";\r\n    for(var i = 0 ; i < document.all.wordmust.length ; i++ ) {\r\n        var obj = document.all.wordmust[i] ;\r\n         if(obj.type == \"checkbox\" && obj.name==\"wordmust\"){\r\n\t\t\tif(obj.checked) {\r\n\t\t\t\tvar val=obj.value;\r\n\t\t\t\tfields=fields+val.substring(0,val.indexOf(\",\"))+\",\";\r\n\t\t\t\tfieldname=fieldname+val.substring(val.indexOf(\",\")+1)+\",\";\r\n\t\t\t}\r\n\t\t }\r\n    }    \r\n\tif(fields!=\"\"){\r\n\t\tfields=fields.substring(0,fields.length-1);\r\n\t}\r\n\tif(fieldname!=\"\"){\r\n\t\tfieldname=fieldname.substring(0,fieldname.length-1);\r\n\t}\r\n\tstr=fields+\"$\"+fieldname;\r\n    return str ;\r\n}\r\n\tfunction Submit(){\r\n\t\tvar str=getCheckBoxID();\r\n\t\tvar fields = \"\" ;\r\n\t    var fieldname=\"\";\r\n\t    if(str!=\"\"){\r\n");
      out.write("\t    \tfields=str.substring(0,str.indexOf(\"$\"));\r\n\t    \tfieldname=str.substring(str.indexOf(\"$\")+1);\r\n\t    }\r\n\t\topener.document.all.mustword.value=fieldname;\r\n\t\topener.document.all.mustfield.value=fields;\r\n\t\twindow.close();\r\n\t}\r\n\tfunction exit(){\r\n\t\twindow.close();\r\n\t}\r\n</script>\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
