/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:58:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.weixin.common.util.DownloadFileForWeixin;
import java.sql.ResultSet;
import com.js.util.util.DataSourceBase;

public final class weixinreaddocument_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
    _jspx_imports_classes.add("com.js.oa.weixin.common.util.DownloadFileForWeixin");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n");
 
String informationId=request.getParameter("inforId");
String htmlString="";
if(informationId!=null&&!"".equals(informationId)){
  	String sql = "SELECT INFORMATIONHEADFILE FROM OA_INFORMATION WHERE INFORMATION_ID="+informationId;
  	DataSourceBase base = new DataSourceBase();
  	String fieldValue = "";
	try {
		base.begin();
		ResultSet rs = base.executeQuery(sql);
		if (rs.next()) {
			fieldValue = rs.getString(1);
		}
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		base.end();
	}
	
	if(fieldValue!=null && "".equals(fieldValue)){
	    String middPath="0000";
	    if(fieldValue.length()>6 &&"_".equals(fieldValue.substring(4, 5))){
	        middPath=middPath.substring(0, 4);
	    }else{
	        middPath="0000";
	    }
	    String path="/upload/"+middPath+"/information/";
	    String imgTypes = ",.jpg,.gif,.bmp,.png,.jpeg,.tiff,.pcx,.dcs,.raw,.pict,";
	    String endType=fieldValue.substring(fieldValue.indexOf("."), fieldValue.length());
	    if(fieldValue.indexOf(".doc")>0){
	        htmlString=new DownloadFileForWeixin().officeToHtml(path,fieldValue);
	    }else if(fieldValue.indexOf(".xls")>0){
	        htmlString=DownloadFileForWeixin.convert2Html(path+fieldValue,fieldValue);
	    }else if(imgTypes.indexOf(endType)>=0){
	       htmlString="<img width=100% src="+path+" />";
	    }
	}
  
}


      out.write("\r\n\r\n\r\n\r\n<style type=\"text/css\">\r\n\t\t* { margin: 0; padding: 0;}\r\n\t\t#fileBody {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t\tdisplay: none;\r\n\t\t\tposition: fixed;\r\n\t\t\ttop: 0;\r\n\t\t\tleft: 0;\r\n\t\t\tbackground: #fff;\r\n\t\t\tz-index: 100;\r\n\t\t}\r\n\t\t#fileBody #fileContent {\r\n\t\t\twidth: 98%;\r\n\t\t\toverflow: auto;\r\n\t\t\tbackground: #eee;\r\n\t\t\tmargin: 1% auto;\r\n\t\t\ttext-align: center;\r\n\t\t\theight: 95%;\r\n\t\t\tpadding-bottom: 65px;\r\n\t\t}\r\n\t\t#fileBody #fileButtons {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 55px;\r\n\t\t\ttext-align: center;\r\n\t\t\twhite-space: nowrap;\r\n\t\t\tdisplay: flex;\r\n\t\t\tdispaly: -webkit-flex;\r\n\t\t\tdisplay: -webkit-box;\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 0;\r\n\t\t\tbottom: 0;\r\n\t\t\tbackground: #999;\r\n\t\t}\r\n\t\t#fileBody #fileButtons .fileButton {\r\n\t\t\tbackground: #09f;\r\n\t\t\tline-height: 39px;\r\n\t\t\theight: 39px;\r\n\t\t\tfont-size: 16px;\r\n\t\t\tfont-weight: 300;\r\n\t\t\tdisplay: block;\r\n\t\t\ttext-decoration: none;\r\n\t\t\t-webkit-box-flex: 1;\r\n\t\t\t-webkit-flex: 1;\r\n\t\t\tflex: 1;\r\n\t\t\tborder-radius: 5px;\r\n\t\t\t-webkit-border-radius: 5px;\r\n\t\t\t-moz-border-radius: 5px;\r\n\t\t\tmargin: 8px;\r\n\t\t\tcolor: #fff;\r\n");
      out.write("\t\t}\r\n\t\t</style>\r\n\t\t<script language=\"javascript\">\r\n\t\t// 获取窗口尺寸\r\n\t    var windowHeight = $(window).height();\r\n  \t\tvar windowWidth = $(window).width();\r\n  \t\twindowHeight -= 60;\r\n  \t\twindowWidth -= 10;\r\n\t\tfunction hiddenFileBody(){\r\n\t\t\t$(\"#fileBody\").hide();\r\n\t\t\t$(\"#fileButtons\").html(\"\");\r\n\t\t\t$(\"#fileContent\").html(\"\");\r\n\t\t}\r\n\t \tfunction showImage(type, url){\r\n\t \t\tvar image = new Image();\r\n\t \t\timage.src = url;\r\n\t \t\tvar imageWidth = image.width;\r\n\t \t\tvar imageHeight = image.height;\r\n\t \t\tvar imgHtml = \"\";\r\n\t \t\tif(0 == type){\t// 全图\r\n\t  \t  \t\t// 比较文件尺寸和窗口尺寸的比值，确定图片显示尺寸\r\n\t  \t  \t\tvar wl = imageWidth / windowWidth;\r\n\t  \t  \t\tvar hl = imageHeight / windowHeight;\r\n\t  \t  \t\tif(wl > hl){\t// 宽比大于高比时，设置图片宽度\r\n\t  \t  \t\t\timgHtml = \"<img src='\" + url + \"' width='\" + windowWidth + \"' />\";\r\n\t  \t  \t\t} else{\t// 否则设置图片高度\r\n\t  \t  \t\t\timgHtml = \"<img src='\" + url + \"' height='\" + windowHeight + \"' />\";\r\n\t  \t  \t\t}\r\n\t \t\t} else if(1 == type){\t// 原图\r\n\t \t\t\timgHtml = \"<img src='\" + url + \"' />\";\r\n\t \t\t}\r\n\t \t\t$(\"#fileContent\").html(imgHtml);\r\n\t \t}\r\n");
      out.write("\t\t</script>\r\n\t\r\n\t    <div id=\"fileBody\">\r\n\t    \t<div id=\"fileContent\">\r\n\t    \t");
      out.print(htmlString==null?"":htmlString);
      out.write("\r\n\t    \t</div>\r\n\t    \t<div id=\"fileButtons\">\r\n\t    \t   <div class=\"fileButton\" onclick=\"hiddenFileBody()\" style=\"background: #efefef; color: #000;\">关闭</div>\r\n\t    \t</div>\r\n\t    </div>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
