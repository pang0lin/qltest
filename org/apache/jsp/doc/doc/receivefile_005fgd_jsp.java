/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:06:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.doc.doc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.js.util.util.Word2PDF;
import com.js.util.util.Html2Word;
import com.js.oa.rws.service.TongBuService;
import com.js.util.config.SystemCommon;

public final class receivefile_005fgd_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.util.config.SystemCommon");
    _jspx_imports_classes.add("com.js.util.util.Html2Word");
    _jspx_imports_classes.add("com.js.oa.rws.service.TongBuService");
    _jspx_imports_classes.add("com.js.util.util.Word2PDF");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n<html>\r\n<head>\r\n<title>\r\nreceivefile_gd\r\n</title>\r\n</head>\r\n<body bgcolor=\"#ffffff\">\r\n");

request.setCharacterEncoding("GBK");
if(request.getParameter("gd") != null){
    String pageContent = request.getParameter("pageContent").replace("gd(){", "guidang(){");
    pageContent = pageContent.replace("id=popToolbar", "id=popToolbar style='display:none'").replace("id=panleAll", "id=panleAll style='display:none'");
    /*
    int fp = pageContent.indexOf("<SCRIPT language=javascript>");
    int ep = pageContent.indexOf("</SCRIPT>", fp);
    pageContent = pageContent.substring(0, fp) + pageContent.substring(ep + 9);
   
    if(pageContent.indexOf("gd();") >= 0){
        int tmp = pageContent.indexOf("gd();");
        pageContent = pageContent.substring(0, tmp) + pageContent.substring(tmp + 5);
    }*/
    
    //去除归档按钮
	/*int pos=pageContent.indexOf("cmdbutton.jsp?button=");
	
	String s1=pageContent.substring(0,pos+21)+"Close\">";
	
	int gdedd=pageContent.indexOf("</SCRIPT>");
	if(gdedd==-1){
	   gdedd=pageContent.indexOf("</script>");
	}
	
	String s2=pageContent.substring(gdedd,pos);
	
	pageContent=s1+s2;	*/
	
	//System.out.println(pageContent.indexOf("gd(){"));
    pageContent = pageContent.replaceAll("gd();", "");
    pageContent = pageContent.replaceAll("id=newSendFile", "id=newSendFile style=\"display:none\"");
    java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyyMMdd");
    String tmp = "GW_" + request.getParameter("fileId") + "_" + format.format(new java.util.Date()) + ".htm";
    String path = getServletConfig().getServletContext().getRealPath("/") + "archivesfile\\";
    String fileName = path + tmp;
    String returnValue = new com.js.oa.archives.service.ArchivesBD().archivesPigeonholeSet("GWGL",session.getAttribute("domainId")==null?"-1":session.getAttribute("domainId").toString());

    String createdEmp = request.getParameter("createdEmp");
    java.util.HashMap hmap = new com.js.doc.doc.service.SendFileBD().getUserOrg(createdEmp);
    String createdOrg = hmap==null?"":hmap.get("orgId").toString();
    new com.js.oa.archives.action.ArchivesAction().addArchivesWaitPigeonhole(request.getParameter("fileTitle"),tmp,Long.valueOf(request.getParameter("fileId")),"GWGL",session.getAttribute("userName").toString(), new java.util.Date(), returnValue, request, createdEmp, createdOrg,"SWGL");
    java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream(fileName));
    StringBuffer content = new StringBuffer("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
    content.append("<html><head><meta charset=\"GB2312\"/><title>收文归档</title>");
    content.append("<SCRIPT language=javascript src=\"/jsoa/js/toolbar/standardModi.js\"></SCRIPT>");
    content.append("<SCRIPT language=javascript src=\"/jsoa/js/toolbar/govsendfileModi.js\"></SCRIPT>");
    content.append("<SCRIPT language=javascript src=\"/jsoa/js/clsPullXMenu.js\"></SCRIPT>");
    content.append("</head>");
    content.append("<body leftmargin=0 topmargin=0 onload=\"loadToolbar('commandBar');\">");
    content.append(pageContent.replace("gd();////",""));
    content.append("</body></html>");
    pw.println(content.toString());
    pw.close();
     //至此文件已经生成，判断如果是人卫社的话则进行文件的归档操作。
    if("rws".equals(SystemCommon.getCustomerName())){
      new TongBuService().tongbuForReceiveDoc(request.getParameter("fileId"), fileName,session.getAttribute("userId").toString());
    }
  	/*//将html代码转化成word
    Html2Word h2w = new Html2Word();
    h2w.html2Word(path, tmp.replace(".htm" , ".doc"), content.toString());
    //将转化的word转成pdf
    Word2PDF w2p = new Word2PDF();
    w2p.word2Pdf(path+tmp.replace(".htm" , ".doc"));*/

      out.write("\r\n\t<script language=\"javascript\">\r\n\t");
if(!"rws".equals(SystemCommon.getCustomerName())){
      out.write("\t\r\n\t\talert(\"归档成功！\");\r\n\t\tparent.window.close();\r\n\t\tparent.opener.location.reload(); \r\n\t");
}
      out.write("\r\n    </script>\r\n");

}else{
      out.write("\r\n<iframe id=\"gd\" src=\"");
      out.print(request.getAttribute("myhref") + "&gd=1");
      out.write("\"></iframe>\r\n");
}
      out.write("\r\n</body>\r\n</html>\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
