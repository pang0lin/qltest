/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:38:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;

public final class fileShow_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


public String getTxtType(File file){
	String code="GBK";
	try {
        InputStream in= new java.io.FileInputStream(file);
        byte[] b = new byte[3];
		in.read(b);
        in.close();
        if (b[0] == -17 && b[1] == -69 && b[2] == -65){
            //System.out.println(file.getName() + "：编码为UTF-8");
            code = "utf-8";
        }else{
            //System.out.println(file.getName() + "：可能是GBK，也可能是其他编码");
        }
	} catch (IOException e) {
		e.printStackTrace();
	}
	return code;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n<html>\r\n  <head>\r\n    <title>查看文件</title> \r\n  </head>  \r\n  <body>\r\n  ");
      out.write("\r\n  ");

  	Map<String,String> contentType = com.js.util.config.SystemCommon.getContentType();
    String queryString=request.getQueryString();
  	String[] fileNames = com.js.util.util.BASE64.BASE64DecoderNoBR(queryString).split("&");
    String file=this.getServletContext().getRealPath("/")+"upload\\"+fileNames[0];
    String prefix = file.substring(file.lastIndexOf(".")).toLowerCase();
    //System.out.println("--"+file+"   "+fileNames[1]+"  "+contentType.get(prefix));
    java.io.File f=new java.io.File(file);
    String header = "inline";
    String encoded = "utf-8";
    if(f.exists()&&f.isFile()){
        FileInputStream fin=new FileInputStream(f);
        OutputStream output=response.getOutputStream();
        String name=new String(fileNames[1].getBytes("GBK"),"iso-8859-1"); 
        if(contentType.get(prefix)!= null){
        	if(".txt".equals(prefix)||".xml".equals(prefix)) encoded = getTxtType(f);
        	response.setContentType(contentType.get(prefix)+";charset="+encoded);
        }else{
        	header = "attachment";
        }
        response.setHeader("Content-Disposition",header+"; filename=\"" + name + "\"");
        try{
        	int r=0;
        	while ((r=fin.read()) != -1) {
                output.write(r);
        	}
        	/*byte[] buf=new byte[1024];
            while((r=fin.read(buf,0,buf.length))!=-1){
                output.write(buf,0,r);
            }*/
        }catch(Exception e){
        	e.printStackTrace();
        }
        fin.close();
        output.close();
        out.clear();
        out = pageContext.pushBody();
    }else{
        System.out.println(this.getServletContext().getRealPath("/")+"upload\\"+file+" 文件不存在!");
        
      out.write("\r\n        <script type=\"text/javascript\">\r\n        window.close();\r\n        </script>");

    }
      out.write("\r\n<script type=\"text/javascript\">\r\nwindow.close();\r\n</script>\r\n  </body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
