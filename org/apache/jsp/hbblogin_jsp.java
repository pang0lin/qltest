/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:38:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.util.DataSourceBase;
import java.sql.*;
import java.util.*;

public final class hbblogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/vnd.ms-excel;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

String webapp=request.getContextPath(); 

      out.write('\r');
      out.write('\n');
request.setCharacterEncoding("GBK");
      out.write("\r\n<html>\r\n<meta http-equiv=\"Content-Type\" content=\"application/vnd.ms-excel; charset=GBK\">\r\n");


response.setHeader("Content-disposition","attachment;filename=logList.xls");


      out.write("\r\n<head>\r\n    <title>导出</title>\r\n</head>\r\n<body>\r\n<table border=\"1\">\r\n    <tr>\r\n        <td align=\"center\"><b>流程标题</b></td>\r\n\t\t<td align=\"center\"><b>作者</b></td>\r\n\t\t<td align=\"center\"><b>时间</b></td>\r\n\t\t<td align=\"center\"><b>附件名</b></td>\r\n\t\t<td align=\"center\"><b>链接</b></td>\r\n    </tr>\r\n    ");

	Connection conn=null;
	try{
		String bt,zz,rq,fj,saveNameTemp,fileNameTemp,url;
		String[] saveNameArr,fileNameArr;
		conn=new DataSourceBase().getDataSource().getConnection();
		Statement stmt=conn.createStatement();
		String sql="select max(dataid) from (select JST_3012_F3141 as bt,JST_3012_F3143 as zz,JST_3016_DATe as rq,JST_3012_F3145 as fj,jst_3016_id as dataid from jst_3016 union "
				+" select JST_3012_F3141 as bt,JST_3012_F3143 as zz,JST_3027_DATe as rq,JST_3012_F3145 as fj,jst_3027_id as dataid from jst_3027) where rq>='2016-01-01' and rq<='2016-12-31' and exists" 
				+" (select wf_work_id from jsf_work where workrecord_id=dataid and (workstatus=100 or workstatus=1))";
		long maxDataId=0;
		long preMaxId=0;
		ResultSet rs=stmt.executeQuery(sql);
		if(rs.next()){
			maxDataId=rs.getLong(1);
		}
		rs.close();
		
		while(preMaxId<maxDataId){		
				
			sql="select * from (select JST_3012_F3141 as bt,JST_3012_F3143 as zz,JST_3016_DATe as rq,JST_3012_F3145 as fj,jst_3016_id as dataid from jst_3016 union "
					+" select JST_3012_F3141 as bt,JST_3012_F3143 as zz,JST_3027_DATe as rq,JST_3012_F3145 as fj,jst_3027_id as dataid from jst_3027) where rq>='2016-01-01' and rq<='2016-12-31' and exists" 
					+" (select wf_work_id from jsf_work where workrecord_id=dataid and (workstatus=100 or workstatus=1)) and dataid>"+preMaxId+" order by dataid";
			rs=stmt.executeQuery(sql);
			while(rs.next()){
				bt=rs.getString(1);
				zz=rs.getString(2);
				if(zz!=null && zz.indexOf(";")>0){
					zz=zz.substring(0,zz.indexOf(";"));
				}else{
					zz="";
				}
				rq=rs.getString(3);
				
				fj=rs.getString(4);
				
				preMaxId=rs.getLong(5);
				
				saveNameArr=new String[0];
				fileNameArr=new String[0];
				
				if(fj.indexOf(";")>=0){
	        		saveNameTemp=fj.substring(0,fj.indexOf(";"));
	        		fileNameTemp=fj.substring(fj.indexOf(";")+1);
	        		saveNameArr=saveNameTemp.split(",");
	        		fileNameArr=fileNameTemp.split(",");
	        	}
							
				
				
      out.write("\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>");
      out.print(bt );
      out.write("</td>\r\n\t\t\t\t\t<td>");
      out.print(zz );
      out.write("</td>\r\n\t\t\t\t\t<td>");
      out.print(rq );
      out.write("</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t");

					for(int i=0;i<fileNameArr.length;i++){
      out.write("\r\n\t\t\t\t\t\t");
if(saveNameArr.length>1 && i>0){out.print("<br>");} 
      out.write("\r\n\t\t\t\t\t\t");
      out.print(fileNameArr[i]);
      out.write("\t\t\t\t\t\r\n\t\t\t\t\t\t");

					}
					
      out.write("\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t");

					for(int i=0;i<saveNameArr.length;i++){
						url = "/jsoa/download.jsp?"+com.js.util.util.BASE64.BASE64EncoderNoBR("FileName="+saveNameArr[i]+"&name="+fileNameArr[i]+"&path=customform");
						
      out.write("\r\n\t\t\t\t\t\t");
if(saveNameArr.length>1 && i>0){out.print("<br>");} 
      out.write("\r\n\t\t\t\t\t\t");
      out.print(url);
      out.write("\t\t\t\t\t\r\n\t\t\t\t\t\t");

					}
					
      out.write("\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t");

			}
			rs.close();
		}
		stmt.close();
		conn.close();
	}catch(Exception ex){
		if(conn!=null){
			try{
				conn.close();
			}catch(Exception exx){
				exx.printStackTrace();
			}
		}
	}
    
      out.write("\r\n    \r\n</table>\r\n</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
