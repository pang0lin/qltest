/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:46:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wap2.scheme;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.js.oa.scheme.event.po.EventPO;
import com.js.wap.util.WapUtil;
import java.text.*;
import com.js.wap.util.DateTools;

public final class schemeList_005f3g_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.wap.util.WapUtil");
    _jspx_imports_classes.add("com.js.wap.util.DateTools");
    _jspx_imports_classes.add("com.js.oa.scheme.event.po.EventPO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"DTD/xhtml1-strict.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
 
	request.setCharacterEncoding("UTF-8");
	String path = request.getContextPath();
	String schListStr = "";
	String schCountStr = "";
	String timingString="0";
	String userId=session.getAttribute("userId").toString();
	String scheUser = request.getParameter("schUser");
	String title = "";
	if ("mine".equals(scheUser)) {
		schListStr = "mySchList";
		schCountStr = "mySchCount";
		title = "我的日程";
	} else if ("other".equals(scheUser)) {
		schListStr = "otherSchList";
		schCountStr = "otherSchCount";
		title = "下属日程";
	} else {}
	
	List<EventPO> schList = (List<EventPO>) request	.getAttribute(schListStr);
	int schCount = request.getAttribute(schCountStr)==null?0:(Integer)request.getAttribute(schCountStr);
	Long date = null;
	Integer time = 0;
	String empName = "";
	String schTitle = "";
	int length = 0;
	int beginIndex = Integer.parseInt(request.getParameter("beginIndex") == null ? "0" : request.getParameter("beginIndex"));

      out.write("\r\n<HTML xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<HEAD>\r\n<TITLE>");
      out.print(title );
      out.write("-移动办公系统</TITLE>\r\n<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n<META name=apple-touch-fullscreen content=YES>\r\n<META name=apple-mobile-web-app-capable content=no>\r\n<LINK rel=apple-touch-icon href=\"");
      out.print(path);
      out.write("/wap2/images/iphone.jpg\">\r\n<LINK rel=stylesheet type=text/css href=\"");
      out.print(path);
      out.write("/wap2/css/main_3g.css\">\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/cookie.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/util.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/frost.js\"></SCRIPT>\r\n<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n<SCRIPT language=JavaScript>\r\n<!--\r\nfunction gotoPage(url, flag){\r\n    if(flag){\r\n        location.href=encodeURI(url);\r\n    }\r\n}\r\n//-->\r\n</SCRIPT>\r\n</HEAD>\r\n<body>\r\n   <DIV id=dd class=main>\r\n       <DIV id=top>\r\n       ");
if("mine".equals(scheUser)){ 
      out.write("\r\n           <SPAN id=lp><DIV class=btn_2><A href=\"");
      out.print(path);
      out.write("/wap/action/WapSchemeAction.do?method=wapSchList\">日程</A></DIV></SPAN>\r\n           <SPAN id=title>我的日程</SPAN>\r\n           <A class=btn_1 href=\"");
      out.print(path);
      out.write("/wap/action/WapSchemeAction.do?method=goWriteWapSch\">写日程</A>\r\n           ");
}else{ 
      out.write("\r\n           <SPAN id=lp><DIV class=btn_2><A href=\"");
      out.print(path);
      out.write("/wap2/index_3g.jsp\">桌面</A></DIV></SPAN>\r\n           <SPAN id=title>下属日程</SPAN>\r\n           <A class=btn_1 href=\"");
      out.print(path);
      out.write("/wap/action/WapSchemeAction.do?method=wapSchList\">返回</A>\r\n           ");
} 
      out.write("\r\n       </DIV>\r\n       <DIV class=height2></DIV> \r\n<div>\r\n");
	if(schList != null && schList.size() > 0) {
			EventPO event = null;
			for (int i = 0; i < schList.size(); i++) {
				event = schList.get(i);
				date = event.getEventBeginDate();
				String dateTimeString="";
				
				if(date==null){
					timingString="1";
					dateTimeString=event.getEchoBeginTime()+"";
					Long a=Long.parseLong(event.getEventBeginTime()+"");
					Long b=Long.parseLong(event.getEventEndTime()+"");
					dateTimeString=dateTimeString.substring(0, 10)+"  "+
							new SimpleDateFormat("HH:mm").format(new Date(a))
					+"~"+new SimpleDateFormat("HH:mm").format(new Date(b));
				}
				
				time = event.getEventBeginTime();
				time = time == null ? 0 : time * 1000;
				empName = "mine".equals(scheUser) ? "" : event.getEventEmpName() + ":";
				
				String can = "0";
				if("mine".equals(scheUser)&&event.getEventEmpId()!=null&&userId.equals(event.getEventEmpId().toString())){
						can="1";
				}
				if(date==null){
					can="0";
				}
				schTitle = event.getEventTitle();
				length = schTitle.length();
				schTitle = length > 10 ? schTitle.substring(0, 10) + "..." : schTitle;
	
      out.write("\r\n\t <DIV class=lista1>\r\n         <DIV class=l1>\r\n            <A class=listing href=\"");
      out.print(path);
      out.write("/wap/action/WapSchemeAction.do?method=wapReadSchInfo&amp;beginIndex=");
      out.print(beginIndex );
      out.write("&amp;can=");
      out.print(can );
      out.write("&amp;timingString=");
      out.print(timingString );
      out.write("&amp;eventId=");
      out.print(event.getEventId());
      out.write("\">\r\n            ");
      out.print(empName + schTitle);
      out.write("</A>\r\n         </DIV>\r\n         ");
if(date==null){ 
      out.write("\r\n         <SPAN>");
      out.print(dateTimeString);
      out.write("&nbsp;&nbsp;&nbsp;&nbsp;</SPAN>\r\n         ");
}else{
      out.write("\r\n            <SPAN>");
      out.print(DateTools.getMDHM(date + time) );
      out.write("&nbsp;&nbsp;&nbsp;&nbsp;</SPAN>\r\n         ");
} 
      out.write("\r\n       </DIV>\r\n\t");

				date = null;
				time = 0;
				title = "";
				length = 0;
				empName = "";
			}
		}
      out.write("\r\n</div>\r\n");

		int nextNum = (beginIndex / WapUtil.LIMITED) + 1;
		int nextIndex = nextNum * WapUtil.LIMITED;

		int upNum = (beginIndex / WapUtil.LIMITED) - 1;
		int upIndex = upNum * WapUtil.LIMITED;
		String upUrl = "#", nextUrl = "#";

		if (schCount > WapUtil.LIMITED) {
			if (upIndex >= 0)
				upUrl = path + "/wap/action/WapSchemeAction.do?method=getWapSchList&amp;beginIndex=" + upIndex + "&amp;schUser=" + scheUser;
			if (nextIndex < schCount)
				nextUrl = path + "/wap/action/WapSchemeAction.do?method=getWapSchList&amp;beginIndex=" + nextIndex + "&amp;schUser=" + scheUser;
			
      out.write("\r\n       <DIV class=page>\r\n       ");
if(upUrl.indexOf("#")<0){
      out.write("\r\n       <INPUT class=btn_4 onclick=\"gotoPage('");
      out.print(upUrl );
      out.write("',true);\" value=上一页 type=submit name=prev>\r\n       ");
}if(nextUrl.indexOf("#")<0){ 
      out.write(" \r\n       <INPUT class=btn_4 onclick=\"gotoPage('");
      out.print(nextUrl );
      out.write("',true);\" value=下一页 type=submit name=next>\r\n       ");
}
      out.write("\r\n       </DIV>\r\n\t");
} 
      out.write("\r\n</div>\r\n</body>\r\n</html>\r\n\r\n\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
