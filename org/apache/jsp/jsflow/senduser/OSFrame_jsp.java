/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:08:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsflow.senduser;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class OSFrame_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

	String condition=request.getParameter("condition");//选择限制条件
	String allowName=request.getParameter("allowName");//form表单元素，展示文本框值
	String allowId=request.getParameter("allowId");//form表单隐含域元素
	String personSingle=request.getParameter("personSingle");//人员单选，复选
	String orgSingle=request.getParameter("orgSingle");//组织单选，复选
	String display=request.getParameter("display");//是否显示部门、组、个人、公共选项
	String type=request.getParameter("type");//部门、个人、公共
	String range=request.getParameter("range");//权限显示范围针对组织结构有效,*0*表示全部
	String show=request.getParameter("show");

	String selectedId=request.getParameter("selectedId");
	String selectedName=request.getParameter("selectedName");
	
	String orgId=request.getSession().getAttribute("orgId").toString();//
	String orgName=request.getSession().getAttribute("orgName").toString();
	
	String func=(String)request.getParameter("func");//执行父页面函数名
	
	personSingle="no";  
	orgSingle="no";
     String inputTypeTemp="notAllow";
     if(personSingle.equals("yes")){
     	inputTypeTemp="yes";
     }if(personSingle.equals("no")){
     	inputTypeTemp="no";
     }
       

	String path="/jsoa/jsflow/selectuser/OrgTree.jsp?&formAttr1="+allowId+"&orgInputType="+orgSingle+"&condition="+condition+"&type="+type+"&range="+range+"&single="+inputTypeTemp;//
    String path1="/jsoa/selectObj.do?method=getOrgUserList&allowId="+allowId+"&type="+type+"&orgInputType="+orgSingle+"&inputType="+inputTypeTemp+"&condition="+condition+"&orgName="+orgName+"&orgId="+orgId;

    /**
     * 取得下一节点的类型,得到下一结点默认的选择用户的方式，根据不同的选择方式显示不同的选择框（各帧中设置不同的链接以及各帧的显示大小）
     * 在top帧里列出当前节点的所有下级节点,默认选中默认的节点
     * 选择不同的节点后刷新页面显示不同的选择框
     */

  //流程类型(业务流程1，随机流程0)
    String processType = request.getParameter("processType");

    //参数信息
    String firstAct = request.getParameter("type");//是否开始节点 type
    String submitPersonId = request.getParameter("submitPersonId");
    String moduleId = request.getParameter("moduleId");
    String processId = request.getParameter("processId");
    String tableId = request.getParameter("tableId");
    String recordId = request.getParameter("recordId");
    String curActivityId = request.getParameter("activityId");//当前节点
    String activityId = "0";//用户选择的节点后继
    String msgFrom = request.getParameter("msgFrom");

    String standForUserId = request.getParameter("standForUserId");//代办人ID
    String standForUserName = request.getParameter("standForUserName");//代办人
    String tranFromPersonId = request.getParameter("tranFromPersonId");//转办人


    com.js.oa.jsflow.service.WorkFlowBD workFlowBD = new com.js.oa.jsflow.service.WorkFlowBD();
    com.js.oa.jsflow.service.WorkFlowButtonBD workFlowButtonBD = new com.js.oa.jsflow.service.WorkFlowButtonBD();

    //下一节点的选择类型（用户决定还是流程决定）
    String stepType = workFlowBD.getActivityType(curActivityId,tableId,recordId);

    //默认选择用户
    java.util.List selectUser = new java.util.ArrayList();

    //表单字段参数
    String participantUserField = "";//表单中的某个字段名

    //显示短信
    boolean showSmsRemind = false;
    java.util.Map include_sysMap = com.js.system.util.SysSetupReader.getInstance().getSysSetupMap(session.getAttribute("domainId").toString());

    
    

  //后继节点
  com.js.oa.jsflow.vo.ActivityVO activityVO = null;
  java.util.List activityList = new java.util.ArrayList();
  if(!"0".equals(processType)){

	  if("getFirstActivity".equals(firstAct)){
	  	/*开始节点*/
	  	activityVO = new com.js.oa.jsflow.util.WorkflowCommon().getFirstActivity(request);
	
	  	if(!"0".equals(request.getParameter("processType")) && (activityVO==null || activityVO.getId() == 0)){
	  	
      out.write("\r\n\t\t  \t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\t\t  \t<!--\r\n\t\t  \talert(\"未设置开始节点，请与管理员联系！\");\r\n\t\t  \twindow.close();\r\n\t\t  \t//-->\r\n\t\t  \t</SCRIPT>\r\n\t  \t");

	  	}
	
	  	/*显示默认的候选人*/
	
	  	if(activityVO != null && activityVO.getId() != 0){
	
		  	//短信1
		  	if(showSmsRemind){
		  		showSmsRemind = activityVO.getAllowSmsRemind().equals("1")?true:false;
		  	}
		
		  	//参与人类型
		  	int participantType = activityVO.getParticipantType();
		
		  	//开始节点是虚拟节点
		  	if(activityVO.getActivityClass() == 2){
		  		java.util.List list = workFlowBD.getFirstNextActi(activityVO.getId()+"");
		  		if(list.size()>0){
		  			String[] tmp =  (String[])list.get(0);
		
		  			//判断条件不是同一个字段的问题
		  			boolean identicalField = true;
		  			if(list.size()>1){
		  				String[] temp1 = tmp;
		  				for(int l=1;l<list.size();l++){
		  					String[] temp2 =  (String[])list.get(l);
		  					if(!temp2[1].equals(temp1[1])){
		  						identicalField = false;
		  						break;
		  					}
		  					temp1 =  (String[])list.get(l);
		  				}
		  			}
		
		  			//1000092-zjky$f2045
		  			participantUserField = tmp[1];//1000092
		  			participantUserField = workFlowButtonBD.getFieldInfoByFieldId(participantUserField);//zjky$f2045
		  			participantUserField = tmp[1] + "-" + participantUserField;
		  			
		  			//判断是否有符合的后继
		  			activityVO = new com.js.oa.jsflow.util.WorkflowCommon().getFirstActivity(request);
		  			if(!identicalField || activityVO==null){
		  			
      out.write("\r\n\t\t\t  \t\t\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\t\t\t  \t\t\t<!--\r\n\t\t\t  \t\t\talert(\"没有符合条件的后继活动！\");\r\n\t\t\t  \t\t\twindow.close();\r\n\t\t\t  \t\t\t//-->\r\n\t\t\t  \t\t\t</SCRIPT>\r\n\t\t  \t\t\t");

		  			}
		  		}
		  	}
		  	
		  	//由表单字段指定
		  	if(participantType == 4){
		  		String tmp = activityVO.getParticipantUserField();
		  		participantUserField = workFlowButtonBD.getFieldInfoByFieldId(tmp);//zjky$f2045
		  		participantUserField = tmp + "-" + participantUserField;
		  	}
	    }
	  } else{
	      /*中间节点*/
	  	if(stepType.equals("1")){
	  		//用户决定走向
	  		activityList = workFlowBD.getAllNextActivity(tableId, recordId, curActivityId);
	  		if(activityList.size()==0){
	  		
      out.write("\r\n\t  \t\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\t  \t\t<!--\r\n\t  \t\talert(\"没有设置后继活动！\");\r\n\t  \t\twindow.close();\r\n\t  \t\t//-->\r\n\t  \t\t</SCRIPT>\r\n\t  \t\t");

	  		}
	  	} else{
	  		//流程决定走向
	  		activityVO = new com.js.oa.jsflow.util.ProcessStep().getProceedNextActi(curActivityId, tableId, recordId, request);
	  		if(activityVO==null){
	  		
      out.write("\r\n\t  \t\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\t  \t\t<!--\r\n\t  \t\talert(\"没有符合条件的后继活动！\");\r\n\t  \t\twindow.close();\r\n\t  \t\t//-->\r\n\t  \t\t</SCRIPT>\r\n\t  \t\t");

	  		} else{
	  		activityVO.setBeginEnd(activityVO.getActivityBeginEnd());
	  		activityList.add(activityVO);
	  		}
	  	}
	  }/** end 中间节点*/
	  
  }


      out.write("\r\n<HTML>\r\n\t<HEAD>\r\n\t\t<TITLE>办理</TITLE>\r\n\t\t<META http-equiv=Content-Type content=\"text/html; charset=GBK\">\r\n\t</HEAD>\r\n<frameset rows=\"140,10\" frameborder=\"NO\" border=\"0\" framespacing=\"0\">\r\n    <frameset  rows=\"45,*\" frameborder=\"NO\" border=\"0\" framespacing=\"0\">\r\n         <frame src=\"/jsoa/jsflow/selectuser/topType.jsp?orgInputType=");
      out.print(orgSingle);
      out.write("&type=");
      out.print(type);
      out.write("&condition=");
      out.print(condition);
      out.write("&display=");
      out.print(display);
      out.write("&inputType=");
      out.print(inputTypeTemp);
      out.write("&formAttr1=");
      out.print(allowId);
      out.write("&formAttr=");
      out.print(allowName);
      out.write("&range=");
      out.print(range);
      out.write("\" name=\"topFrame\" scrolling=\"no\">\r\n         <frameset name=\"info\" cols=\"235,*\" frameborder=\"no\" border=\"0\" framespacing=\"0\">\r\n\t\t      ");
if(orgSingle.indexOf("only")>=0){
      out.write("\r\n\t\t       <frame src=\"");
      out.print(path );
      out.write("\" name=\"leftTopFrame\" scrolling=\"no\" noresize=\"noresize\"/>\r\n\t\t       <frameset cols=\"0,*\" framespacing=\"0\" frameborder=\"no\" border=\"0\">\r\n\t\t\t       <frame src=\"/jsoa/jsflow/selectuser/rightTop.jsp\" name=\"rightTopFrame\" scrolling=\"no\" noresize=\"noresize\"/>\r\n\t\t\t       <frame src=\"/jsoa/jsflow/selectuser/rightType.jsp?inputType=");
      out.print(personSingle);
      out.write("&orgInputType=");
      out.print(orgSingle);
      out.write("&formAttr=");
      out.print(allowName);
      out.write("&formAttr1=");
      out.print(allowId);
      out.write("&show=");
      out.print(show);
      out.write("\" name=\"rightFrame\" scrolling=\"no\" />\r\n\t\t       </frameset>\r\n\t\t\t  ");
}else{
      out.write("\r\n\t\t\t   <frameset rows=\"0,*\" framespacing=\"0\" frameborder=\"no\" border=\"0\">\r\n\t\t\t      <frame src=\"");
      out.print(path);
      out.write("\" name=\"leftTopFrame\" scrolling=\"no\" noresize=\"noresize\"/>\r\n\t\t\t      <frame src=");
      out.print(path1);
      out.write(" name=\"leftBottonFrame\"  scrolling=\"no\"/>\r\n\t\t\t   </frameset>\r\n\t\t\t   <frame src=\"/jsoa/jsflow/selectuser/rightType.jsp?inputType=");
      out.print(personSingle);
      out.write("&orgInputType=");
      out.print(orgSingle);
      out.write("&formAttr=");
      out.print(allowName);
      out.write("&formAttr1=");
      out.print(allowId);
      out.write("&show=");
      out.print(show);
      out.write("\" name=\"rightFrame\" scrolling=\"no\" />\r\n\t\t\t  ");
} 
      out.write("\r\n\r\n         </frameset>\r\n    </frameset>\r\n   \r\n    <frame src=\"/jsoa/jsflow/selectuser/botton.jsp?func=");
      out.print(func);
      out.write("&condition=");
      out.print(condition);
      out.write("&formAttr=");
      out.print(allowName);
      out.write("&formAttr1=");
      out.print(allowId);
      out.write("&show=");
      out.print(show);
      out.write("\" name=\"bottonFrame\" scrolling=\"no\" noresize=\"noresize\"/>\r\n</frameset>\r\n</HTML>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
