/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:45:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wap2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class wapSelectUsers_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n<!DOCTYPE HTML>\r\n<html>\r\n\t<head>\r\n\t\t<script type=\"text/javascript\">\r\n\t\t// 加载子级项\r\n\t\tfunction loadItems(parentId, ids){\r\n\t\t\tvar html = $(\"#\" + parentId).html();\r\n\t\t\tif(\"\"==html){\r\n\t\t\t\t$(\"#\" + parentId).html(\"数据加载中...\");\r\n\t\t\t\t$.post(\"/jsoa/wap/action/WapCommonAction.do?action=selectUser\", {\r\n\t\t\t\t\tparentId : parentId,\r\n\t\t\t\t\tids : ids\r\n\t\t\t\t}, function(returnHTML){\r\n\t\t\t\t\t$(\"#\" + parentId).html(returnHTML);\r\n\r\n\t\t\t\t\tvar userIds = $(\"#\" + ids).val();\t// 已选择人员的ID\r\n\t\t\t\t\t\r\n\t\t\t\t\t// 已选择人员不为空时，遍历人员input，将已选择的人员选中\r\n\t\t\t\t\tif(null!=userIds && \"\"!=userIds){\r\n\t\t\t\t\t\tvar ins = $(\"input[name='users']\");\r\n\t\t\t\t\t\tvar id;\r\n\t\t\t\t\t\tuserIds = \",\" + userIds + \",\";\r\n\t\t\t\t\t\tfor(var i=0; i<ins.length; i++){\r\n\t\t\t\t\t\t\tid = ins[i].id.split(\"_\")[1];\r\n\t\t\t\t\t\t\tif(userIds.indexOf(\",\" + id + \",\") >= 0){\r\n\t\t\t\t\t\t\t\tins[i].checked = \"checked\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}, \"text\");\r\n\t\t\t}\r\n\t\t\t// 显示选择列表\r\n\t\t\tif(\"orgUserList\" != parentId){\r\n\t\t\t\t$(\"#\" + parentId).toggle();\r\n\t\t\t\tvar spanId = parentId.split(\"_\")[1];\r\n\t\t\t\tvar si = $(\"#span_\" + spanId).html();\r\n");
      out.write("\t\t\t\tif(\"+\" == si) $(\"#span_\" + spanId).html(\"-\");\r\n\t\t\t\telse $(\"#span_\" + spanId).html(\"+\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// 获取选择项的值\r\n  \t\tfunction getSelectUsers(ids, names){\r\n  \t\t\tvar ins = $(\"input[name='users']\");\r\n\t\t\tvar selIds = \"\", selNames = \"\";\r\n\r\n\t\t\tfor(var i=0; i<ins.length; i++){\r\n\t\t\t\tif(ins[i].checked){\r\n\t\t\t\t\tselIds += ins[i].id.split(\"_\")[1] + \",\";\r\n\t\t\t\t\tselNames += ins[i].value + \",\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 把取到的字符串赋值给页面控件\r\n\t\t\t$(\"#\" + ids).val(selIds);\r\n\t\t\t$(\"#\" + names).val(selNames);\r\n  \t\t}\r\n  \t\t// 清空选择项\r\n  \t\tfunction clearSel(ids, names){\r\n  \t\t\tvar ins = $(\"input[name='users']\");\r\n  \t\t\tfor(var i=0; i<ins.length; i++){\r\n\t\t\t\tins[i].checked = \"\";\r\n\t\t\t}\r\n  \t\t\t// 控件的值清空\r\n\t\t\t$(\"#\" + ids).val(\"\");\r\n\t\t\t$(\"#\" + names).val(\"\");\r\n  \t\t}\r\n\t\t</script>\r\n\t\t<style type=\"text/css\">\r\n\t\ta:hover {\r\n\t\t\ttext-decoration: none;\r\n\t\t}\r\n\t\t#orgUserList .listHead {\r\n\t\t\tfont-size: 14px;\r\n\t\t\tpadding: 5px 20px;\r\n\t\t\ttext-align: left;\r\n\t\t\tborder-bottom: 1px solid #ccc;\r\n\t\t}\r\n\t\t#orgUserList .children {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\t\t#orgUserList .item {\r\n");
      out.write("\t\t\tpadding: 5px 0 5px 20px;\r\n\t\t\tline-height: 100%;\r\n\t\t}\r\n\t\t#orgUserList .userItem {\r\n\t\t\tpadding: 0 0 0 20px;\r\n\t\t\tline-height: 100%;\r\n\t\t}\r\n\t\t#orgUserList .item span {\r\n\t\t\tmargin: 0 6px;\r\n\t\t}\r\n\t\t.underline {\r\n\t\t\tborder-bottom: 1px solid #ccc;\r\n\t\t}\r\n\t\t#orgUserList .item input {\r\n\t\t\twidth: 13px;\r\n\t\t\theight: 13px;\r\n\t\t}\r\n\t\t#orgUserFooter {\r\n\t\t\theight: 40px;\r\n\t\t\ttext-align: center;\r\n\t\t\twhite-space: nowrap;\r\n\t\t\tdisplay: flex;\r\n\t\t\tdispaly: -webkit-flex;\r\n\t\t\tdisplay: -webkit-box;\r\n\t\t\tmargin: 20px auto 0;\r\n\t\t}\r\n\t\t#orgUserFooter div {\r\n\t\t\tbackground: #DFDFDF;\r\n\t\t\ttext-align: center;\r\n\t\t\twidth: 60px;\r\n\t\t\tborder: 1px solid #707070;\r\n\t\t\theight: 26px;\r\n\t\t\tline-height: 26px;\r\n\t\t\tcolor: #333;\r\n\t\t\tfont-size: 16px;\r\n\t\t\tfont-weight: normal;\r\n\t\t\tfont-family: \"宋体\";\r\n\t\t}\r\n\t\t</style>\r\n\t</head>\r\n\r\n\t<body>\r\n\t\t<div id=\"orgUserList\" style=\"overflow: auto;\"></div>\r\n\t</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
