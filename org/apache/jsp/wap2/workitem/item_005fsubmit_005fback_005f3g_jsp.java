/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:46:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wap2.workitem;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.SQLException;
import com.js.oa.jsflow.vo.WorkLogVO;
import com.js.oa.jsflow.service.WorkFlowCommonBD;
import com.js.oa.jsflow.service.*;
import com.js.oa.routine.resource.service.IntoOutStockBD;

public final class item_005fsubmit_005fback_005f3g_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {



//根据组织取所有用户
public String getUserByOrg(String orgIdStr) {
    String orgIds = "";
    if (orgIdStr == null || orgIdStr.length() < 1) {
        return orgIds;
    }
    String[] orgIdArr = orgIdStr.split(",");
    com.js.oa.userdb.util.DbOpt dbopt = null;
    java.sql.ResultSet rs = null;
    try {
        dbopt = new com.js.oa.userdb.util.DbOpt();

        for (int i = 0; i < orgIdArr.length; i++) {
            String orgCode = dbopt.executeQueryToStr(
                    "select ORGIDSTRING from ORG_ORGANIZATION where ORG_ID=" +
                    orgIdArr[i]);
            rs = dbopt.executeQuery("select EMP_ID from ORG_ORGANIZATION_USER where ORG_ID in (select ORG_ID from ORG_ORGANIZATION where ORGIDSTRING like '%" +
                                    orgCode + "%')");
            if (rs != null) {
                while (rs.next()) {
                    Object empId = rs.getObject(1);
                    if (empId != null &&
                        orgIds.indexOf(empId.toString()) < 0) {
                        orgIds += empId.toString() + ",";
                    }
                }
                rs.close();
            }
        }

        dbopt.close();
    } catch (Exception e) {
    	  try {
            dbopt.close();
        } catch (SQLException ex) {
        }
    } finally {
        
        return orgIds;
    }
}
//更新档案借阅申请信息
public void dealWithModule_12(String recordId){
   com.js.oa.archives.service.ArchivesBD archivesBD = new com.js.oa.archives.service.ArchivesBD();
   Long borrowId = Long.valueOf(recordId);
   archivesBD.untreadBorrowAuditingFile(borrowId);
}
//更新会议室借阅申请信息
public void dealWithModule_15(String recordId){
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        stmt.executeUpdate("update OA_BOARDROOMAPPLY set STATUS=3 where BOARDROOMAPPLYID="+recordId);
        stmt.executeQuery("delete from OA_BOARDROOM_MEETINGTIME where applyid="+recordId+"");
        stmt.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
}
//更新设备申请信息
public void dealWithModule_14(String recordId){
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        stmt.executeUpdate("update OA_EQUIPMENTAPPLY set STATUS=3 where EQUIPMENTAPPLYID="+recordId);
        stmt.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
}
//处理入库退货流程
public void dealWithModule_13_rk(String recordId,String userId,String userName){
    IntoOutStockBD bd = new IntoOutStockBD();
    bd.updateIntoStockCheck(recordId,"B");
}
//处理出库退库流程
public void dealWithModule_13_ck(String recordId,String userId,String userName){
    IntoOutStockBD bd = new IntoOutStockBD();
    bd.updateOutStockCheck(recordId,"B");
}



/**
 * 根据组ID取所有用户
 * @param groupIdStr String
 * @return String
 */
public String getUserByGroup(String groupIdStr) {
    String userStr = "";
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.
                                              DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        java.sql.ResultSet rs = stmt.executeQuery(
                "SELECT DISTINCT EMP_ID FROM ORG_USER_GROUP WHERE GROUP_ID IN (" +
                groupIdStr + ")");
        while (rs.next()) {
            userStr += rs.getString(1) + ",";
        }
        if (userStr.endsWith(",")) {
            userStr = userStr.substring(0, userStr.length() - 1);
        }
        rs.close();
        stmt.close();
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
    return userStr;
}

private String userIdStringToArray(String userId){
	userId=userId.substring(1,userId.length()-1);
	userId=userId.replaceAll("\\$\\$", ","); 
	return userId;
}
/**
 * 取办理节点
 * @param groupIdStr String
 * @return String
 */
public String getWorkTitle(String processId,String recordId,String tableId) {
    int module = 1;
    String workTitle="";
    com.js.util.util.DataSourceBase dsb = new com.js.util.util.DataSourceBase();
    javax.sql.DataSource ds = dsb.getDataSource();
    java.sql.Connection conn = null;
    java.sql.Statement stmt = null;
    try {
        conn = ds.getConnection();
        stmt = conn.createStatement();
        String sql="select wf_module_id from jsf_workflowprocess wp left join jsf_package pk on wp.wf_package_id=pk.wf_package_id where wp.wf_workflowprocess_id="+processId;
        java.sql.ResultSet rs = stmt.executeQuery(sql);
        if (rs.next()) {
            module=rs.getInt(1);
        }        
        rs.close();
        
        if(module==2){
        	//发文
        	sql="select documentsendfile_title from doc_documentsendfile where documentsendfile_id="+recordId;
        	rs=stmt.executeQuery(sql);
        	if(rs.next()){
        		workTitle=rs.getString(1);
        	}
        	rs.close();

        }else if(module==3){
        	//收文
        	sql="select receivefile_title from doc_receivefile where receivefile_id="+recordId;
        	rs=stmt.executeQuery(sql);
        	if(rs.next()){
        		workTitle=rs.getString(1);
        	}
        	rs.close();
        }
        stmt.close();
        
    } catch (java.sql.SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            conn.close();
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
    }
    return workTitle;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.js.oa.jsflow.service");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.routine.resource.service.IntoOutStockBD");
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowCommonBD");
    _jspx_imports_classes.add("com.js.oa.jsflow.vo.WorkLogVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"DTD/xhtml1-strict.dtd\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
      out.write("\r\n\r\n");
 
request.setCharacterEncoding("UTF-8");

String type=request.getParameter("type");
String app=request.getContextPath();
WorkFlowCommonBD workFlowCommonBD = new WorkFlowCommonBD();
WorkFlowButtonBD workFlowButtonBD = new WorkFlowButtonBD();

String userId = session.getAttribute("userId").toString();//当前用户ID
String userName=session.getAttribute("userName").toString();//当前用户ID
String orgId = session.getAttribute("orgId").toString();//当前用户部门ID

String comment = request.getParameter("include_comment");//办理意见
String curActivityId = request.getParameter("curActivityId");//当前节点ID
String curActivityName = request.getParameter("curActivityName");
String processId=request.getParameter("processId");
String processName=request.getParameter("processName");
String tableId = request.getParameter("tableId");//数据表
String recordId = request.getParameter("recordId");//数据记录ID
String workId = request.getParameter("workId");//workId
String stepCount = request.getParameter("stepCount");//步骤数
String submitPerson = request.getParameter("submitPerson");//发起人
String submitTime = request.getParameter("submitTime");//发起时间

String isStandForWork=request.getParameter("isStandForWork");
String standForUserId=request.getParameter("standForUserId");

String backToActivityId=request.getParameter("backToActivityId");
String backToActivityName=request.getParameter("backToActivityName");
String backToUserId=request.getParameter("backToUserId");
String backToUserName=request.getParameter("backToUserName");
String mainLinkFile=request.getParameter("mainLinkFile");
String moduleId = workFlowCommonBD.getModuleId(tableId);
String backToStep=request.getParameter("backToStep");

String backType="0";
String backToAllInfo=request.getParameter("backToAllInfo");
if("0".equals(backToAllInfo)){
	//退回到发起人
	backType="0";
	backToUserName=submitPerson;
	backToActivityName="发起人";
}else{
	//退回到中间节点
	backType="1";
	String[] backToAllInfoArray=backToAllInfo.split(",");
	
	backToActivityId=backToAllInfoArray[0];
	backToStep=backToAllInfoArray[1];
	backToActivityName=backToAllInfoArray[2];
	backToUserId=backToAllInfoArray[3];
	backToUserName=backToAllInfoArray[4];	
}

//插入办理意见
com.js.oa.jsflow.service.WorkFlowCommonBD wfcBD = new com.js.oa.jsflow.service.WorkFlowCommonBD();

com.js.oa.jsflow.service.WorkFlowButtonBD wfbBD = new com.js.oa.jsflow.service.WorkFlowButtonBD();
java.util.Map dealwithMap = new java.util.HashMap();
//System.out.print("\n--------------\nisStandForWork："+request.getParameter("isStandForWork")+"\n------------\n");
dealwithMap.put("tableId", tableId);
dealwithMap.put("recordId", recordId);
dealwithMap.put("curActivityName", curActivityName);
dealwithMap.put("curActivityId", curActivityId);
dealwithMap.put("userId", userId);
dealwithMap.put("comment", comment);
dealwithMap.put("nextActivityName", "退回");
dealwithMap.put("nextActivityId", "-1");
dealwithMap.put("stepCount", stepCount);
dealwithMap.put("isStandForWork", isStandForWork);
 //System.out.print("\n--------------\nisStandForWork："+dealwithMap.getParameter("isStandForWork")+"\n------------\n");
dealwithMap.put("standForUserId", standForUserId);
if(request.getParameter("include_commField") != null){
    dealwithMap.put("commentField", request.getParameter("include_commField"));
}

dealwithMap.put("userScope", request.getParameter("userScope"));
dealwithMap.put("scopeId", request.getParameter("scopeId"));

wfcBD.insertDealWith(dealwithMap);

String initStepCount = "0";


String title=request.getParameter("titleFieldName").equals("")?processName:request.getParameter(request.getParameter("titleFieldName"));
String backInfo = submitPerson+"  "+submitTime+"   发起的" + title + "被" + userName + "退回.<br>"+
                   "退回原因：<br>"+ comment ;

if("0".equals(backType)){
    //退回发起人
    java.util.Map para = new java.util.HashMap();
    para.put("workId", workId);
    para.put("tableId", tableId);
    para.put("recordId", recordId);
    para.put("workId", workId);
    para.put("stepCount", stepCount);
    para.put("userName", userName);
    para.put("isStandForWork", isStandForWork);
    para.put("standForUserId", standForUserId);
    para.put("userId", userId);
    para.put("comment", comment);
    para.put("backInfo", backInfo);
    wfbBD.backToSubmitPerson(para);
}else{
    //退回中间环节
    java.util.Map para = new java.util.HashMap();
    para.put("workId", workId);
    para.put("recordId", recordId);
    para.put("tableId", tableId);
    para.put("workId", workId);
    para.put("stepCount", stepCount);
    para.put("userName", userName);
    para.put("userId", userId);
    para.put("backToActivityId", backToActivityId);
    initStepCount = backToStep;
    para.put("backToStep", initStepCount);
    para.put("backToActivityName", backToActivityName);
    para.put("workMainLinkFile", mainLinkFile);
    para.put("isStandForWork", isStandForWork);
    para.put("standForUserId", standForUserId);
    //
    para.put("backToUserId", backToUserId);
    para.put("comment", comment);
    para.put("backInfo", backInfo);
    wfbBD.backToActivity(para);
}

Map backMap = wfbBD.getBackToPerson(tableId, recordId, stepCount, initStepCount, workId);

//处理退回到发起人的操作开始 注：只有回退到发起人的时候才需要处理
if("0".equals(backType)){
	if("11".equals(moduleId)){
	   //车辆申请流程退回到发起人的时候什么都不做
	}else if("12".equals(moduleId)){
	   //档案借阅申请
	   this.dealWithModule_12(recordId);
	}else if("15".equals(moduleId)){
	   //会议室申请
	   this.dealWithModule_15(recordId);
	}else if("14".equals(moduleId)){
	   //设备领用
	   this.dealWithModule_14(recordId);
	}else if("13".equals(moduleId)){
	   //物品管理流程
       if(processName.indexOf("退货流程")>=0 || processName.indexOf("进货流程")>=0){  //入库、退货流程
           this.dealWithModule_13_rk(recordId, userId, userName);
       }else{//出库退库流程
           this.dealWithModule_13_ck(recordId, userId, userName);
       }
	}
}
//处理退回到发起人的操作完毕


//流程提交成功，添加办理记录
WorkLogVO workLogVO = new WorkLogVO();
workLogVO.setSendUserId(userId);
workLogVO.setSendUserName(userName);
workLogVO.setSendAction("退回"+backToActivityName);
//workLogVO.setReceiveUserId(mainTransactUser+"");
workLogVO.setReceiveUserName(backToUserName==null?"":backToUserName);
workLogVO.setProcessId(processId);
workLogVO.setTableId(tableId);
workLogVO.setRecordId(recordId);
//workLogVO.setDomainId(session.getAttribute("domainId").toString());
workLogVO.setDomainId("0");
workFlowButtonBD.setDealWithLog(workLogVO);


if("0".equals(backType)){
    //退回发起人    
    String to=backMap.get("empId").toString();
    String empWorkId=backMap.get("empWorkId").toString();
    if(!"".equals(to)){
    	to=userIdStringToArray(to);
    	empWorkId=empWorkId.substring(0,empWorkId.length()-1);
    	title="您发起的"+title+"被"+userName+"退回";
    	String url="/jsoa/jsflow/item/jump_dealwith.jsp?status=-1&workId="+empWorkId;
    	com.js.system.service.messages.RemindUtil.sendMessageToUsers(title, url, to, "jsflow", new java.util.Date(), new java.util.Date("2050/1/1"));
    	
    }
} else{
    //中间环节           
    String to=backMap.get("empId").toString();
    String empWorkId=backMap.get("empWorkId").toString();
    String url="/jsoa/jsflow/item/jump_dealwith.jsp?status=-1&workId=";
    if(!"".equals(to)){
    	to=userIdStringToArray(to);
    	empWorkId=empWorkId.substring(0,empWorkId.length()-1);
    	
    	String[] toArr=to.split(",");
    	String[] workIdArr=empWorkId.split(",");
    	

    	String titleTemp=submitPerson+"发起的"+title+"被"+userName+"退回到"+backToActivityName;
    	
    	for(int i=0;i<toArr.length;i++){            		
    		com.js.system.service.messages.RemindUtil.sendMessageToUsers(titleTemp, url+workIdArr[i], toArr[i], "jsflow", new java.util.Date(), new java.util.Date("2050/1/1"));
    	}            	
    }
    //给发起人发通知
    title="您发起的"+title+"被"+userName+"退回到"+backToActivityName;
    to=backMap.get("submitEmpId").toString();
    com.js.system.service.messages.RemindUtil.sendMessageToUsers(title, url+backMap.get("submitWorkId").toString(), to, "jsflow", new java.util.Date(), new java.util.Date("2050/1/1"));
             
}

      out.write("\r\n<HTML xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<HEAD>\r\n<TITLE>工作办理</TITLE>\r\n<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n<META name=apple-touch-fullscreen content=YES>\r\n<META name=apple-mobile-web-app-capable content=no>\r\n<LINK rel=apple-touch-icon href=\"");
      out.print(app );
      out.write("/wap2/images/iphone.jpg\">\r\n<LINK rel=stylesheet type=text/css href=\"");
      out.print(app );
      out.write("/wap2/css/main_3g.css\">\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(app );
      out.write("/wap2/js/cookie.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(app );
      out.write("/wap2/js/util.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(app );
      out.write("/wap2/js/frost.js\"></SCRIPT>\r\n<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n</head>\r\n<body>\r\n\t<div class=\"main\">\r\n\t\t<div id=\"top\">\r\n\t\t\t<span id=\"lp2\"><div class=\"btn_3\"><a href=\"/jsoa/WorkDealWithAction.do?action=list&amp;status=0\">返回</a></div></span>\r\n\t\t\t<span id=\"title2\"></span>\r\n\t\t</div>\r\n<div align=\"center\"><br/>\r\n\t事项已经办理完毕!\r\n</div>\r\n</body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
