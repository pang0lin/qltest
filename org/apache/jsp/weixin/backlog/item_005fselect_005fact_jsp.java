/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:58:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.backlog;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.util.IO2File;
import java.util.*;
import com.js.oa.jsflow.vo.ActivityVO;
import com.js.lang.Resource;
import com.js.oa.weixin.common.util.MobileUtils;
import com.js.util.config.SystemCommon;
import com.js.oa.jsflow.service.WorkFlowButtonBD;
import com.js.system.util.StaticParam;

public final class item_005fselect_005fact_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.jsflow.vo.ActivityVO");
    _jspx_imports_classes.add("com.js.lang.Resource");
    _jspx_imports_classes.add("com.js.system.util.StaticParam");
    _jspx_imports_classes.add("com.js.util.config.SystemCommon");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowButtonBD");
    _jspx_imports_classes.add("com.js.oa.weixin.common.util.MobileUtils");
    _jspx_imports_classes.add("com.js.util.util.IO2File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
 
request.setCharacterEncoding("UTF-8");
String local = session.getAttribute("org.apache.struts.action.LOCALE").toString();
String type = request.getParameter("type");
String path = request.getContextPath();

boolean showSelectUser=true;

String workId = request.getParameter("workId");
String tableId = request.getParameter("tableId");
String recordId = request.getParameter("recordId");
String workType = request.getParameter("workType");
String processId = request.getParameter("processId");
String processName = request.getParameter("processName");
String curActivityId = request.getParameter("curActivityId");

String curActivityName = request.getParameter("curActivityName");
String submitPerson = request.getParameter("submitPerson");
String submitPersonId = request.getParameter("submitPersonId");
String stepCount = request.getParameter("stepCount");

String informationIssueOrg = request.getParameter("informationIssueOrg");
String DocumentSendFile_WriteOrg = request.getParameter("DocumentSendFile_WriteOrg");
String ReceiveFile_SendFileUnit = request.getParameter("ReceiveFile_SendFileUnit");



String remindField = request.getParameter("remindField");
String isStandForWork = request.getParameter("isStandForWork");
String standForUserId = request.getParameter("standForUserId");
String standForUserName = request.getParameter("standForUserName");
String mainLinkFile = request.getParameter("mainLinkFile");
String titleFieldName = request.getParameter("titleFieldName");

String msgFrom = request.getParameter("msgFrom");
String inWorkType = request.getParameter("inWorkType");
String submitTime = request.getParameter("submitTime");
String submitPersonTime = request.getParameter("submitPersonTime");
String initActivity = request.getParameter("initActivity");

String isSend = request.getParameter("isSend");
String fromdesktop = request.getParameter("fromdesktop");
String operName = request.getParameter("operName");
String operId = request.getParameter("operId");
String mainUserType = request.getParameter("mainUserType");
String mainAllowStandFor = request.getParameter("mainAllowStandFor");
String mainAllowCancel = request.getParameter("mainAllowCancel");
String mainAllowTransition = request.getParameter("mainAllowTransition");

String mainPressType = request.getParameter("mainPressType");
String mainDeadLineTime = request.getParameter("mainDeadLineTime");
String mainPressMotionTime = request.getParameter("mainPressMotionTime");
String mainNextActivityId = request.getParameter("mainNextActivityId");

String mainNextActivityName = request.getParameter("mainNextActivityName");
String emergence = request.getParameter("emergence");
String needSendMsg = request.getParameter("needSendMsg");
String smsContent = request.getParameter("smsContent");
String dealTips = request.getParameter("dealTips");
String processDeadlineDate = request.getParameter("processDeadlineDate");

String mainNeedPassRound = request.getParameter("mainNeedPassRound");
String mainPassRoundUserType = request.getParameter("mainPassRoundUserType");
String passRoundId = request.getParameter("passRoundId");
String passRoundName = request.getParameter("passRoundName");
String subProcTempWorkId = request.getParameter("subProcTempWorkId");

String pressUserId = request.getParameter("pressUserId");
String pressUserName = request.getParameter("pressUserName");
String pressTitle = request.getParameter("pressTitle");
String pressContent = request.getParameter("pressContent");
String pressSMS = request.getParameter("pressSMS");

String feedUserId = request.getParameter("feedUserId");
String feedUserName = request.getParameter("feedUserName");
String feedTitle = request.getParameter("feedTitle");
String feedContent = request.getParameter("feedContent");

String transitionUser = request.getParameter("transitionUser");
String transitionUserName = request.getParameter("transitionUserName");
String tranType = request.getParameter("tranType");
String tranFromPersonId = request.getParameter("tranFromPersonId");

String receiveActivityId = request.getParameter("receiveActivityId");
String receiveActivityName = request.getParameter("receiveActivityName");
String receiveUserName = request.getParameter("receiveUserName");

String passLinkFile = request.getParameter("passLinkFile");
String approveMode = request.getParameter("approveMode");

String currentActivityClass = request.getParameter("activityClass");
String curCommField = request.getParameter("include_commField");
String opinionMust = request.getParameter("opinionMust");
String actiCommFieldType = request.getParameter("actiCommFieldType"); //当前节点的批示意见类型

String nextActivityId = "";
String include_comment = "";

String curTransactType = new com.js.oa.jsflow.service.WorkFlowButtonBD().getCurTransactTypeByWorkId(workId);//当前节点办理方式

String fromSelUser = request.getParameter("fromSelUser");
if(null!=fromSelUser && "1".equals(fromSelUser)){
	//选人界面过来的
	nextActivityId = request.getParameter("nextActivityId");
	include_comment = request.getParameter("include_comment");
	operName = request.getParameter("operName");
	operId = request.getParameter("operId");
	
	//item_select_emp_search.jsp页面选人后接受
	if(null!=request.getParameter("status") && "0".equals(request.getParameter("status"))){
		String newSelectedOper = null!=request.getParameter("newSelectedOper") ? request.getParameter("newSelectedOper") : "";
		if(!"".equals(newSelectedOper)){
			operName = request.getParameter("operName");
			operId = request.getParameter("operId");
		}
	}
	
	if(!operId.startsWith(",") && !operId.startsWith("$")) operId = "," + operId;
	if(!operId.endsWith(",") && !operId.endsWith("$")) operId = operId + ",";
	IO2File.printFile(operName + "  " + operId);
}

ActivityVO activityVO = null;
List activityList = new ArrayList();
com.js.oa.jsflow.service.WorkFlowBD workFlowBD = new com.js.oa.jsflow.service.WorkFlowBD();

String showDoc = request.getParameter("showDoc")!=null && "doc".equals(request.getParameter("showDoc")) ? "?showDoc=doc" : "";
String userAgent = request.getHeader("USER-AGENT").toLowerCase();
if(null == userAgent){
	userAgent = "";
}
String url=request.getParameter("url")==null?"":request.getParameter("url").toString();
String wechatShowDoc="";
if(request.getParameter("wechatShowDoc")!=null){
	wechatShowDoc = "?wechatShowDoc="+request.getParameter("wechatShowDoc");
	if(url.indexOf("?")>-1){
		url+="&wechatShowDoc="+request.getParameter("wechatShowDoc");
	}else{
		url+=wechatShowDoc;
	}
}

      out.write("\r\n\r\n<!DOCTYPE HTML>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/wap2/commonImport.jsp", out, false);
      out.write("\r\n<HTML>\r\n\t<HEAD>\r\n\t\t<TITLE>处理待办</TITLE>\r\n\t\t<META content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\">\r\n\t\t<META name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n\t\t<META name=\"apple-touch-fullscreen\" content=\"YES\">\r\n\t\t<META name=\"GENERATOR\" content=\"MSHTML 8.00.6001.19154\">\r\n\t\t<META name=\"apple-mobile-web-app-capable\" content=\"no\">\r\n\t\t\r\n\t\t<script type=\"text/javascript\" src=\"/jsoa/js/weixin/zepto.js\"></script>\r\n\t\t<script type=\"text/javascript\" src=\"/jsoa/js/weixin/wx.js\"></script>\r\n\t\t<script type=\"text/javascript\" src=\"/jsoa/js/weixin/alert.js\"></script>\r\n\t\t<SCRIPT language=\"JavaScript\">\r\n\t\tvar submitFlag = false;\r\n\t\tfunction init(){\r\n\t\t    var backUrl = \"");
      out.print(path);
      out.write("/login.jsp?action=logout\";\r\n\t\t    setTimeout(scrollTo, 100, 0, 1);\r\n\t\t    try{\r\n\t\t\t    var nextActivityId=document.getElementsByName(\"nextActivity\")[0].value;\r\n\r\n\t\t\t    if(nextActivityId.split(\",\")[0]==\"2\"){\r\n\t\t\t    \tdocument.getElementById(\"executorDiv\").style.display=\"none\";\r\n\t\t\t    }\r\n\t\t\t}catch(e){\r\n\t\t    \t\r\n\t\t    }\r\n\t\t}\r\n\t\tfunction changeActivity(){\r\n\t\t\ttry{\r\n\t\t\t\tvar nextActivityId=document.getElementsByName(\"nextActivity\")[0].value;\r\n\t\t\t    if(nextActivityId.split(\",\")[0]==\"2\"){\r\n\t\t\t    \tdocument.getElementById(\"executorDiv\").style.display=\"none\";\r\n\t\t\t    }else{\r\n\t\t\t    \tdocument.getElementById(\"executorDiv\").style.display=\"\";\r\n\t\t\t    }\r\n\t\t    }catch(e){\r\n\t\t    \t\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\tfunction gotoPage(url, flag){\r\n\t\t    if(flag){\r\n\t\t        location.href = encodeURI(url);\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\tfunction findParent(node, localName){\r\n\t\t\twhile (node && (node.nodeType!=1 || node.localName.toLowerCase()!=localName))\r\n\t\t\t\tnode = node.parentNode;\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\t\r\n\t\tfunction checkOnlineUser(){\r\n\t\t\tvar url = encodeURI(\"");
      out.print(path);
      out.write("/common/checkOnlineUser.jsp\");\r\n\t\t\tvar resulthtml = XmlHttpHelper.transmit(false, \"get\", \"text\", url, null, null);\r\n\t\t\tvar result = resulthtml.replace(/\\r|\\n/gm,'');\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tfunction displaySearch(flag){\r\n\t\t    if(flag == 1){\r\n\t\t        document.all.dd.style.display = \"none\";\r\n\t\t        document.all.search.style.display = \"\";\r\n\t\t    }else{\r\n\t\t        document.all.dd.style.display = \"\";\r\n\t\t        document.all.search.style.display = \"none\";\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\tfunction submitForm(){\r\n\t\t\ttry{\r\n\t\t\t\tvar nextActivityId=document.getElementsByName(\"nextActivity\")[0].value;\r\n\t\t\t    if(nextActivityId.split(\",\")[0]==\"2\"){\r\n\t\t\t    \tendForm();\t\r\n\t\t\t    \treturn;\r\n\t\t\t    }\r\n\t\t\t}catch(e){\t\t    \t\r\n\t\t    }\r\n\t\t\tdocument.frm.action = \"");
      out.print(path);
      out.write("/weixin/backlog/item_submit.jsp");
      out.print(wechatShowDoc);
      out.write("\";\r\n\t\t\t\r\n\t\t\tif(document.all.operId.value==\"\" && \"3\"!=document.all.activityClass.value){\r\n\t\t\t\tweixinMessageReminder(\"alert\", \"提示：\", \"请选择办理人！\", \"\");\r\n\t\t\t\treturn false;\r\n\t\t\t}else if(document.all.opinionMust.value==\"1\" && document.all.include_comment.value==\"\"){\r\n\t\t\t\tweixinMessageReminder(\"alert\", \"提示：\", \"请填写批示意见！\", \"\");\r\n\t\t\t\treturn false;\r\n\t\t\t}else{\r\n\t\t\t\tvar val=document.getElementById(\"cftj\").value;\r\n\t\t\t\tif(document.getElementById(\"subid\")!=null && val!=1){\r\n\t\t\t\t\tdocument.getElementById(\"cftj\").value=1;\r\n\t\t\t\t\tdocument.frm.submit();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//document.frm.submit();\r\n\t\t}\r\n\t\tfunction selectEmp(){\r\n\t\t\tdocument.frm.action = \"");
      out.print(path);
      out.write("/weixin/backlog/item_select_emp.jsp");
      out.print(wechatShowDoc);
      out.write("\";\r\n\t\t\tdocument.frm.submit();\r\n\t\t}\r\n\t\tfunction endForm(){\t\t\t\r\n\t\t\tdocument.frm.action = \"");
      out.print(path);
      out.write("/weixin/backlog/item_submit_complete.jsp");
      out.print(wechatShowDoc);
      out.write("\";\r\n\t\t\tif(document.all.opinionMust.value==\"1\" && document.all.include_comment.value==\"\"){\r\n\t\t\t\tweixinMessageReminder(\"alert\", \"提示：\", \"请填写批示意见！\", \"\");\r\n\t\t\t\treturn false;\r\n\t\t\t}else{\r\n\t\t\t\tif(!submitFlag){\r\n\t\t\t\tdocument.frm.submit();\r\n\t\t\t\t}\r\n\t\t\t\tsubmitFlag=true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t</SCRIPT>\r\n\t</HEAD>\r\n\t<body onload=\"init();setHeader('javascript:closeWindow();','发送');\" class=\"paddingTop\">\r\n\t\t");

		String loginType = null==session.getAttribute("loginType") ? "" : session.getAttribute("loginType").toString();
		if(false && "wap".equals(loginType)){
			
      out.write("\r\n\t\t\t<div id='mainpage_navdiv' class='top'>\r\n\t\t\t\t<a id='mainpage_backurl' href=''>\r\n\t\t\t\t\t<img src='/jsoa/wap2/images/topfh.png' width='20' height='15' />\r\n\t\t\t\t</a>\r\n\t\t\t\t<p id='mainpage_title'></p>\r\n\t\t\t</div>\r\n\t\t\t");

		}
		
      out.write("\r\n\t\t<div class=\"form\">\r\n\t\t\t<form name=\"frm\" action=\"\" method=\"post\">\r\n\t\t\t\t<input type=\"hidden\" name=\"actiCommFieldType\" value=\"");
      out.print(actiCommFieldType);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"opinionMust\" value=\"");
      out.print(opinionMust);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"workId\" value=\"");
      out.print(workId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"tableId\" value=\"");
      out.print(tableId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"recordId\" value=\"");
      out.print(recordId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"editId\" value=\"");
      out.print(recordId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"workType\" value=\"");
      out.print(workType);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"processId\" value=\"");
      out.print(processId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"processName\" value=\"");
      out.print(processName);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"curActivityId\" value=\"");
      out.print(curActivityId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"curActivityName\" value=\"");
      out.print(curActivityName);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"submitPerson\" value=\"");
      out.print(submitPerson);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"submitPersonId\" value=\"");
      out.print(submitPersonId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"stepCount\" value=\"");
      out.print(stepCount);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"remindField\" value=\"");
      out.print(remindField);
      out.write("\"/>\r\n\t\t\t\t<!-- 页面跳转url -->\r\n\t\t\t\t<input type=\"hidden\" id=\"url\" name=\"url\" value=\"");
      out.print(url);
      out.write("\"/>\r\n\t\t\t\t\r\n\t\t\t\t<!-- 会议室申请中的会议室名称参数 -->\r\n\t\t\t\t<input type=\"hidden\" id=\"boardroomName\" name=\"boardroomName\" value=\"");
      out.print(request.getParameter("boardroomName") );
      out.write("\">\r\n\t\t\t\t\r\n\t\t\t\t<input type=\"hidden\" name=\"isStandForWork\" value=\"");
      out.print(isStandForWork);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"standForUserId\" value=\"");
      out.print(standForUserId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"standForUserName\" value=\"");
      out.print(standForUserName);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"mainLinkFile\" value=\"");
      out.print(mainLinkFile);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"titleFieldName\" value=\"");
      out.print(titleFieldName);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"msgFrom\" value=\"");
      out.print(msgFrom);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"inWorkType\" value=\"");
      out.print(inWorkType);
      out.write("\"/>\t\t\t\r\n\t\t\t\t<input type=\"hidden\" name=\"submitTime\" value=\"");
      out.print(submitTime);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"submitPersonTime\" value=\"");
      out.print(submitPersonTime);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"initActivity\" value=\"");
      out.print(initActivity);
      out.write("\"/>\r\n\t\t\r\n\t\t\t\t<!-- 新增表单域 -->\r\n\t\t\t\t<input type=\"hidden\" name=\"isSend\" value=\"");
      out.print(isSend);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"fromdesktop\" value=\"");
      out.print(fromdesktop);
      out.write("\"/>\r\n\t\t\t\t\r\n\t\t\t\t<input type=\"hidden\" name=\"mainUserType\" value=\"100\"/><!--参与人类型-->\r\n\t\t\t\t<input type=\"hidden\" name=\"mainAllowStandFor\" value=\"");
      out.print(mainAllowStandFor);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"mainAllowCancel\" value=\"");
      out.print(mainAllowCancel);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"mainAllowTransition\" value=\"");
      out.print(mainAllowTransition);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"mainPressType\" value=\"");
      out.print(mainPressType);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"mainDeadLineTime\" value=\"");
      out.print(mainDeadLineTime);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"mainPressMotionTime\" value=\"");
      out.print(mainPressMotionTime);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"emergence\" value=\"");
      out.print(emergence);
      out.write("\"/><!--缓急程度-->\r\n\t\t\t\t<input type=\"hidden\" name=\"needSendMsg\" value=\"");
      out.print(needSendMsg);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"smsContent\" value=\"");
      out.print(smsContent);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"dealTips\" value=\"");
      out.print(dealTips);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"processDeadlineDate\" value=\"");
      out.print(processDeadlineDate);
      out.write("\"/>\r\n\t\t\t\t\r\n\t\t\t\t<!--阅件参数-->\r\n\t\t\t\t<input type=\"hidden\" name=\"mainNeedPassRound\" value=\"");
      out.print(mainNeedPassRound);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"mainPassRoundUserType\" value=\"");
      out.print(mainPassRoundUserType);
      out.write("\"/><!--阅件人类型-->\r\n\t\t\t\t<input type=\"hidden\" name=\"passRoundId\" value=\"");
      out.print(passRoundId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"passRoundName\" value=\"");
      out.print(passRoundName);
      out.write("\"/>\r\n\t\t\t\r\n\t\t\t\t<!--子流程临时workID-->\r\n\t\t\t\t<input type=\"hidden\" name=\"subProcTempWorkId\" value=\"");
      out.print(subProcTempWorkId);
      out.write("\"/>\r\n\t\t\t\t\r\n\t\t\t\t<!--催办-->\r\n\t\t\t\t<input type=\"hidden\" name=\"pressUserId\" value=\"");
      out.print(pressUserId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"pressUserName\" value=\"");
      out.print(pressUserName);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"pressTitle\" value=\"");
      out.print(pressTitle);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"pressContent\" value=\"");
      out.print(pressContent);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"pressSMS\" value=\"");
      out.print(pressSMS);
      out.write("\"/>\r\n\t\t\t\t\r\n\t\t\t\t<!--反馈-->\r\n\t\t\t\t<input type=\"hidden\" name=\"feedUserId\" value=\"");
      out.print(feedUserId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"feedUserName\" value=\"");
      out.print(feedUserName);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"feedTitle\" value=\"");
      out.print(feedTitle);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"feedContent\" value=\"");
      out.print(feedContent);
      out.write("\"/>\r\n\t\t\r\n\t\t\t\t<!--转办-->\r\n\t\t\t\t<input type=\"hidden\" name=\"transitionUser\" value=\"");
      out.print(transitionUser);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"transitionUserName\" value=\"");
      out.print(transitionUserName);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"tranType\" value=\"");
      out.print(tranType);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"tranFromPersonId\" value=\"");
      out.print(tranFromPersonId);
      out.write("\"/>\r\n\t\t\t\t\r\n\t\t\t\t<!--收回-->\r\n\t\t\t\t<input type=\"hidden\" name=\"receiveActivityId\" value=\"");
      out.print(receiveActivityId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"receiveActivityName\" value=\"");
      out.print(receiveActivityName);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"receiveUserName\" value=\"");
      out.print(receiveUserName);
      out.write("\"/>\r\n\t\t\t\t\r\n\t\t\t\t<!--阅件-->\r\n\t\t\t\t<input type=\"hidden\" name=\"passLinkFile\" value=\"");
      out.print(passLinkFile);
      out.write("\"/>\r\n\t\t\t\t\r\n\t\t\t\t<input type=\"hidden\" name=\"informationIssueOrg\" id=\"informationIssueOrg\" value=\"");
      out.print(informationIssueOrg);
      out.write("\"><!-- 新闻公告知识 -->\r\n\t\t\t\t<input type=\"hidden\" name=\"DocumentSendFile_WriteOrg\" id=\"DocumentSendFile_WriteOrg\" value=\"");
      out.print(DocumentSendFile_WriteOrg);
      out.write("\"><!--  发文拟文发文表-->\r\n\t\t\t\t<input type=\"hidden\" name=\"documentSendFileWriteOrg\" id=\"documentSendFileWriteOrg\" value=\"");
      out.print( DocumentSendFile_WriteOrg);
      out.write("\"/><!-- 发文 拟稿自建表-->\r\n\t\t\t\t<input type=\"hidden\" name=\"ReceiveFile_SendFileUnit\" id=\"ReceiveFile_SendFileUnit\" value=\"");
      out.print( ReceiveFile_SendFileUnit);
      out.write("\"/><!--  收文里的来文单位-->\r\n\t\t\t\t<input type=\"hidden\" name=\"receiveFileSendFileUnit\" id=\"receiveFileSendFileUnit\" value=\"");
      out.print( ReceiveFile_SendFileUnit);
      out.write("\"/><!--  收文里的来文单位-->\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t<!--当前节点办理方式 默认 1为多人并行-->\r\n\t\t\t\t<input type=\"hidden\" name=\"approveMode\" value=\"1\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"activityClass\" value=\"");
      out.print(currentActivityClass);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"curTransactType\" value=\"");
      out.print(curTransactType);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"include_commField\" value=\"");
      out.print(curCommField);
      out.write("\">\r\n\t\t\t\t<!-- 提醒查看人 -->\r\n\t\t\t\t<input type=\"hidden\" name=\"remindUser\" value=\"0\">\r\n\t\t\t\t<div class='infoTitle'>处理待办</div>\r\n\t\t\t    ");

			    //自动返回节点
			    boolean isComplete = false;
			    if("3".equals(currentActivityClass)){
			    	
      out.write("\r\n\t\t\t    \t<div class=\"item\">\r\n\t\t\t            <div class=\"content\">\r\n\t\t\t                 <textarea id=\"include_comment\" name=\"include_comment\" rows=\"6\" maxlength=\"1000\" placeholder=\"请输入批示意见\">");
      out.print(include_comment );
      out.write("</textarea>\r\n\t\t\t            </div>\r\n                     </div>\r\n\t\t\t\t\t");

				} else{
					isComplete = false;
					String activityName = "";
					//下一节点的选择类型（用户决定还是流程决定）
			        String stepType = workFlowBD.getActivityType(curActivityId, tableId, recordId);
				    
				    //2010-05-13 取得下一个节点的类型，判断是否虚拟节点
				    String activityClass = workFlowBD.getNextActivityClass(curActivityId, tableId, recordId, "");
					if(!activityClass.equals("0")){
						//虚拟节点 activityClass不为0时即下一个节点的activityId
						//虚拟节点因需要用到表单上的值判断，Wap下不处理
						//System.out.println("虚拟节点,请使用PC版本处理！");
						//虚拟节点 activityClass不为0时即下一个节点的activityId
				    	activityVO = new com.js.oa.jsflow.util.ProcessStep().getProceedNextActi(activityClass, tableId, recordId, request);
						if(null == activityVO){
							
      out.write("\r\n\t\t\t\t\t\t\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\t\t\t\t\t\t\tshowAlertWindow(\"");
      out.print(Resource.getValue(local,"filetransact","file.nosuitnextactivity"));
      out.write("\");\r\n\t\t\t\t\t\t\twindow.close();\r\n\t\t\t\t\t\t\t</SCRIPT>\r\n\t\t\t\t\t\t\t");

						} else{
							activityVO.setBeginEnd(activityVO.getActivityBeginEnd());
							activityList.add(activityVO);
						}
					} else if(stepType.equals("0")){
						//System.out.println("流程决定走向,请使用PC版本处理！");
						//流程决定走向	    	
						activityVO = new com.js.oa.jsflow.util.ProcessStep().getProceedNextActi(curActivityId, tableId, recordId, request);
						
				    	if(null == activityVO){
					    	
      out.write("\r\n\t\t\t\t\t\t\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\t\t\t\t\t\t\tshowAlertWindow(\"");
      out.print(Resource.getValue(local,"filetransact","file.nosuitnextactivity"));
      out.write("\");\r\n\t\t\t\t\t\t\twindow.close();\r\n\t\t\t\t\t\t\t</SCRIPT>\r\n\t\t\t\t\t\t\t");

						} else{
							activityVO.setBeginEnd(activityVO.getActivityBeginEnd());
							activityList.add(activityVO);
						}
						//流程决定走向	    	
						//流程决定走向因需要用到表单上的值判断，Wap下不处理
					} else{
						//用户决定走向
						activityList = workFlowBD.getAllNextActivity(tableId, recordId, curActivityId);			
					}
					if(null==activityList || activityList.size()<1){
						if(MobileUtils.likeIOS(userAgent)){	// IOS
						
      out.write("\r\n\t\t\t\t\t\t<SCRIPT LANGUAGE=\"JavaScript\">\r\n\t\t\t\t\t\t\tcloseWindow();\r\n\t\t\t\t\t\t</SCRIPT>\r\n\t\t\t\t\t\t");
}else{ 
      out.write("\r\n\t\t\t\t\t      未找到后续节点,请使用PC版本处理！\r\n\t\t\t\t\t\t");

						}
					} else{
						if(activityList.size() == 1){
							//后续只有一个节点
							activityVO = (ActivityVO) activityList.get(0);
							if(activityVO.getBeginEnd() == 2){
								//可选择的节点中包含结束节点
								activityVO.setId(Long.parseLong("2"));
								activityVO.setName("结束节点");
								isComplete = true;
							}else{
								int i=0;
								java.sql.Connection conn=null;
								mainNextActivityId=activityVO.getId()+"";
								mainNextActivityName=activityVO.getName();
								String transactType=activityVO.getTransactType();
								com.js.oa.jsflow.vo.WorkVO vo = new com.js.oa.jsflow.vo.WorkVO();
								//2017-06-22只有一个后续节点的时候计算后续节点的办理人，如果只有一个或指定的办理人则直接列出不需要在选择
								String[] nextUser = workFlowBD.getProcActiUser(tableId, recordId, String.valueOf(activityVO.getId()));
								WorkFlowButtonBD workFlowButtonBD=new WorkFlowButtonBD();
								if(nextUser!=null && nextUser[0] != null){
									int participantType = Integer.parseInt(nextUser[0]);
									java.util.List candidate;
									java.util.List leaderList = null;
									Object[] tmp;
									String selectUser="",selectUserName="";
									switch(participantType){

									case 0:
										//流程发起人的上级领导 
										leaderList = workFlowBD.getLeaderList(request.getParameter("submitPersonId"));

										for(i=0;i<leaderList.size();i++){
											tmp = (Object[])leaderList.get(i); 
											selectUser += tmp[0]+",";
											selectUserName += tmp[1]+",";
										}
										if(selectUser.indexOf(",")!=-1){
											selectUser = selectUser.substring(0,selectUser.length()-1);
											selectUser = "$" + selectUser.replaceAll(",","\\$\\$") + "$";
											selectUserName = selectUserName.substring(0, selectUserName.length()-1);
										}
										selectUser=selectUser.replaceAll("\\$", ",");
										if(i==1){
											if(selectUser!=null && !"".equals(selectUser)){
												showSelectUser=false;
												operId=selectUser;
												operName=selectUserName;
											}
										}
										break;
									case 2:
										//候选人员
										candidate = workFlowBD.getCandidateSeq(nextUser[1],nextUser[3]);   				
										for(i=0;i<candidate.size();i++){
											tmp = (Object[])candidate.get(i); 
											selectUser += tmp[0]+",";
											selectUserName += tmp[1]+",";
										}
										if(i==1){
											//只有一个办理人 则直接发送
											if(selectUser.indexOf(",")!=-1){
												selectUser = selectUser.substring(0,selectUser.length()-1);
												selectUser = "$" + selectUser.replaceAll(",","\\$\\$") + "$";
												selectUserName = selectUserName.substring(0, selectUserName.length()-1);
											}
											selectUser=selectUser.replaceAll("\\$", ",");
											if(selectUser!=null && !"".equals(selectUser)){
												if(transactType.length()>=1){
													showSelectUser=false;
													operId=selectUser;
													operName=selectUserName;
												}
											}
										}
										break;
									case 3:
										//指定全部办理人
										candidate = workFlowBD.getCandidateSeq(nextUser[1],nextUser[3]);
										
										for(i=0; i<candidate.size(); i++){
											tmp = (Object[]) candidate.get(i); 
											selectUser += tmp[0]+",";
											selectUserName += tmp[1]+",";
										}
										if(selectUser.indexOf(",") != -1){
											selectUser = selectUser.substring(0, selectUser.length() - 1);
											selectUser = "$" + selectUser.replaceAll(",","\\$\\$") + "$";
											selectUserName = selectUserName.substring(0, selectUserName.length()-1);
										}
										selectUser=selectUser.replaceAll("\\$", ",");
										System.out.println("selec:"+selectUser);
										System.out.println("selec:"+selectUserName);
										if(selectUser!=null && !"".equals(selectUser)){
											showSelectUser=false;
											operId=selectUser;
											operName=selectUserName;
										}
										break;
									case 5:
										//流程发起人
										selectUser = request.getParameter("submitPersonId");
										selectUserName = new com.js.system.service.usermanager.UserBD().getUserNameById(request.getParameter("submitPersonId"));
										selectUser = "$" + selectUser.replaceAll(",","\\$\\$") + "$";
										selectUserName = selectUserName.substring(0, selectUserName.length()-1);
										selectUser=selectUser.replaceAll("\\$", ",");
										if(selectUser!=null && !"".equals(selectUser)){
											showSelectUser=false;
											operId=selectUser;
											operName=selectUserName;
										}
										break;
									case 6:
										//从角色中指定 		
										//确定当前办理人，如果有待办或转办应该以最初制定的执行人为准
										String currentUserId=request.getSession().getAttribute("userId").toString();
										
										if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
											if(request.getParameter("tranFromPersonId")!=null && !"null".equals(request.getParameter("tranFromPersonId")) && !"".equals(request.getParameter("tranFromPersonId")) && !"-1".equals(request.getParameter("tranFromPersonId"))){
										        tranFromPersonId=request.getParameter("tranFromPersonId");			
											
												//判断转办人是否还有转办人
												String tranFromPersonIdTemp=tranFromPersonId;
												//java.sql.Connection conn=null;
												try{
													conn=new com.js.util.util.DataSourceBase().getDataSource().getConnection();
													java.sql.Statement stmt=conn.createStatement();
													java.sql.ResultSet rs;
											        while(!"".equals(tranFromPersonId)){                	
											        	rs=stmt.executeQuery("select tranfrompersonid from jsf_work where wf_curemployee_id="+tranFromPersonId+" and initactivity="+curActivityId+" and workrecord_id="+recordId+" and worktable_id="+tableId);
											        	if(rs.next()){
											        		tranFromPersonId=rs.getString(1);
											        	}else{
											        		tranFromPersonId="";
											        	}
											        	rs.close();
											        	
											        	if(tranFromPersonId==null || "null".equals(tranFromPersonId) || "".equals(tranFromPersonId)){
											        		tranFromPersonId="";
											        	}else{
											        		tranFromPersonIdTemp=tranFromPersonId;
											        	}                	          	
											        }
											        stmt.close();
											        conn.close();
												}catch(Exception ex){
													if(conn!=null){
														try{
															conn.close();
														}catch(Exception err){
															err.printStackTrace();
														}
													}
													ex.printStackTrace();
												}
										        
										        tranFromPersonId=tranFromPersonIdTemp;
											}
											
											//转办判断
											if(!"".equals(tranFromPersonId)){
												currentUserId = tranFromPersonId;
											}
										} else{
											//有代办人的情况
											currentUserId=standForUserId;
										}
										
										candidate = workFlowBD.getRoleUserIDAndName(nextUser[18], request.getParameter("submitPersonId")+";"+currentUserId);
										for(i=0;i<candidate.size();i++){
											tmp = (Object[])candidate.get(i); 
											selectUser += tmp[0]+",";
											selectUserName += tmp[1]+",";
										}
										if(selectUser.indexOf(",")!=-1){
											selectUser = selectUser.substring(0,selectUser.length()-1);
											selectUser = "$" + selectUser.replaceAll(",","\\$\\$") + "$";
											selectUserName = selectUserName.substring(0,selectUserName.length()-1);
										}
										selectUser=selectUser.replaceAll("\\$", ",");
										if(i==1){
											//只有一个办理人
											if(selectUser!=null && !"".equals(selectUser)){
												showSelectUser=false;
												operId=selectUser;
												operName=selectUserName;
											}
										}
										break;
									case 7:
										//上一节点办理人的上级领导
										//确定当前办理人，如果有待办或转办应该以最初制定的执行人为准
										try{
											conn=new com.js.util.util.DataSourceBase().getDataSource().getConnection();
											java.sql.Statement stmt=conn.createStatement();
											java.sql.ResultSet rs;
											if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
												if(request.getParameter("tranFromPersonId")!=null && !"null".equals(request.getParameter("tranFromPersonId")) && !"".equals(request.getParameter("tranFromPersonId")) && !"-1".equals(request.getParameter("tranFromPersonId"))){
											        tranFromPersonId=request.getParameter("tranFromPersonId");			
												
													//判断转办人是否还有转办人
													String tranFromPersonIdTemp=tranFromPersonId;
											        while(!"".equals(tranFromPersonId)){                	
											        	rs=stmt.executeQuery("select tranfrompersonid from jsf_work where wf_curemployee_id="+tranFromPersonId+" and initactivity="+curActivityId+" and workrecord_id="+recordId+" and worktable_id="+tableId);
											        	if(rs.next()){
											        		tranFromPersonId=rs.getString(1);
											        	}
											        	rs.close();
											        	stmt.close();
											        	conn.close();
											        	if(tranFromPersonId==null || "null".equals(tranFromPersonId)){
											        		tranFromPersonId="";
											        	}else{
											        		tranFromPersonIdTemp=tranFromPersonId;
											        	}                	
											        }
											        
											        tranFromPersonId=tranFromPersonIdTemp;    
												}
												
												//转办判断
												if(!"".equals(tranFromPersonId)&& !"null".equals(tranFromPersonId) && tranFromPersonId!=null){
													leaderList = workFlowBD.getLeaderList(tranFromPersonId);
												}else{
													leaderList = workFlowBD.getLeaderList(session.getAttribute("userId").toString());
												}
											} else{
												//有代办人的情况
												leaderList = workFlowBD.getLeaderList(standForUserId);
											}
											for(i=0;i<leaderList.size();i++){
												tmp = (Object[])leaderList.get(i); 
												selectUser += tmp[0]+",";
												selectUserName += tmp[1]+",";
											}
											if(selectUser.indexOf(",")!=-1){
												selectUser = selectUser.substring(0,selectUser.length()-1);
												selectUser = "$" + selectUser.replaceAll(",","\\$\\$") + "$";
												selectUserName = selectUserName.substring(0,selectUserName.length()-1);
											}
											selectUser=selectUser.replaceAll("\\$", ",");
											if(i==1){
												//只有一个办理人
												if(selectUser!=null && !"".equals(selectUser)){
													showSelectUser=false;
													operId=selectUser;
													operName=selectUserName;
												}
											}
										}catch(Exception ex){
											if(conn!=null){
												try{
													conn.close();
												}catch(Exception err){
													err.printStackTrace();
												}
											}
											ex.printStackTrace();
										}
										break;
									case 11:
										//上一节点所有参与者
										vo.setProcessId(Long.valueOf(processId));
										vo.setTableId(Long.valueOf(tableId));
										vo.setRecordId(Long.valueOf(recordId));
										vo.setActivity(Long.valueOf(curActivityId));

										candidate = workFlowButtonBD.getFrontActivityOper(vo);
										for(i=0;i<candidate.size();i++){
											tmp = (Object[])candidate.get(i); 
											selectUser += tmp[0]+",";
											selectUserName += tmp[1]+",";
										}
										if(selectUser.indexOf(",")!=-1){
											selectUser = selectUser.substring(0,selectUser.length()-1);
											selectUser = "$" + selectUser.replaceAll(",","\\$\\$") + "$";
											selectUserName = selectUserName.substring(0, selectUserName.length()-1);
										}
										selectUser=selectUser.replaceAll("\\$", ",");
										if(selectUser!=null && !"".equals(selectUser)){
											showSelectUser=false;
											operId=selectUser;
											operName=selectUserName;
										}
										break;
									case 15:
										//从岗位中选择
										//确定当前办理人，如果有待办或转办应该以最初制定的执行人为准
										currentUserId=request.getSession().getAttribute("userId").toString();
										if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
											if(request.getParameter("tranFromPersonId")!=null && !"null".equals(request.getParameter("tranFromPersonId")) && !"".equals(request.getParameter("tranFromPersonId")) && !"-1".equals(request.getParameter("tranFromPersonId"))){
										        tranFromPersonId=request.getParameter("tranFromPersonId");			
											
												//判断转办人是否还有转办人
												String tranFromPersonIdTemp=tranFromPersonId;
												//java.sql.Connection conn=null;
												try{
													conn=new com.js.util.util.DataSourceBase().getDataSource().getConnection();
													java.sql.Statement stmt=conn.createStatement();
													java.sql.ResultSet rs;
											        while(!"".equals(tranFromPersonId)){                	
											        	rs=stmt.executeQuery("select tranfrompersonid from jsf_work where wf_curemployee_id="+tranFromPersonId+" and initactivity="+curActivityId+" and workrecord_id="+recordId+" and worktable_id="+tableId);
											        	if(rs.next()){
											        		tranFromPersonId=rs.getString(1);
											        	}else{
											        		tranFromPersonId="";
											        	}
											        	rs.close();
											        	
											        	if(tranFromPersonId==null || "null".equals(tranFromPersonId) || "".equals(tranFromPersonId)){
											        		tranFromPersonId="";
											        	}else{
											        		tranFromPersonIdTemp=tranFromPersonId;
											        	}                	         	
											        }
											        stmt.close();
											        conn.close();
												}catch(Exception ex){
													if(conn!=null){
														try{
															conn.close();
														}catch(Exception err){
															err.printStackTrace();
														}
													}
													ex.printStackTrace();
												}
										        
										        tranFromPersonId=tranFromPersonIdTemp;
											}
											
											//转办判断
											if(!"".equals(tranFromPersonId)){
												currentUserId = tranFromPersonId;
											}
										} else{
											//有代办人的情况
											currentUserId=standForUserId;
										}
										candidate = workFlowBD.getPositionUserIDAndName(nextUser[18], request.getParameter("submitPersonId")+";"+currentUserId);
										for(i=0;i<candidate.size();i++){
											tmp = (Object[])candidate.get(i); 
											selectUser += tmp[0]+",";
											selectUserName += tmp[1]+",";
										}
										if(selectUser.indexOf(",")!=-1){
											selectUser = selectUser.substring(0,selectUser.length()-1);
											selectUser = "$" + selectUser.replaceAll(",","\\$\\$") + "$";
											selectUserName = selectUserName.substring(0,selectUserName.length()-1);
										}
										selectUser=selectUser.replaceAll("\\$", ",");
										if(i==1){
											//只有一个办理人
											if(selectUser!=null && !"".equals(selectUser)){
												showSelectUser=false;
												operId=selectUser;
												operName=selectUserName;
											}
										}
										break;	
									}
								
								}
							}
							activityName = activityVO.getName()==null ? "" : activityVO.getName();
							
      out.write("\r\n\t\t\t\t\t\t\t<div class=\"item\">\r\n\t\t\t\t\t\t\t\t<div class=\"title\">下一节点:</div>\r\n\t\t\t\t\t\t\t\t<div class=\"content\" >");
      out.print(activityVO.getName() );
      out.write("</div>\r\n\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"nextActivity\" value=\"");
      out.print(activityVO.getId());
      out.write(',');
      out.print(activityVO.getName()==null ? "" : activityVO.getName());
      out.write(',');
      out.print(activityVO.getAllowStandFor());
      out.write(',');
      out.print(activityVO.getAllowcancel());
      out.write(',');
      out.print(activityVO.getPressType());
      out.write(',');
      out.print(activityVO.getDeadlineTime());
      out.write(',');
      out.print(activityVO.getPressMotionTime());
      out.write(',');
      out.print(activityVO.getAllowTransition());
      out.write("\"/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t");

						} else{
							
      out.write("\r\n\t\t\t\t\t\t\t<div class=\"item\">\r\n\t\t\t\t\t\t\t\t<div class=\"title\">下一节点:</div>\r\n\t\t\t\t\t\t\t\t<div class=\"content\" >\r\n\t\t\t\t\t\t\t\t\t<select class=\"select\" name=\"nextActivity\" onchange=\"changeActivity();\">\r\n\t\t\t\t\t\t\t\t\t\t");

										for(int i=0; i<activityList.size(); i++){
											activityVO = (ActivityVO) activityList.get(i);
											if(activityVO.getBeginEnd() == 2){
												//可选择的节点中包含结束节点
												activityVO.setId(Long.parseLong("2"));
												activityVO.setName("结束节点");
											}
											activityName = activityVO.getName()==null ? "" : activityVO.getName();
											
      out.write("\r\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"");
      out.print(activityVO.getId());
      out.write(',');
      out.print(activityVO.getName()==null ? "" : activityVO.getName());
      out.write(',');
      out.print(activityVO.getAllowStandFor());
      out.write(',');
      out.print(activityVO.getAllowcancel());
      out.write(',');
      out.print(activityVO.getPressType());
      out.write(',');
      out.print(activityVO.getDeadlineTime());
      out.write(',');
      out.print(activityVO.getPressMotionTime());
      out.write(',');
      out.print(activityVO.getAllowTransition());
      out.write('"');
      out.write(' ');
if(mainNextActivityId.equals(String.valueOf(activityVO.getId()))){out.print("selected");} 
      out.write('>');
      out.print(activityName);
      out.write("</option>\r\n\t\t\t\t\t\t\t\t\t\t\t");

										}
										
      out.write("\r\n\t\t\t\t\t\t           \t</select>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t");

						}
						
      out.write("\r\n\t\t\t\t\t    <div class=\"item\" ");
if("-1".equals(actiCommFieldType)){ 
      out.write("style=\"display:none\"");
} 
      out.write(">\r\n\t\t\t\t\t\t\t<div class=\"content\">\r\n\t\t\t\t\t\t\t\t<textarea id=\"include_comment\" name=\"include_comment\" rows=\"6\" maxlength=\"1000\" placeholder=\"请输入批示意见\">");
      out.print(include_comment );
      out.write("</textarea>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t");

						if(!isComplete){
							
      out.write("\r\n\t\t\t\t\t\t\t<div class=\"item\" id=\"executorDiv\">\r\n\t\t\t\t\t\t\t\t<span class=\"title\">办理人：</span>\r\n\t\t\t\t\t\t\t\t<div class=\"content\" >\r\n\t\t\t\t\t\t\t\t\t");
if(!showSelectUser){
										out.print(operName);
									}else{ 
      out.write("\r\n\t\t\t\t\t\t\t\t\t\t<input readonly=\"readonly\" type=\"text\" name=\"queryName\" value=\"");
      out.print(operName );
      out.write("\"/>\r\n\t\t\t\t\t\t\t\t\t\t<input style=\"width: 60px;\" type=\"button\" onclick=\"selectEmp()\" value=\"选择\"/>\r\n\t\t\t\t\t\t\t\t\t");
} 
      out.write("\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t");

						}
					}
				}
				
      out.write("\r\n\t\t\t\t<input type=\"hidden\" name=\"operName\" value=\"");
      out.print(operName);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"operId\" value=\"");
      out.print(operId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"mainNextActivityId\" value=\"");
      out.print(mainNextActivityId);
      out.write("\"/>\r\n\t\t\t\t<input type=\"hidden\" name=\"mainNextActivityName\" value=\"");
      out.print(mainNextActivityName);
      out.write("\"/>\r\n\t\t\t\t");
      out.write("\r\n\t\t\t\t<input type=\"hidden\" name=\"cftj\" id=\"cftj\" value=\"\"/>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t\t\r\n\t\t<!-- 按钮 -->\r\n\t\t<div class=\"footer\">\r\n\t  \t\t<div class=\"buttons\">\r\n\t          \t");

	          	if("3".equals(currentActivityClass)){
	        	  	
      out.write("\r\n\t        \t  \t<div class=\"button\" id=\"subid\" onclick=\"submitForm()\">提&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;交</div>\r\n\t        \t  \t");

	          	} else{
	        	  	if(isComplete){
						
      out.write("\r\n\t\t\t\t\t\t<div class=\"button\" onclick=\"endForm()\">办理结束</div>\r\n\t\t\t\t\t\t");

					}else{
						
      out.write("\r\n\t\t\t\t\t\t<div class=\"button\" id=\"subid\" onclick=\"submitForm()\">提&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;交</div>\r\n\t\t\t\t\t\t");

					}
	          }
	          
      out.write("\r\n\t      </div>\r\n\t    </div>\r\n\t    \r\n\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/weixin/common/weixin_messageReminders.jsp", out, false);
      out.write("\r\n\t</body>\r\n</html>\r\n<script type=\"text/javascript\">\r\n\r\nfunction loadURL(){\r\n\ttry{\r\n\t\t");
if(SystemCommon.getCustomerName().equals("zcl")){
      out.write("\r\n\t\t\twindow.history.back();\r\n\t\t");
}else{
      out.write("\r\n\t\t\twindow.location.href=\"");
      out.print(url);
      out.write("\";\r\n\t\t");
}
      out.write("\r\n\t}catch(e){\r\n\t\twindow.history.back();\r\n\t}\r\n\t\r\n\t//window.location.href=\"/jsoa/weiXinBacklogAction.do?action=list&status=0\";\r\n\t//window.history.back();\r\n}\r\n</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
