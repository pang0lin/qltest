/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:01:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.personal_005fwork.netaddress;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;

public final class runExe_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n");
 
String command = request.getParameter("path");//exe,bat文件名OR DOS命令 
String text = null; 
try { 
	    java.io.File file = new java.io.File(command);
	    if(file.exists()){
	    	Process proc = Runtime.getRuntime().exec(command); 
			BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream())); 
			out.print("正在执行，请稍候。。。。。。。。。");
	    }else{
	    	
	   
	    	
      out.write("\r\n\t    \t<script type=\"text/javascript\">\r\n             alert(\"文件不存在！\");\r\n            </script>\r\n\t    \t\r\n\t    \t");
 
	    }
		

      out.write("\r\n<script type=\"text/javascript\">\r\nwindow.close();\r\n</script>\r\n");
 

} 
catch (IOException ioError)
{ 
	  	
	   ioError.printStackTrace(); 
		System.exit(0); 
} 


      out.write("\r\n\r\n\r\n\r\n<script type=\"text/javascript\">\r\n//频率\r\nvar frequency = 50;\r\n//步长   \r\nvar step = 3;\r\n//背景颜色\r\nvar loadingBgcolor = \"#000000\";\r\n//宽度\r\nvar loadingWidth = 354;\r\n\r\n/*\r\n*参数说明:\r\n*content：显示内容，可以为空；\r\n*imageURL：将引用JS文件的路径设置即可；\r\n*left：进度条显示位置left\r\n*top：进度条显示位置top\r\n*/\r\n\r\nfunction Loading(content,  imageURL, left, top) \r\n{ \r\n imageURL = imageURL + \"Loading.jpg\";\r\n  \r\n LoadTable(content, imageURL, left, top);\r\n showimage.style.display=\"\";\r\n window.setInterval(\"RefAct();\", frequency); \r\n}  \r\n\r\nfunction RefAct()\r\n{  \r\n imgAct.width += step;\r\n if(imgAct.width > loadingWidth-4)\r\n {\r\n  imgAct.width = 0;\r\n }\r\n}\r\n\r\nfunction LoadTable(content, imageURL, left, top)\r\n{\r\n var strLoading;\r\n strLoading = \"\"; \r\n strLoading += \"<div id=\\\"showimage\\\" style=\\\"DISPLAY:none;Z-INDEX:100;LEFT:\" + left+ \"px;POSITION:absolute;TOP:\" + top+ \"px;\\\" align=\\\"center\\\">\";\r\n  strLoading += \"<TABLE id=\\\"Table1\\\" cellSpacing=\\\"0\\\" cellPadding=\\\"0\\\" width=\\\"\" + loadingWidth + \"\\\" border=\\\"0\\\" bgcolor=\\\"\" + loadingBgcolor+ \"\\\">\";\r\n if(content != \"\")\r\n");
      out.write(" {  \r\n   strLoading += \"<tr>\";\r\n    strLoading += \"<td align=\\\"center\\\">\";\r\n     strLoading += \"<font size=\\\"4\\\" face=\\\"Courier New, Courier, mono\\\"><strong>\" + content + \"</strong></font>\";\r\n    strLoading += \"</td>\";\r\n   strLoading += \"</tr>\";\r\n   strLoading += \"<TR>\";\r\n }\r\n    strLoading += \"<TD class=\\\"Loading\\\" height=\\\"8\\\">\";\r\n     strLoading += \"<IMG id=\\\"imgAct\\\" height=\\\"8\\\" alt=\\\"\\\" src=\\\"\" + imageURL + \"\\\" width=\\\"0\\\">\";\r\n    strLoading += \"</TD>\";\r\n   strLoading += \"</TR>\";\r\n  strLoading += \"</TABLE>\";\r\n strLoading += \"</div>\";\r\n\r\n document.getElementById(\"loading_div\").innerHTML = strLoading;\r\n} \r\n</script>\r\n\r\n\r\n\r\n\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
