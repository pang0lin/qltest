/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:07:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.jspsmart.upload.*;
import java.io.*;

public final class importFlow_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("com.jspsmart.upload");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");

String saveName="";
if(request.getAttribute("close")==null){
	if(request.getParameter("importF")==null){
		com.jspsmart.upload.SmartUpload mySmartUpload = new com.jspsmart.upload.SmartUpload();
		String info="";
		mySmartUpload.initialize(pageContext);
		mySmartUpload.upload();
		long timeset=System.currentTimeMillis();
		String uploadfilename = "";
		String houzhui = "";
		com.jspsmart.upload.File myFile = mySmartUpload.getFiles().getFile(0);
		if (!myFile.isMissing()) {
		  	uploadfilename = myFile.getFileName();
		  	houzhui = uploadfilename.substring(uploadfilename.indexOf("."));
		  	String myRandom=new com.js.util.util.Random().getFileRandomName();//生成随机数
            Calendar cal = Calendar.getInstance(); 
		  	
			saveName=myRandom+houzhui;//生成新文件名
            saveName=cal.get(Calendar.YEAR)+"_"+saveName;
			System.out.println("/upload/"+cal.get(Calendar.YEAR)+"/temp/" + saveName);
		  	myFile.saveAs("/upload/"+cal.get(Calendar.YEAR)+"/temp/" + saveName);
		  	info="上传成功！";
		}
		
      out.write("\r\n\t\t<SCRIPT language=JavaScript>\r\n\t\t    alert (\"");
      out.print(info);
      out.write("\");\r\n\t\t    location.href=\"/jsoa/WFProcessAction.do?action=importFlow&fileName=");
      out.print(saveName );
      out.write("\";\r\n\t\t</SCRIPT>\r\n\t");
}else{ 
      out.write("\r\n\t<html>\r\n\t  <head>\r\n\t    <title>流程导入</title>\r\n\t\t<meta http-equiv=\"pragma\" content=\"no-cache\">\r\n\t\t<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n\t\t<meta http-equiv=\"expires\" content=\"0\"> \r\n\t\t<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\t  </head>\r\n\t  <body class=\"MainFrameBox Pupwin\">\r\n\t  <FORM name=\"form1\" id=\"form1\" METHOD=\"POST\" ACTION=\"/jsoa/jsflow/importFlow.jsp\" ENCTYPE=\"multipart/form-data\">\r\n\t  <div id=\"uploadDiv\" style=\"display: block\">\r\n\t  <TABLE width=\"100%\" height=\"100%\" valign=\"top\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding-left: 10px;\" class=\"docBoxNoPanel\">\r\n\t\t<tr>\r\n\t\t\t<td style=\"font-size: 15px; color: #003366; padding-top: 8px;height:30px;\"><b>上传本地文件</b></td>\r\n\t\t</tr>\r\n\t\t<TR valign=\"top\" style=\"padding-top: 12px;height:80px;\" id=\"upload1\">\r\n\t\t\t<TD align=\"left\" id=\"3230\">\r\n\t\t\t\t<div id=\"div001\">请选择您要上传的文件</div>\r\n\t\t\t\t<div id=\"fileInputDiv\">\r\n\t\t\t\t\t<div id=\"fileInputDiv1\"><input type=\"file\" name=\"fileName\" id=\"fileName\" size=\"30\" /></div>\r\n\t\t\t\t</div>\r\n\t\t\t</TD>\r\n\t\t</TR>\r\n\t\t<tr>\r\n\t\t\t<TD align=\"left\" style=\"padding-bottom: 20px;\" valign=\"top\">\r\n\t\t\t\t<INPUT NAME=\"submit1\" id=\"but001\" VALUE=\"上传\" TYPE=\"button\"class=\"btnButton4Font\" onclick=\"shangchuan();\">\r\n\t\t\t\t<INPUT NAME=\"submit1\" id=\"but001\" VALUE=\"取消\" TYPE=\"button\" onClick=\"javascript:window.close();\" class=\"btnButton4Font\">\r\n");
      out.write("\t\t\t</TD>\r\n\t\t</TR>\r\n\t   </TABLE>\r\n\t   </div>\r\n\t   <script type=\"text/javascript\">\r\n\t   \tfunction shangchuan(){\r\n\t   \t\tvar fileName = document.getElementById(\"fileName\").value;\r\n\t   \t\tvar formObj = document.getElementById(\"form1\");\r\n\t   \t\tformObj.submit();\r\n\t   \t}\r\n\t   </script>\r\n\t   </form>\r\n\t</body>\r\n</html>\r\n");
}
}else{
      out.write("\r\n<html>\r\n  <head>\r\n\t<meta http-equiv=\"pragma\" content=\"no-cache\">\r\n\t<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n\t<meta http-equiv=\"expires\" content=\"0\"> \r\n  </head>\r\n    <body>\r\n\t<SCRIPT language=JavaScript>\r\n\t\t");
if("1".equals(request.getAttribute("flag").toString())){ 
      out.write("\r\n\t\t\talert(\"流程导入完成！\");\r\n\t\t");
}else{ 
      out.write("\r\n\t\t\talert(\"流程导入失败！\");\r\n\t\t");
} 
      out.write("\r\n\t    window.close();\r\n\t</SCRIPT>\r\n  </body>\r\n</html>\r\n");
}
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
