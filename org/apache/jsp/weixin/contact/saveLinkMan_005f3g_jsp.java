/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:58:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.contact;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.personalwork.person.po.PersonPO;
import com.js.wap.service.WapContactBD;
import java.util.Date;

public final class saveLinkMan_005f3g_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.personalwork.person.po.PersonPO");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("com.js.wap.service.WapContactBD");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/wap2/commonImport.jsp", out, false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/weixin/common/weixin_messageReminders.jsp", out, false);
      out.write('\r');
      out.write('\n');
String path = request.getContextPath(); 
      out.write("\r\n<HEAD>\r\n\t\t<TITLE>联系人操作页面</TITLE>\r\n\t\t<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n\t\t<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n\t\t<META name=apple-touch-fullscreen content=YES>\r\n\t\t<META name=apple-mobile-web-app-capable content=no>\r\n\t\t<LINK rel=apple-touch-icon href=\"");
      out.print(path);
      out.write("/wap2/images/iphone.jpg\">\r\n\t\t<LINK rel=stylesheet type=text/css href=\"");
      out.print(path);
      out.write("/wap2/css/main_3g.css\">\r\n\t\t<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/cookie.js\"></SCRIPT>\r\n\t\t<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/util.js\"></SCRIPT>\r\n\t\t<SCRIPT type=application/x-javascript src=\"");
      out.print(path);
      out.write("/wap2/js/frost.js\"></SCRIPT>\r\n\t\t<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n</HEAD>\r\n");

String loginType = null==session.getAttribute("loginType") ? "wap" : session.getAttribute("loginType").toString();
boolean flag = false;
	request.setCharacterEncoding("UTF-8");
	//String path = request.getContextPath();
	String id=request.getParameter("id");
	WapContactBD wapContactBD = new WapContactBD();
	String type=request.getParameter("type");
	String beginIndex=request.getParameter("beginIndex");
	PersonPO po=null;
	try{
		if("0".equals(id)){
			po=new PersonPO();
		}else{
			String hql="select po from com.js.oa.personalwork.person.po.PersonPO po where po.id="+id;
			po=wapContactBD.getPersonPO(hql);
		}
		po.setLinkManName(request.getParameter("linkManName").toString());
		po.setLinkManSex(request.getParameter("linkManSex").toString());
		po.setLinkManClass(wapContactBD.getClassPO(Long.valueOf(request.getParameter("classId"))));
		po.setMobilePhone(request.getParameter("mobilePhone"));
		po.setBussinessPhone(request.getParameter("bussinessPhone"));
		po.setBussinessFax(request.getParameter("bussinessFax"));
		po.setLinkManEmail(request.getParameter("linkManEmail"));
		po.setLinkManUnit(request.getParameter("linkManUnit"));
		po.setLinkManDepart(request.getParameter("linkManDepart"));
		po.setLinkManDuty(request.getParameter("linkManDuty"));
		po.setLinkManEmail2(request.getParameter("linkManEmail2"));
		po.setLinkManEmail3(request.getParameter("linkManEmail3"));
		po.setFixedPhone(request.getParameter("fixedPhone"));
		po.setLinkManAddress(request.getParameter("linkManAddress"));
		po.setLinkManPostZip(request.getParameter("linkManPostZip"));
		if("0".equals(id)){
			po.setLinkManBirth(new Date());
			po.setCreatedEmpId(Long.valueOf(session.getAttribute("userId").toString()));
			po.setCreatedEmpName(session.getAttribute("userName").toString());
			po.setCreatedOrg(Long.valueOf(session.getAttribute("orgId").toString()));
			po.setDomainId(session.getAttribute("domainId").toString());
			po.setViewScope("0");
			po.setLinkManType(Byte.valueOf(type));
			po.setLinkManProfession("");
			po.setLinkManEnName("");
			wapContactBD.saveLinkMan(po);
		}else{
			wapContactBD.updateLinkMan(po);
		}
		flag = true;
		if(flag){
			if("weixin".equals(loginType)){
				
      out.write("<script type=\"text/javascript\">weixinMessageReminder(\"alert\", \"提示：\", \"保存成功！\", \"closeWindow()\");</script>");

			} else if("wap".equals(loginType)){
				
      out.write("<script type=\"text/javascript\">weixinMessageReminder(\"alert\", \"提示：\", \"保存成功！\", \"loadURL('txl')\");</script>");

			}
		}
		//response.sendRedirect(path + "/weixinContactAction.do?action=commonLinkMan&type="+type+"&beginIndex="+beginIndex);
	}catch(Exception e){
	e.printStackTrace();	

      out.write("\r\n\t\r\n\t\t<script type=\"text/javascript\">\r\n\t\t");

		//根据flg的值判断是否关闭当前页面
		if(flag){
			if("weixin".equals(loginType)){
				
      out.write("closeWindow();");

			} else if("wap".equals(loginType)){
				
      out.write("loadURL('txl');");

			}
		}
		
      out.write("\r\n\t\t</script>\r\n\t\r\n<body>\r\n\t<div class=\"main\">\r\n\t<div id=\"top\">\r\n\t\t\t<span id=\"lp2\">\r\n\t\t\t<div class=\"btn_3\">\r\n\t\t\t<a href=\"");
      out.print(path);
      out.write("/wap/action/WapContactAction.do?action=commonLinkMan&type=");
      out.print(type );
      out.write("&beginIndex=");
      out.print(beginIndex );
      out.write("\">返回</a>\r\n\t\t\t</div></span>\r\n\t</div>\r\n\t<br/><br/>\r\n\t<div align=\"center\"><h4>联系人操作失败</h4></div>\r\n  </div>\r\n</body>\r\n</html>\r\n");
}
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
