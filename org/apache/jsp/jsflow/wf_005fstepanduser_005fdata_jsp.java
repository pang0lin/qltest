/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:08:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.sql.*;
import java.sql.*;
import java.util.*;
import java.util.regex.*;

public final class wf_005fstepanduser_005fdata_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.util.regex");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n");

DataSource ds = new com.js.util.util.DataSourceBase().getDataSource();
Connection conn=null;
Statement stmt=null;
ResultSet rs=null;
conn=ds.getConnection();
stmt=conn.createStatement();

StringBuffer buffer=new StringBuffer("<root>");
String type=request.getParameter("type");
String range=request.getParameter("range");
String showtype=request.getParameter("showtype");//是否显示种类
String domainId = session.getAttribute("domainId")==null?"0":session.getAttribute("domainId").toString();
// 节点办理方式
String participantType = null==request.getParameter("participantType") ? "" : request.getParameter("participantType");
if("group".equals(type)){
	String userId=session.getAttribute("userId").toString();
	String orgIdString=session.getAttribute("orgIdString").toString();
	String where="";

	//取群组
	//取得用户所在的部门上级部门，判断此部门是否在该组的组织使用范围内
	//取得用户所在的组，判断用户是否在该组的组使用范围内
	if("".equals(orgIdString)){
		//组织Id为0则可以查看所以组
		where=" or 1=1";
	}else{
		orgIdString=orgIdString.substring(1,orgIdString.length()-1);
		String[] orgArr=orgIdString.split("\\$\\$");
		for(int i=0;i<orgArr.length;i++){
			where+=" or rangeorg like '%*"+orgArr[i]+"*%' ";
		}
		rs=stmt.executeQuery("select group_id from org_group where groupuserstring like '%$"+userId+"$%'");
		while(rs.next()){
			where+=" or rangegroup like '%@"+rs.getString(1)+"@%' ";
		}
		rs.close();
	}
	String sql = "";


	String databaseType=com.js.util.config.SystemCommon.getDatabaseType();
	if(databaseType.indexOf("mysql")>=0){
		sql="select group_id,group_name from org_group where ((((rangeemp is null and rangeorg is null and rangegroup is null) or (rangeemp='' and rangeorg='' and rangegroup='') or  rangeemp like '%$"+userId+"$%' "+where+" or '"+range+"' like concat('%@',group_id,'@%')) and (grouptype=0)) or (grouptype=1 and createdemp="+userId+")) and domain_id="+domainId;
	}else{
		sql="select group_id,group_name from org_group where ((((rangeemp is null and rangeorg is null and rangegroup is null) or (rangeemp='' and rangeorg='' and rangegroup='') or  rangeemp like '%$"+userId+"$%' "+where+" or '"+range+"' like jsdb.FN_LINKCHAR(jsdb.FN_LINKCHAR('%@',group_id),'@%')) and (grouptype=0)) or (grouptype=1 and createdemp="+userId+")) and domain_id="+domainId;
	}
	rs=stmt.executeQuery(sql+" order by grouporder");
	String groupId="";
	while(rs.next()){
		groupId=rs.getString(1);
		buffer.append("<node>")
			.append("<id>").append(groupId).append("</id>")
			.append("<name>").append(rs.getString(2)).append("</name>")
			.append("<parentId>").append("group").append("</parentId>")
			.append("<level>").append(1).append("</level>")
			.append("<childCount>").append(1).append("</childCount>")
			.append("<type>subgroup</type>")
			.append("<hasHref>0</hasHref>");
		if(range.indexOf("@")>=0){
			if(range.indexOf("@"+groupId+"@")>=0){
				buffer.append("<show>1</show>");
			}else{
				buffer.append("<show>0</show>");
			}
		}else{
			buffer.append("<show>1</show>");
		}

		buffer.append("</node>");
	}
	rs.close();
}
else if("groupuser".equals(type)){
	String parentOrgId=request.getParameter("parentOrgId");
	//取人
	Statement stmtt=conn.createStatement();
	ResultSet rss=stmtt.executeQuery("select a.emp_id,a.empname from org_employee a,org_user_group b,ORG_ORGANIZATION c,org_organization_user d where a.emp_id=b.emp_id and a.emp_id=d.emp_id and d.org_id=c.org_id and b.group_id="+parentOrgId+" and a.domain_id=" + domainId + " and a.userIsActive=1 and a.userIsDeleted=0 order by a.EMPDUTYLEVEL,c.ORGIDSTRING,a.USERORDERCODE,a.EMPNAME");
	while(rss.next()){
		buffer.append("<node>")
		.append("<id>").append(rss.getString(1)).append("</id>")
		.append("<name>").append(rss.getString(2)).append("</name>")
		.append("<parentId>").append(parentOrgId).append("</parentId>")
		.append("<level>").append(2).append("</level>")
		.append("<childCount>").append("0").append("</childCount>")
		.append("<type>groupuser</type>")
		.append("<hasHref>").append(1).append("</hasHref>")
		.append("<show>").append(1).append("</show>")
		.append("</node>");
	}
	rss.close();
	stmtt.close();
	//end

}
else{
	//取组织
	if((showtype.indexOf("org")>=0 || showtype.indexOf("user")>=0) && ("".equals(range) || range.indexOf("*")>=0)){
		String parentOrgId=request.getParameter("parentOrgId");
		StringBuffer rangeIdStringBuffer=new StringBuffer();
		
		String tmpSql = "";
		String databaseType=com.js.util.config.SystemCommon.getDatabaseType();
		if(databaseType.indexOf("mysql")>=0){
			tmpSql = "select orgidstring from org_organization where '"+range+"' like concat('%*',org_id,'*%') and domain_id=" + domainId;
		}else{	
			tmpSql = "select orgidstring from org_organization where '"+range+"' like jsdb.FN_LINKCHAR(jsdb.FN_LINKCHAR('%*',org_id),'*%') and domain_id=" + domainId;
		}
		rs=stmt.executeQuery(tmpSql);

		while(rs.next()){
			rangeIdStringBuffer.append(rs.getString(1));
		}
		rs.close();
		String rangeIdString=rangeIdStringBuffer.toString();

		Pattern p=null; //正则表达式
		Matcher m=null; //操作的字符串

		p = Pattern.compile("@[0-9]*@");
		m = p.matcher(range);
		range = m.replaceAll("");

		range=range.replaceAll("\\*\\*","\\$,\\$");
		range=range.replaceAll("\\*","\\$");
		String[] rangeArr=range.split(",");

		String orgId,orgName,orgHasChild,orgIdString;
		int orgLevel=0;
		int hasHref=0;
		int show=0;
		int i=0;
		rs=stmt.executeQuery("select org_id,orgName,orgHasJunior,orgLevel,orgIdString from org_organization where orgParentOrgId="+parentOrgId+" and orgstatus=0 and domain_id=" + domainId + " order by orgidstring");
		while(rs.next()){
			orgId=rs.getString(1);
			orgName=rs.getString(2).trim();
			orgHasChild=rs.getString(3);
			orgLevel=rs.getInt(4);
			orgIdString=rs.getString(5);

			buffer.append("<node>")
				.append("<id>").append(orgId).append("</id>")
				.append("<name>").append(orgName).append("</name>")
				.append("<parentId>").append(parentOrgId).append("</parentId>")
				.append("<level>").append(orgLevel).append("</level>")
				.append("<childCount>").append(1).append("</childCount>")
				.append("<type>org</type>");
			hasHref=0;
			show=0;
			if("".equals(range) || "$0$".equals(range)){
				hasHref=1;
				show=1;
			}else{
				// 上节点办理人的部门领导，不显示该部门的下属部门
				if(!"10".equals(participantType)){
					for(i=0;i<rangeArr.length;i++){
						if(orgIdString.indexOf(rangeArr[i])>0){
							hasHref=1;
							show=1;
							break;
						}
					}
				}
				if(rangeIdString.indexOf("$"+orgId+"$")>=0){
					show=1;
				}
			}


			buffer.append("<hasHref>").append(showtype.indexOf("user")>=0?"0":"1").append("</hasHref>")
				.append("<show>").append(show).append("</show>")
				.append("</node>");
		}
		rs.close();

		//取人
		if(showtype.indexOf("user")>=0){
		rs=stmt.executeQuery("select orgLevel from org_organization where org_id="+parentOrgId);
		while(rs.next()){
			orgLevel=rs.getInt(1)+1;
		}
		rs.close();

		Statement stmtt=conn.createStatement();
		ResultSet rss=stmtt.executeQuery("select a.emp_id,a.empname from org_employee a,org_organization_user b where a.emp_id=b.emp_id and (b.org_id="+parentOrgId+" or a.SIDELINEORG like '%*"+parentOrgId+"*%') and domain_id=" + domainId + " and userIsActive=1 and userIsDeleted=0 and userIsformaluser=1 order by a.EMPDUTYLEVEL,a.USERORDERCODE,a.EMPNAME,a.emp_id");
		//System.out.println("select a.emp_id,a.empname from org_employee a,org_organization_user b where a.emp_id=b.emp_id and b.org_id="+parentOrgId+" and domain_id=" + domainId + " and userIsActive=1 and userIsDeleted=0 order by a.emp_id");
		while(rss.next()){
			buffer.append("<node>")
			.append("<id>").append(rss.getString(1)).append("</id>")
			.append("<name>").append(rss.getString(2)).append("</name>")
			.append("<parentId>").append(parentOrgId).append("</parentId>")
			.append("<level>").append(orgLevel).append("</level>")
			.append("<childCount>").append("0").append("</childCount>")
			.append("<type>orguser</type>")
			.append("<hasHref>").append(1).append("</hasHref>");
			

			show=0;
			String parentOrgIdString = "";
			rs=stmt.executeQuery("select orgidstring from org_organization where org_Id="+parentOrgId+" and orgstatus=0 and domain_id=" + domainId + " order by orgidstring");
			while(rs.next()){
				parentOrgIdString=rs.getString(1);
			}
			rs.close();
			if("".equals(range) || "$0$".equals(range)){
				hasHref=1;
				show=1;
			}else{
				if(parentOrgIdString.indexOf(range)>=0){
					show=1;
				}
				for(i=0;i<rangeArr.length;i++){
					if(parentOrgIdString.indexOf(rangeArr[i])>0){
						show=1;
					}
				}
			}

			
			buffer.append("<show>").append(show).append("</show>")
			.append("</node>");
		}
		rss.close();
		stmtt.close();
		}
		//end
	}
}
stmt.close();
conn.close();
buffer.append("</root>");
out.println(buffer.toString());

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
