/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:00:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.workReport;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.oa.scheme.worklog.po.WorkLogCommentPO;
import java.text.SimpleDateFormat;
import com.js.oa.scheme.worklog.service.WorkLogBD;
import java.util.Date;
import com.js.oa.scheme.worklog.po.WorkLogPO;
import com.js.wap.util.DateTools;

public final class weixinSaveReport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


public String getHour(String startTime,String endTime){
	String[] start = startTime.split(":");
	String[] end = endTime.split(":");
	float r = ((Float.valueOf(end[0]) * 60 + Float.valueOf(end[1])) - (Float.valueOf(start[0]) * 60 + Float.valueOf(start[1]))) / 60;
	return r + "";
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("com.js.oa.scheme.worklog.po.WorkLogPO");
    _jspx_imports_classes.add("com.js.oa.scheme.worklog.po.WorkLogCommentPO");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.js.oa.scheme.worklog.service.WorkLogBD");
    _jspx_imports_classes.add("com.js.wap.util.DateTools");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n\t");

	String loginType2017 = null==session.getAttribute("loginType") ? "" : session.getAttribute("loginType").toString();
	if(!"weixin".equals(loginType2017)){
	  out.print("<script type=\"text/javascript\">window.history.forward(1);</script>");
	}

	
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

request.setCharacterEncoding("UTF-8");
String path = request.getContextPath();
Long logId = 0L;
String beginIndex = request.getParameter("beginIndex")==null ? "0" : request.getParameter("beginIndex");
String repUser = request.getParameter("repUser")==null ? "mine" : request.getParameter("repUser");
String loginType = null==session.getAttribute("loginType") ? "wap" : session.getAttribute("loginType").toString();
boolean flag = false;
SimpleDateFormat format = new SimpleDateFormat("yy-MM-dd");
WorkLogBD worklogBD = new WorkLogBD();
String action = request.getParameter("action");
System.out.println("action:"+action);
if("add".equals(action)){
	Long domainId = session.getAttribute("domainId")==null ? Long.valueOf("0") : Long.valueOf(session.getAttribute("domainId").toString());

	Long userId = new Long(session.getAttribute("userId").toString());	//取当前用户的ID
	Long orgId = new Long(session.getAttribute("orgId").toString());	//取当前用户的orgID
	String userName = session.getAttribute("userName").toString();		//取当前用户的名字

	String logContent = request.getParameter("logContent");
	String logDate = request.getParameter("logDate");
	java.util.Calendar cal = java.util.Calendar.getInstance();
	String year = String.valueOf(cal.get(java.util.Calendar.YEAR));
	
	boolean conFlag = false;

	if (null!=logContent && !"".equals(logContent) && !"null".equals(logContent) && logContent.length()<=1000) {
		conFlag = true;
	}
	if (conFlag) {
		WorkLogPO worklogPO = new WorkLogPO();

		worklogPO.setHadread("0");
		worklogPO.setLogDate(format.parse(logDate));	//暂时写成当前时间，后续更改
		worklogPO.setWorklogComment(null);
		worklogPO.setProjectName("");
		worklogPO.setLogContent(logContent);
		worklogPO.setLogWriteDate(new Date());
		worklogPO.setCreatedEmp(userId);
		worklogPO.setEmpName(userName);
		worklogPO.setCreatedOrg(orgId);
		worklogPO.setLogDomainId(domainId);
		String logType = request.getParameter("logType");
		worklogPO.setLogType(logType);
        System.out.println("logTypeSave:"+logType);
		if ("0".equals(logType)) {
			String manhour = request.getParameter("manhour");
			worklogPO.setManHour(Float.valueOf(manhour));
		} else if ("1".equals(logType)) {
			String startTime = request.getParameter("startTime");
			String endTime = request.getParameter("endTime");

			worklogPO.setStartPeriod(DateTools.addZero(startTime));
			worklogPO.setEndPeriod(DateTools.addZero(endTime));
			
			worklogPO.setManHour(Float.valueOf(getHour(startTime,endTime)));
		} else {
			System.out.println("REPORT SAVED FAILED!");
		}

		flag = worklogBD.addWorkLog(worklogPO);
	}
	if (flag) {
		//response.sendRedirect(request.getContextPath() + "/weixinReportAction.do?action=getWapRepList&repUser=mine");
	}
} else if("modify".equals(action)){
	logId = Long.valueOf(request.getParameter("logId"));
	
	WorkLogPO worklogPO = worklogBD.selectSingleWorkLogPO(logId);
	String logType = request.getParameter("logType");
	worklogPO.setLogDate(format.parse(request.getParameter("logDate")));
	worklogPO.setLogType(logType);

	if ("0".equals(logType)) {
		String manhour = request.getParameter("manhour");
		worklogPO.setManHour(Float.valueOf(manhour));
	} else if ("1".equals(logType)) {
		String startTime = request.getParameter("startTime");
		String endTime = request.getParameter("endTime");

		worklogPO.setStartPeriod(DateTools.addZero(startTime));
		worklogPO.setEndPeriod(DateTools.addZero(endTime));
		
		worklogPO.setManHour(Float.valueOf(getHour(startTime,endTime)));
	} else {
		System.out.println("REPORT SAVED FAILED!");
	}
	worklogPO.setLogContent(request.getParameter("logContent"));
	flag = worklogBD.modifyWorkLog(worklogPO);
	if (flag) {
		//response.sendRedirect(request.getContextPath() + "/weixinReportAction.do?action=getWapRepList&repUser="+repUser);
	}
} else if("addComment".equals(action)){	// 日报添加评价留言
	logId = Long.valueOf(request.getParameter("logId"));
	WorkLogPO worklogPO = worklogBD.selectSingleWorkLogPO(logId);
	Long userId = new Long(session.getAttribute("userId").toString()); // 取当前用户的ID
	String userName = session.getAttribute("userName").toString(); 	// 取当前用户的名字
	Long domainId = session.getAttribute("domainId") == null ? Long.valueOf("0") :
				Long.valueOf(session.getAttribute("domainId").toString());
     
	WorkLogCommentPO workLogCommentPO = new WorkLogCommentPO();
	workLogCommentPO.setCommentContent(request.getParameter("logComment"));
	workLogCommentPO.setCommentIssuerId(userId);
	workLogCommentPO.setCommentIssuerName(userName);
	workLogCommentPO.setCommentIssuerOrg(session.getAttribute("orgName").toString());
	workLogCommentPO.setCommentIssueTime(new Date());
	workLogCommentPO.setDomainId(domainId);
	// 标志已读
 	if (userId.longValue() != worklogPO.getCreatedEmp().longValue()) {
 		worklogPO.setHadread("1");
	}
	worklogBD.modifyWorkLog(worklogPO);
	workLogCommentPO.setWorklog(worklogPO);

    flag = worklogBD.addWorkLogComment(workLogCommentPO);
	if(flag){	// 评价留言信息保存成功，重定向到日报详细页面
		//response.sendRedirect(request.getContextPath() + "/weixin/workReport/weixinReadReport.jsp?logId=" 
				//+ logId + "&repUser=" + repUser + "&beginIndex=" + beginIndex);
	}
} else{
	response.sendRedirect(request.getContextPath() + "/weixinReportAction.do?action=getWapRepList&repUser="+repUser);
}

      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/wap2/commonImport.jsp", out, false);
      out.write('\r');
      out.write('\n');
if(flag){ 
      out.write("\r\n\r\n\t<script type=\"text/javascript\">\r\n\t");

	if("weixin".equals(loginType)){
		
      out.write("closeWindow();");

	} else if("wap".equals(loginType)){
		
      out.write("\r\n\t\tgzhbloadURL(\"");
      out.print(action);
      out.write("\",'gzhb');\r\n\t\t//window.location.href=\"/jsoa/weixinReportAction.do?action=getWapRepList&repUser=other\";\r\n\t\t");

	}
	
      out.write("\r\n\t</script>\r\n\r\n\r\n");
}else{ 
      out.write("\r\n<HTML>\r\n\t<HEAD>\r\n\t\t<TITLE>操作失败</TITLE>\r\n\t\t<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n\t\t<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n\t\t<META name=apple-touch-fullscreen content=YES>\r\n\t\t<META name=apple-mobile-web-app-capable content=no>\r\n\t\t\r\n\t\t<LINK rel=apple-touch-icon href=\"");
      out.print(path);
      out.write("/wap2/images/iphone.jpg\">\r\n\t\t<link rel=\"stylesheet\" href=\"/jsoa/css/weixin/weixin_main.css\">\r\n\t</HEAD>\r\n\r\n\t<body>\r\n\t\t<div class=\"form\">\r\n\t\t\t<div class=\"item\">\r\n\t\t\t\t<div class=\"content\"><b>信息保存失败！</b></div>\r\n\t\t\t</div>\r\n\t\t</di>\r\n\t\t\r\n\t\t<!-- 按钮 -->\r\n\t\t<div class=\"footer\">\r\n\t      \t<div class=\"buttons\">\r\n\t      \t\t<div class=\"button\" onclick=\"javascript:location.href='");
      out.print(path);
      out.write("/weixin/workReport/weixinReadReport.jsp?logId=");
      out.print(logId );
      out.write("&repUser=");
      out.print(repUser );
      out.write("&beginIndex=");
      out.print(beginIndex );
      out.write("'\">返回</div>\r\n\t\t\t</div>\r\n\t    </div>\r\n\t</body>\r\n</html>\r\n");
}
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
