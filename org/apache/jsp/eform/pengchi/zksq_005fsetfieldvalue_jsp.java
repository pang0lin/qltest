/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:03:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.eform.pengchi;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLEncoder;
import com.js.util.util.DataSourceBase;
import com.js.oa.form.pengchi.UtilForZksq;
import java.util.Map;
import java.util.HashMap;

public final class zksq_005fsetfieldvalue_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("com.js.oa.form.pengchi.UtilForZksq");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n");

//价格申请单根据料号检索信息
response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

String sql="";
String para=request.getParameter("para");//检索字段
String fields=request.getParameter("fields");//查询出的字段
String flag=request.getParameter("flag");
Map<String,String> result=new HashMap<String,String>();
//物料信息
Map<String,String> resultWl=UtilForZksq.getWLinfo(para);
//货类信息
Map<String,String> resultHl=UtilForZksq.getHl(para);
//折扣信息
String zk="";
if(null !=resultHl && !resultHl.get("hldm").equals("")){
	zk=UtilForZksq.getZk(resultHl.get("hldm"));
}
if(null !=zk && !zk.equals("")){
	zk=String.valueOf(Float.valueOf(zk)/100.0);	
}

StringBuffer buffer=new StringBuffer("<?xml version=\"1.0\" encoding=\"GBK\"?><root>");
/*
<root>
   <data>      
      <formfield>jst_1230_f3340</formfield>
      <fetchdata>张三</fetchdata>  0:直接给字段赋值  1:下拉框类型需要 id与text      
   </data>   
</root>
*/
try{	
	
		String[] fieldArr=fields.split(",");
		for(int i=0;i<fieldArr.length;i++){
			
			buffer.append("<data>");
			buffer.append("<formfield>").append(fieldArr[i]).append("</formfield>");
			//if(i==0){//货类名称
			//	buffer.append("<fielddata>").append(resultHl.get("hlmc")==null?"*!KongValue!*":URLEncoder.encode(resultHl.get("hlmc"), "utf-8")).append("</fielddata>");
			//}else 
			if(i==0){//品名
				buffer.append("<fielddata>").append(resultWl.get("pm")==null?"*!KongValue!*":URLEncoder.encode(resultWl.get("pm"), "utf-8")).append("</fielddata>");
			}else if(i==1){//规格
				buffer.append("<fielddata>").append(resultWl.get("gg")==null?"*!KongValue!*":URLEncoder.encode(resultWl.get("gg"), "utf-8")).append("</fielddata>");
			}else if(i==2){//面价
				buffer.append("<fielddata>").append(resultWl.get("mj")==null?"*!KongValue!*":URLEncoder.encode(resultWl.get("mj"), "utf-8")).append("</fielddata>");
			}else if(i==3){//原折扣
				buffer.append("<fielddata>").append(zk==null?"*!KongValue!*":URLEncoder.encode(zk, "utf-8")).append("</fielddata>");
			}
			
			buffer.append("</data>");
		}		
}catch(Exception ex){
	
	ex.printStackTrace();
}

buffer.append("</root>");
//System.out.println("-------"+buffer.toString());
out.clear();
out.print(buffer.toString());

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
