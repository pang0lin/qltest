/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:05:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.doc.doc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.doc.doc.service.SenddocumentBD;
import java.util.List;
import java.util.ArrayList;

public final class choosePerson_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-nested.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-tiles.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-logic.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-html.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-template.tld", Long.valueOf(1499751390000L));
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-bean.tld", Long.valueOf(1499751390000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.doc.doc.service.SenddocumentBD");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

      out.write('\r');
      out.write('\n');

String field=request.getParameter("field");
String fieldId=request.getParameter("fieldId");
String type=request.getParameter("type");

List list=new ArrayList();
SenddocumentBD bd=new SenddocumentBD();
list=bd.getAllSendDocumentUnitPO();

 /* if("mainToPerson".equals(type)){
	  Object [] obj1=new Object []{"1","主送1"};
	  Object [] obj2=new Object []{"2","主送2"};
	  Object [] obj3=new Object []{"3","主送3"};
     list.add(obj1);
	 list.add(obj2);
	 list.add(obj3);

  } 

  if("copyToPerson".equals(type)){
	  Object [] obj21=new Object []{"1","抄送1"};
	  Object [] obj22=new Object []{"2","抄送2"};
	  Object [] obj23=new Object []{"31","抄送3"};
     list.add(obj21);
	 list.add(obj22);
	 list.add(obj23);
 
  }*/

      out.write("\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">\r\n<meta name=\"GENERATOR\" content=\"Microsoft FrontPage 4.0\">\r\n<meta name=\"ProgId\" content=\"FrontPage.Editor.Document\">\r\n<title>选择字号</title>\r\n<link href=\"skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<script src=\"/jsoa/js/js.js\" language=\"javascript\"></script>\r\n<script language=\"javascript\" src=\"js/openEndow.js\"></script>\r\n</head>\r\n<body bgcolor=\"#B7B7B7\" onLoad=\"resizeWin(300,270);\">\r\n<table width=\"300\" height=\"270\" border=\"0\">\r\n<tr> \r\n<td width=\"200\" height=\"224\"  valign=\"top\">\r\n<table width=\"200\" border=\"0\">\r\n<tr><td width=\"180\" align=\"left\">请选择:\r\n</td>\r\n<tr>\r\n<tr><td height=\"200\" align=\"left\" valign=\"top\" width=\"100%\"><select size=12 name=\"field\" multiple=\"true\" style=\"width:100%;\">\r\n\r\n   ");
if(list!=null&&list.size()>0){
      for(int i=0;i<list.size();i++){
	   Object obj[]=(Object[])list.get(i);
      out.write("\r\n\r\n\t     <option value=\"");
      out.print(obj[0]);
      out.write('"');
      out.write('>');
      out.print(obj[2]);
      out.write("</option>\r\n\t  \r\n\t  ");
}
   
     
   }
      out.write("\r\n\r\n</select></td> \r\n</tr>\r\n</table>\r\n</td>\r\n\r\n\r\n\r\n<td width=\"90\" valign=\"top\" align=\"left\">\r\n<table border=\"0\">\r\n <tr>\r\n <td align=\"left\"><button class=\"btnButton4Font\" onClick=\"javascript:chooseOk();\"> 确&nbsp;定</button></td>\r\n \r\n </tr>\r\n <tr>\r\n <td align=\"left\"><button class=\"btnButton4Font\" onClick=\"javascript:cancel();\"> 取&nbsp;消</button></td>\r\n </tr>\r\n\r\n</table></td></tr>\r\n</table>\r\n</body>\r\n</html>\r\n\r\n<script>\r\nfunction chooseOk(){\r\n\tvar wordVaules=\"\";\r\n\tvar wordTexts=\"\";\r\n\r\n   \tnLen =document.all.field.length;\r\n\tfor(i=0;i<nLen;i++){\r\n\r\n\t\tvar strValue =document.all.field.options(i).value;\r\n\t\tvar strText = document.all.field.options(i).text;\r\n\r\n\t\tif(document.all.field.options(i).selected){\r\n\t\t   wordVaules=wordVaules+strValue+\",\";\r\n\t\t   wordTexts=wordTexts+strText+\",\";\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tif(wordTexts.length>1){\r\n\t\t wordTexts=wordTexts.substring(0,wordTexts.length-1);\r\n\t\r\n\t}\r\n\tif(wordVaules.length>1){\r\n\t\t wordVaules=wordVaules.substring(0,wordVaules.length-1);\r\n\t}\r\n\r\n\teval(\"opener.window.document.all.\"+\"");
      out.print(field);
      out.write("\").value=wordTexts;\r\n\teval(\"opener.window.document.all.\"+\"");
      out.print(fieldId);
      out.write("\").value=wordVaules;\r\n\r\n     \r\n window.close();\r\n}\r\n\r\nfunction  cancel(){\r\n\r\n\twindow.close();\r\n\r\n}\r\n</script>\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
