/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:59:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.workflow.daibanflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.util.DataSourceBase;

public final class jsflow_005freopenForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

String processId=request.getParameter("processId");
String tableId=request.getParameter("tableId");
String recordId=request.getParameter("recordId");
String wfWorkId=request.getParameter("wfWorkId");
java.sql.Connection conn=null;
try{
	conn=new DataSourceBase().getDataSource().getConnection();
	java.sql.Statement stmt=conn.createStatement();
	java.sql.ResultSet rs;
	
	String sql="select workflowprocessname,accessdatabaseid,processtype,remindfield,formtype,startjsp from jsf_workflowprocess where wf_workflowprocess_id="+processId;
				
	rs=stmt.executeQuery(sql);
	String processName,accessdatabaseid,processType,remindField,formType,startjsp;
	if(rs.next()){		
		processName=rs.getString(1);
		accessdatabaseid=rs.getString(2);
		processType=rs.getString(3);
		remindField=rs.getString(4);
		formType=rs.getString(5);			
		startjsp=rs.getString(6);
		
		
      out.write("\r\n\t\t<script type=\"text/javascript\">\r\n\t\t<!--\r\n\t\t");
if("1".equals(request.getParameter("resubmit"))){
		
      out.write("\r\n\t\twindow.opener.location.reload();\r\n\t\t");
}
      out.write("\r\n\t\tvar url='/jsoa/weiXinJsFlowAddAction.do?action=draftForm&wfWorkId=");
      out.print(wfWorkId);
      out.write("&processId=");
      out.print(processId);
      out.write("&tableId=");
      out.print(tableId);
      out.write("&record=");
      out.print(recordId);
      out.write("&processName=");
      out.print(processName);
      out.write("&processType=");
      out.print(processType);
      out.write("&remindField=");
      out.print(remindField);
      out.write("&moduleId=1&formType=");
      out.print(formType);
      out.write("&jspFile=");
      out.print(startjsp);
      out.write("&workStatus=-2&appBh=draftForm';\r\n\t\tlocation.href=url;\r\n\t\t//-->\r\n\t\t</script>\r\n\t\t");

		
	}else{
		//记录不存在了
		
      out.write("\r\n\t\t<script type=\"text/javascript\">\r\n\t\t<!--\r\n\t\talert(\"加载数据错误，请与管理员联系！\");\r\n\t\t");
if("1".equals(request.getParameter("resubmit"))){
		
      out.write("\r\n\t\twindow.opener.location.reload();\r\n\t\t");
}
      out.write("\r\n\t\twindow.close();\t\r\n\t\t\t\r\n\t\t//-->\r\n\t\t</script>\r\n\t\t");

	}
	rs.close();
	stmt.close();
	conn.close();

}catch(Exception ex){
	if(conn!=null){
		conn.close();
	}
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
