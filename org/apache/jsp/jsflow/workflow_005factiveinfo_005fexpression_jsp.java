/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:06:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class workflow_005factiveinfo_005fexpression_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"/public/jsp/error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n<html>\r\n<head>\r\n<title>新表达式</title>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=GBK\">\r\n<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<script src=\"/jsoa/js/js.js\" language=\"javascript\"></script>\r\n<script language=\"javascript\" src=\"../js/checkForm.js\"></script>\r\n</head>\r\n\r\n<body  onload=\"resizeWin(700,400);\" class=\"MainFrameBox Pupwin\">\r\n<table width=\"100%\" border=\"0\" cellpadding=\"10\" cellspacing=\"0\" class=\"docBoxNoPanel\">\r\n<form name=\"form1\" method=\"post\" action=\"\">\r\n\t<!-- <tr>\r\n\t\t<td width=\"13%\"> 变量：</td>\r\n\t\t<td width=\"19%\">\r\n\t\t\t<input name=\"variable\"  type=\"text\"  style=\"width:100%;\"  class=\"inputText\">\r\n\t\t</td>\r\n\t\t<td width=\"13%\"> 操作符：</td>\r\n\t\t<td>\r\n\t\t\t<select name=\"operate\"  style=\"width:100%;\">\r\n\t\t\t\t<option value=\"number\">==对象操作==</option>\r\n\t\t\t\t<option value=\">=\">等于(equals)</option>\r\n\t\t\t\t<option value=\">=\">不等于(!equals())</option>\r\n\t\t\t\t<option value=\"number\">==数值操作==</option>\r\n\t\t\t\t<option value=\"<\">小于(&lt;)</option>\r\n\t\t\t\t<option value=\"<=\">不大于(&lt;=)</option>\r\n                <option value=\"!=\">不等于(!=)</option>\r\n                <option value=\"=\">等于(==)</option>\r\n                <option value=\">\">大于(&gt;)</option>\r\n");
      out.write("                <option value=\">=\">不小于(&gt;=)</option>\r\n             </select> \r\n\t\t</td>\r\n        <td  width=\"13%\">比较值：</td>\r\n\t\t<td width=\"19%\"><input name=\"compareValue\"  type=\"text\"  style=\"width:100%;\"  class=\"inputText\"></td>\r\n\t</tr> -->\r\n\t<tr>\r\n\t\t<td colspan=\"6\">   \t\t\t  \r\n\t\t\t<textarea name=\"expression\"  type=\"text\"  style=\"width:100%;height=60\"  class=\"inputTextarea\"><</textarea>\r\n        </td>\r\n\t</tr>\r\n    <tr>\r\n\t\t<td colspan=\"6\" align=\"center\"> \r\n\t\t\t<!-- <button class=\"btnButton2font\" onclick=\"add('')\">增加</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('')\">删除</button> -->\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('+')\">加</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('-')\">减</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('*')\">乘</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('/')\">除</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('&&')\">与</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('||')\">或</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('!')\">非</button>\r\n");
      out.write("\t\t\t<button class=\"btnButton2font\" onclick=\"add('(')\">(</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add(')')\">)</button><br>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('<')\">小于</button>\r\n\t\t\t<button class=\"btnButton4font\" onclick=\"add('>=')\">不小于</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('>')\">大于</button>\r\n\t\t\t<button class=\"btnButton4font\" onclick=\"add('<=')\">不大于</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"add('==')\">等于</button>\r\n\t\t\t<button class=\"btnButton4font\" onclick=\"add('!=')\">不等于</button>\r\n        </td>\r\n\t</tr>\r\n\t\r\n    <tr>\r\n\t\t<td colspan=\"6\">   \r\n\t\t\t<font style=\"color:red\">注：⊙表达式必须严格符合java语法。<br>⊙小于(&lt;)、不大于(&lt;=)、不等于(!=)、等于(==)、大于(&gt;)、不小于(&gt;=)用于数值类型的比较。<br>\r\n            ⊙对象等于(equals)、对象不等于(!equals())用于除数值类型以外的比较。<br></font>\r\n        </td>\r\n\t</tr>\r\n\t<tr>\r\n\t      <td colspan=6>\r\n\t\t    <button class=\"btnButton4font\" onclick=\"javascript:save();\">确定</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"javascript:form1.reset();\">重置</button>\r\n\t\t\t<button class=\"btnButton2font\" onclick=\"javascript:window.close()\">退出</button>\r\n");
      out.write("\t\t  </td>\r\n        </tr>  \r\n </form>\r\n</table>\r\n</body>\r\n</html>\r\n<script language=\"javascript\">\r\n<!--\r\nfunction save(){\r\n   if(opener.document.all.expression.length){\r\n\t\topener.document.all.expression[");
      out.print(request.getParameter("index"));
      out.write("].value=document.all.expression.value;\r\n\t}else{\r\n\t\topener.document.all.expression.value=document.all.expression.value;\r\n\t}\r\n\twindow.close();\r\n}\r\n\r\nfunction add(tag){\r\n\tdocument.all.expression.value += tag;\r\n}\r\n\r\nif(opener.document.all.expression.length){\r\n\t\tdocument.all.expression.value = opener.document.all.expression[");
      out.print(request.getParameter("index"));
      out.write("].value;\r\n\t}else{\r\n\t\tdocument.all.expression.value = opener.document.all.expression.value;\r\n\t}\r\n//-->\r\n</script>\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
