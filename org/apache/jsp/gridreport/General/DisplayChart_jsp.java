/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:41:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.gridreport.General;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.sun.tools.javac.resources.javac;
import java.util.*;
import com.js.util.util.DataSourceBase;

public final class DisplayChart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.sun.tools.javac.resources.javac");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);
response.setCharacterEncoding("GBK");

String ShowToolbar = "";//是否显示菜单
if(request.getParameter("ShowToolbar")!=null){
	ShowToolbar = "<param name='ShowToolbar' value='false'>";
}

String queryString=request.getQueryString();
String dataString = queryString.substring(queryString.indexOf(".grf")+4);

String grfName = request.getParameter("report");
String data = request.getParameter("data");

List<String[]> sqlList = new ArrayList<String[]>();//保存获得的图表名称和对应的sql语句
List<String[]> condList = new ArrayList<String[]>();
String js = "";
String reportId = "0";
String chartSql = "";
DataSourceBase base = new DataSourceBase();
try{
	base.begin();
	String sql = "SELECT reportId,chartSql FROM oa_report WHERE grfName='"+grfName+"'";
	//System.out.println("displayChart.jsp   "+sql);
	java.sql.ResultSet rs = base.executeQuery(sql);
	if(rs.next()){
		reportId = rs.getString(1);
		chartSql = rs.getString(2);
	}
	rs.close();
	chartSql = chartSql.replaceAll("[\\t\\n\\r]","").replaceAll("：",":").replaceAll("；",";").replaceAll("）",")").replaceAll("（","(");//将内容区域的回车换行去除 
	String[] sqls = chartSql.split(";");
	for(int i=0;i<sqls.length;i++){//对sql语句进行解析，获得图表名和对应的sql语句
		if(sqls[i].indexOf(":")>=0){
			String[] result = sqls[i].split(":");
			sqlList.add(result);
		}
	}
	if(!"0".equals(reportId)){
		sql = "SELECT beReplaceName,beReplaceString,sqlType FROM oa_reportreplace WHERE reportId="+reportId;
		rs = base.executeQuery(sql);
		while(rs.next()){
			condList.add(new String[]{rs.getString(1),rs.getString(2)});
			js += "if(document.getElementById('"+rs.getString(2)+"').value!='')"+
					"{url+='&"+rs.getString(2)+"='+encodeURI(encodeURI(document.getElementById('"+rs.getString(2)+"').value));}\n";
		}
	}
}catch(Exception e){
	e.printStackTrace();
}finally{
	base.end();
}

      out.write("\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n\t<title>Web报表(图表)显示</title>\r\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=GBK\"/>\r\n\t<script src=\"../CreateControl.js\" type=\"text/javascript\"></script>\r\n\t<script src=\"../GRUtility.js\" type=\"text/javascript\"></script>\r\n\t<script src=\"/jsoa/userdb/ajax.js\"></script>\r\n\t");
if(!"".equals(js)){ 
      out.write("\r\n    <script type=\"text/javascript\">\r\n    \tfunction searchUrl(){\r\n    \t\turl = \"/jsoa/gridreport/General/DisplayChart.jsp?data=data/xmlChart.jsp&report=");
      out.print(grfName );
      out.write("\";\r\n    \t\t");
      out.print(js );
      out.write("\r\n    \t\tlocation.href = url;\r\n    \t}\r\n    </script>");
} 
      out.write("\r\n\t<script type=\"text/javascript\">\r\n\t\tvar arrayObj = new Array();　\r\n\t\tfunction window_onload() {\r\n\t\t    btnRefresh_onclick();\r\n\t\t}\r\n\t\tfunction btnRefresh_onclick() {\r\n\t\t    ReportViewer.Stop();\r\n\t\t    var Report = ReportViewer.Report;\r\n\t\t\t");
for(int i=0;i<sqlList.size();i++){
			String[] sqlInfo = sqlList.get(i);
      out.write("\r\n\t\t    var Chart = Report.ControlByName(\"");
      out.print(sqlInfo[0] );
      out.write("\").AsChart;\r\n\t\t    arrayObj[");
      out.print(i );
      out.write("] = Chart; \r\n\t\t    //从网上取数据并转存到xmlDom中\r\n\t\t    var xml = \"<xml></xml>\";\r\n\t\t    if(navigator.userAgent.indexOf(\"MSIE\")>0){\r\n\t\t    \txml = Report.ExtractXMLFromURL(\"/jsoa/gridreport/data/xmlChart.jsp?reportId=");
      out.print(reportId );
      out.write("&chartName=");
      out.print(sqlInfo[0]+dataString );
      out.write("\");\r\n\t\t    }else{\r\n\t\t    \tvar xmlhttp = getXmlHttp();\r\n\t\t    \txmlhttp.open(\"get\",\"/jsoa/gridreport/data/xmlChart.jsp?reportId=");
      out.print(reportId );
      out.write("&chartName=");
      out.print(sqlInfo[0]+dataString );
      out.write("\",false);\r\n\t\t    \txmlhttp.send(null);\r\n\t\t    \tif(xmlhttp.readyState==4&&xmlhttp.status==200) {\r\n\t\t    \t\txml = xmlhttp.responseText;\r\n\t\t    \t}\r\n\t\t    }\r\n\t\t    //alert(xml);\r\n\t\t    ");
if(sqlInfo[1].startsWith("(模式1)")){
		    	//XML数据中，第一列数据为组的标签文字或序号，第二列数据为第一个序列与对应组的数据，
		    	//第三列数据为第二个序列与对应组的数据，依次类推... 
      out.write("\r\n\t\t    \tChart.LoadDataFromXML(xml, true, true, true);\r\n\t\t    ");
}else{ 
		    	//XML数据中，第一列数据为序列的标签文字或序号，第二列数据为组的标签文字或序号，
		    	//第三列数据为对应序列与组的数据 
      out.write("\r\n\t\t    \tChart.LoadDataFromXML(xml, false, true, true);\r\n\t\t    ");
}} 
      out.write("\r\n\t\t    //启动报表运行\r\n\t\t    ReportViewer.Start();\r\n\t\t}\r\n\t\tfunction Radio1_onclick(chartType) {\r\n\t\t\tfor(var i=0;i<arrayObj.length;i++){\r\n\t    \t\tarrayObj[i].ChartType = chartType;\r\n\t    \t}\r\n\t\t    ReportViewer.QuickRefresh();\r\n\t\t}\r\n    </script>\r\n    <style type=\"text/css\">\r\n        html,body {\r\n            margin:0;\r\n            height:100%;\r\n        }\r\n    </style>\r\n</head>\r\n<body style=\"margin:0\" onload=\"window_onload()\">\r\n    <table height=\"100%\" width=\"100%\">\r\n    ");
if("".equals(ShowToolbar)){ 
      out.write("\r\n        <tr style=\"display:none;\"><td style=\"height: 20px; width: 100%; font-size:12px;\" atomicselection=\"true\">图表样式：&nbsp;\r\n                <input id=\"Radio1\" type=\"radio\" type=\"text/javascript\" onclick=\"Radio1_onclick(1)\" checked=\"CHECKED\" name=\"ChartType\" value=\"1\" />柱图&nbsp;\r\n                <input id=\"Radio2\" type=\"radio\" type=\"text/javascript\" onclick=\"Radio1_onclick(2)\" name=\"ChartType\" value=\"2\" />饼图&nbsp;\r\n                <input id=\"Radio3\" type=\"radio\" type=\"text/javascript\" onclick=\"Radio1_onclick(3)\" name=\"ChartType\" value=\"3\" />折线图&nbsp;\r\n                <input id=\"Radio4\" type=\"radio\" type=\"text/javascript\" onclick=\"Radio1_onclick(4)\" name=\"ChartType\" value=\"4\" />叠加柱图&nbsp;\r\n                <input id=\"Radio5\" type=\"radio\" type=\"text/javascript\" onclick=\"Radio1_onclick(5)\" name=\"ChartType\" value=\"7\" />曲线图\r\n        </td></tr>\r\n        ");
if(condList.size()>0){ 
      out.write("\r\n        <tr><td style=\"height: 20px; width: 100%; font-size:12px;\">查询条件：\r\n        ");
for(int i=0;i<condList.size();i++){
        	String[] obj = condList.get(i); 
      out.write("\r\n        \t&nbsp;");
      out.print(obj[0]+":" );
      out.write("<input type=\"input\" name=\"");
      out.print(obj[1] );
      out.write("\" id=\"");
      out.print(obj[1] );
      out.write("\" value=\"\" style=\"width:100px;\"/>&nbsp;\r\n        ");
} 
      out.write("\r\n        \t<input type=\"button\" onclick=\"searchUrl();\" value=\"查询\" />\r\n        </td></tr>");
}} 
      out.write("\r\n        <tr height=\"100%\">\r\n            <td colspan=\"2\">\r\n                <script type=\"text/javascript\"> \r\n                \tCreateDisplayViewerEx(\"100%\", \"100%\", \"/jsoa/gridreport/grf/");
      out.print(grfName );
      out.write("\", \"\", true, \"");
      out.print(ShowToolbar );
      out.write("\");\r\n                </script>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
