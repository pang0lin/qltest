/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:48:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.routine.boardroom;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;
import com.js.util.util.DataSourceBase;
import java.util.Calendar;
import com.js.oa.routine.boardroom.service.BoardRoomBD;
import com.js.oa.routine.boardroom.po.*;
import java.util.Date;

public final class selectImpropriateTime_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.js.oa.routine.boardroom.po");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("com.js.oa.routine.boardroom.service.BoardRoomBD");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
	
response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

if(null!=request.getParameter("check") && null!=request.getParameter("motif")){
	String motifValue =  request.getParameter("motif");	// 会议主题
	int meetingCircleValue = Integer.valueOf(request.getParameter("meetingCircle"));	// 1：每周，2：每月，3：每年
	int meetingLengthValue = Integer.valueOf(request.getParameter("meetingLength"));	// 1：当天，2：多天
	String meetingDateBeginValue = request.getParameter("meetingDateBegin").replace("/","-");	// 会议开始日期
	String meetingDateEndValue = request.getParameter("meetingDateEnd").replace("/","-");	// 会议结束日期
	String everyMeetingBeginValue = request.getParameter("everyMeetingBegin");
	String everyMeetingEndValue = request.getParameter("everyMeetingEnd");
	int everyMeetingBeginTimeValue = Integer.valueOf(request.getParameter("everyMeetingBeginTime"));	// 会议开始时间
	int everyMeetingEndTimeValue = Integer.valueOf(request.getParameter("everyMeetingEndTime"));	// 会议结束时间
	long applyIdIdValue = Long.valueOf(request.getParameter("applyIdId"));	// -1
	long boardroomIdValue = Long.valueOf(request.getParameter("boardroomId"));	// 会议室ID
	long regularIdValue = Long.valueOf(request.getParameter("regularId"));	// -1
	String result = new BoardRoomBD().applyTime1(new Object[]{motifValue,meetingCircleValue,meetingLengthValue,
			meetingDateBeginValue,meetingDateEndValue,everyMeetingBeginValue,everyMeetingEndValue,everyMeetingBeginTimeValue,
			everyMeetingEndTimeValue,applyIdIdValue,boardroomIdValue,regularIdValue});
	out.println(result);
} else if(request.getParameter("motif") != null){//定期会议检查
	String motifValue =  request.getParameter("motif");	// 会议主题
	int meetingCircleValue = Integer.valueOf(request.getParameter("meetingCircle"));	// 1：每周，2：每月，3：每年
	int meetingLengthValue = Integer.valueOf(request.getParameter("meetingLength"));	// 1：当天，2：多天
	String meetingDateBeginValue = request.getParameter("meetingDateBegin").replace("/","-");	// 会议开始日期
	String meetingDateEndValue = request.getParameter("meetingDateEnd").replace("/","-");	// 会议结束日期
	String everyMeetingBeginValue = request.getParameter("everyMeetingBegin");
	String everyMeetingEndValue = request.getParameter("everyMeetingEnd");
	int everyMeetingBeginTimeValue = Integer.valueOf(request.getParameter("everyMeetingBeginTime"));	// 会议开始时间
	int everyMeetingEndTimeValue = Integer.valueOf(request.getParameter("everyMeetingEndTime"));	// 会议结束时间
	long applyIdIdValue = Long.valueOf(request.getParameter("applyIdId"));	// -1
	long boardroomIdValue = Long.valueOf(request.getParameter("boardroomId"));	// 会议室ID
	long regularIdValue = Long.valueOf(request.getParameter("regularId"));	// -1
	boolean flag = new BoardRoomBD().applyTime(new Object[]{motifValue,meetingCircleValue,meetingLengthValue,
			meetingDateBeginValue,meetingDateEndValue,everyMeetingBeginValue,everyMeetingEndValue,everyMeetingBeginTimeValue,
			everyMeetingEndTimeValue,applyIdIdValue,boardroomIdValue,regularIdValue});
	if(flag){//被占用
		out.println("-1");
	}else{
		out.println("0");
	}
}else if(request.getParameter("destineDateBeginTime") == null){

	String destineDateEndTime = request.getParameter("destineDateEndTime");
	Long meetingId = Long.parseLong(request.getParameter("meetingId"));
	BoardRoomBD boardRoomBD = new BoardRoomBD();
	boolean flag = boardRoomBD.updateMeetingTime(meetingId,destineDateEndTime);
	if(flag){
		out.println("0");
	}else{
		out.println("-1");
	}

} else if(null != request.getParameter("check")){	// 验证会议申请时间段是否冲突
	Date destineDate = new Date(request.getParameter("destineDate"));
	//System.out.println(format.format(destineDate));
	String destineDateBeginTime = request.getParameter("destineDateBeginTime");
	String destineDateEndTime = request.getParameter("destineDateEndTime");
	Date endDate = (request.getParameter("endDate")==null||"".equals(request.getParameter("endDate"))||
						"null".equals(request.getParameter("endDate")))?
						new Date(request.getParameter("destineDate")):new Date(request.getParameter("endDate"));
	Long beginDateLong = destineDate.getTime()+(Long.valueOf(destineDateBeginTime)*1000);
	Long endDateLong = endDate.getTime()+(Long.valueOf(destineDateEndTime)*1000);
	
	String boardroomId = (request.getParameter("boardroomId")==null||"".equals(request.getParameter("boardroomId"))||
						"null".equals(request.getParameter("boardroomId")))?"-1":request.getParameter("boardroomId");
	String boardroomApplyId = (request.getParameter("boardroomApplyId")==null||"".equals(request.getParameter("boardroomApplyId"))||
						"null".equals(request.getParameter("boardroomApplyId")))?"-1":request.getParameter("boardroomApplyId");
	
	String result = new BoardRoomBD().applyTime3(boardroomId, boardroomApplyId, beginDateLong, endDateLong, "-1");
	out.print(result);
}else {
	//System.out.println(request.getParameter("destineDate"));
	Date destineDate = new Date(request.getParameter("destineDate"));
	//System.out.println(format.format(destineDate));
	String destineDateBeginTime = request.getParameter("destineDateBeginTime");
	String destineDateEndTime = request.getParameter("destineDateEndTime");
	Date endDate = (request.getParameter("endDate")==null||"".equals(request.getParameter("endDate"))||
						"null".equals(request.getParameter("endDate")))?
						new Date(request.getParameter("destineDate")):new Date(request.getParameter("endDate"));
	Long beginDateLong = destineDate.getTime()+(Long.valueOf(destineDateBeginTime)*1000);
	Long endDateLong = endDate.getTime()+(Long.valueOf(destineDateEndTime)*1000);
	
	String boardroomId = (request.getParameter("boardroomId")==null||"".equals(request.getParameter("boardroomId"))||
						"null".equals(request.getParameter("boardroomId")))?"-1":request.getParameter("boardroomId");
	String boardroomApplyId = (request.getParameter("boardroomApplyId")==null||"".equals(request.getParameter("boardroomApplyId"))||
						"null".equals(request.getParameter("boardroomApplyId")))?"-1":request.getParameter("boardroomApplyId");
	
	boolean flag = new BoardRoomBD().applyTime(boardroomId, boardroomApplyId, beginDateLong, endDateLong);
	if(flag){//被占用
		out.println("-1");
	}else{
		out.println("0");
	}
	/*Long boardroomId= request.getParameter("boardroomId")!=null&&
	                  !"".equals(request.getParameter("boardroomId"))&&
					  !"null".equals(request.getParameter("boardroomId"))?Long.valueOf(request.getParameter("boardroomId")):new Long(0);
					  
	BoardRoomBD boardRoomBD = new BoardRoomBD();
	BoardRoomApplyPO boardroomApplyPO = new BoardRoomApplyPO();
	if(request.getParameter("boardroomApplyId") !=null &&
	   !"".equals(request.getParameter("boardroomApplyId")) &&
	   !"null".equals(request.getParameter("boardroomApplyId"))){
	   
		Long boardroomApplyId = Long.valueOf(request.getParameter("boardroomApplyId"));
		boardroomApplyPO.setBoardroomApplyId(boardroomApplyId);
	}

	boardroomApplyPO.setDestineDate(destineDate);
	boardroomApplyPO.setStartTime(destineDateBeginTime);
    boardroomApplyPO.setEndTime(destineDateEndTime);
	String isImpropriateTime = boardRoomBD.isImpropriateTime(boardroomApplyPO,boardroomId);
	if("0".equals(isImpropriateTime)){
		out.println("0");
	}else{
		out.println("-1");
	}*/
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
