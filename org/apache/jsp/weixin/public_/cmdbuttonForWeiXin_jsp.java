/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:58:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.public_;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.config.SystemCommon;
import java.util.*;
import com.js.lang.Resource;

public final class cmdbuttonForWeiXin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


private static HashMap buttons = null;
private static String moduleId = "1";
private static HashMap getAllButtons(){
	//格式：文本,说明,图标,是否有效,宽度,动作	
	if(buttons==null){
		buttons=new HashMap();
		if("15".equals(moduleId)&&"中科院".equals(SystemCommon.getCustomerName())){
			buttons.put("Send","提交,提交,/jsoa/images/toolbar/send.gif,true,10,cmdSend()");
		}else{
			buttons.put("Send","发送,发送,/jsoa/images/toolbar/send.gif,true,10,cmdSend()");
		}
		buttons.put("Qiang","抢占,抢占,/jsoa/images/toolbar/send.gif,true,10,submitForm()");
		if("ynnt".equals(SystemCommon.getCustomerName())){
			buttons.put("End","发送,发送,/jsoa/images/toolbar/end.gif,true,10,cmdEnd()");
			buttons.put("EndAutoReturn","发送,发送,/jsoa/images/toolbar/end.gif,true,10,cmdEndAutoReturn()");
		}else{
			buttons.put("End","办理完毕,办理完毕,/jsoa/images/toolbar/end.gif,true,10,cmdEnd()");
			buttons.put("EndAutoReturn","办理完毕,办理完毕,/jsoa/images/toolbar/end.gif,true,10,cmdEndAutoReturn()");
		}
		
		buttons.put("EndOnlyComp","办理完毕,办理完毕,/jsoa/images/toolbar/end.gif,true,10,cmdEndOnlyComp()");
		buttons.put("Save","保存草稿,保存草稿,/jsoa/images/toolbar/save.gif,true,10,cmdSave()");
		buttons.put("SaveFirst","保存,保存,/jsoa/images/toolbar/save.gif,true,10,cmdSaveFirst()");
		buttons.put("SaveToDraft","保存,保存,/jsoa/images/toolbar/save.gif,true,10,cmdSaveToDraft()");
		buttons.put("DraftSend","发送,发送,/jsoa/images/toolbar/send.gif,true,10,cmdDraftSend()");
		buttons.put("Toreceive","转收文,转收文,/jsoa/images/toolbar/toreceive.gif,true,10,cmdToreceive()");
		buttons.put("Toselfdept","转本部门,转本部门,/jsoa/images/toolbar/toselfdept.gif,true,10,cmdToselfdept()");
		buttons.put("Back","退回,退回,/jsoa/images/toolbar/back.gif,true,10,cmdBack()");
		buttons.put("Undo","撤办,撤办,/jsoa/images/toolbar/undo.gif,true,10,cmdUndo()");
		buttons.put("Wait","催办,催办,/jsoa/images/toolbar/wait.gif,true,10,cmdWait()");
		buttons.put("Feedback","反馈,反馈,/jsoa/images/toolbar/feedback.gif,true,10,cmdFeedback()");
		buttons.put("Return","收回,收回,/jsoa/images/toolbar/return.gif,true,10,cmdReturn()");
		buttons.put("Tran","转办,转办,/jsoa/images/toolbar/tran.gif,true,10,cmdTran()");
		buttons.put("Delete","作废,作废,/jsoa/images/toolbar/delete.gif,true,10,cmdDelete()");
		
		buttons.put("Writetext","起草正文,起草正文,/jsoa/images/toolbar/writetext.gif,true,10,cmdWritetext()");
		buttons.put("Readtext","批阅正文,批阅正文,/jsoa/images/toolbar/readtext.gif,true,10,cmdReadtext()");
		buttons.put("Viewtext","查看正文,查看正文,/jsoa/images/toolbar/viewtext.gif,true,10,cmdViewtext()");
		buttons.put("Savefile","生成正式文件,生成正式文件,/jsoa/images/toolbar/savefile.gif,true,10,cmdSavefile()");
		buttons.put("Code","编号,编号,/jsoa/images/toolbar/code.gif,true,10,cmdCode()");
		buttons.put("Selfsend","阅件,阅件,/jsoa/images/toolbar/selfsend.gif,true,10,cmdSelfsend()");
		buttons.put("Addperson","增加批阅人,增加批阅人,/jsoa/images/toolbar/addperson.gif,true,10,cmdAddperson()");
		buttons.put("DirectSend","直接发送,直接发送,/jsoa/images/toolbar/selfsend.gif,true,10,cmdDirectSend()");
		
		/** 公文发文查阅查看留痕文件**/
		buttons.put("ShowDocHistory","留痕文件,留痕文件,/jsoa/images/toolbar/viewtext.gif,true,10,showDocHistory()");
		
		buttons.put("Saveclose","保存,保存,/jsoa/images/toolbar/save.gif,true,10,cmdSaveclose()");
		buttons.put("Sendclose","分发,分发,/jsoa/images/toolbar/documentSend.gif,true,10,cmdSendclose()");
		buttons.put("Hasread","已查看用户,已查看用户,/jsoa/images/toolbar/selfsend.gif,true,10,cmdHasread()");
		buttons.put("Noread","未查看用户,未查看用户,/jsoa/images/toolbar/seeread.gif,true,10,cmdNoread()");
		buttons.put("Tosend","转发文,转发文,/jsoa/images/toolbar/toreceive.gif,true,10,cmdTosend()");
		buttons.put("Cancel","取消,取消,/jsoa/images/toolbar/sendOld.gif,true,10,cmdCancel()");
		buttons.put("Viewtran","阅件转办,阅件转办,/jsoa/images/toolbar/toreceive.gif,true,10,cmdViewtran()");
		buttons.put("TranRead","转阅,转阅,/jsoa/images/toolbar/tran.gif,true,10,cmdTranRead()");
		buttons.put("StandWork","代办,待办,/jsoa/images/toolbar/tran.gif,true,10,cmdStandWork()");
		
		buttons.put("DocInfo","文档信息,文档信息,/jsoa/images/toolbar/docinfo.gif,true,10,showDocInfo()");
		buttons.put("DocViewedUser","已查看用户,已查看用户,/jsoa/images/toolbar/docview.gif,true,10,browser()");
		buttons.put("DocHistroy","历史版本,历史版本,/jsoa/images/toolbar/dochistory.gif,true,10,showHistory()");
		buttons.put("DocComment","点评,点评,/jsoa/images/toolbar/doccomment.gif,true,10,speak()");
		buttons.put("Attention","关注,关注,/jsoa/images/toolbar/attention.gif,true,10,attention()");
		buttons.put("CancelAttention","取消关注,取消关注,/jsoa/images/toolbar/calcelAttention.gif,true,10,cancelAttention()");
		buttons.put("Close","关闭,关闭,/jsoa/images/toolbar/close.gif,true,10,cmdClose()");
		
		if("1".equals(com.js.util.config.SystemCommon.getUseArchives())){
			buttons.put("InfoToArchives","归档,归档,/jsoa/images/guidang2.gif,true,10,guidang()");		
			buttons.put("DocToArchives","归档,归档,/jsoa/images/guidang2.gif,true,10,gd()");
			buttons.put("FlowToArchives","归档,归档,/jsoa/images/guidang2.gif,true,10,guidang()");
			buttons.put("DocToReceive","归档,归档,/jsoa/images/guidang2.gif,true,10,gd()");
		}
	}
	return buttons;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.lang.Resource");
    _jspx_imports_classes.add("com.js.util.config.SystemCommon");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n");
      out.write('\r');
      out.write('\n');

String localcmd = session.getAttribute("org.apache.struts.action.LOCALE").toString();

String strButton=request.getParameter("button");
moduleId=request.getParameter("moduleId")==null?"1":request.getParameter("moduleId");
if(strButton!=null && strButton.trim().length()>0){
	String[] cmdButtons=strButton.split(",");
	HashMap allButtons=this.getAllButtons();

      out.write("\r\nvar cmdClassData=new Object();\r\ncmdClassData.classPannel\t\t\t= \"cmdMenuPanel\";\r\ncmdClassData.classItemPannel\t\t= \"cmdMenuItemPanel\";\r\ncmdClassData.classID\t\t\t\t= \"cmdMenu\";\r\ncmdClassData.classOver\t\t\t\t= \"cmdMenuOver\";\r\ncmdClassData.classDown\t\t\t\t= \"cmdMenuOver\";\r\ncmdClassData.classDisabled\t\t\t= \"cmdMenuDisabled\";\r\ncmdClassData.classDisabledOver\t\t= \"cmdMenuDisabled\";\r\ncmdClassData.classIcon              = \"cmdButtonIco\";\r\ncmdClassData.Separator              = \"\";\r\ncmdClassData.subExt                 = \"cmdButtonExt\";\r\ncmdClassData.classItem\t\t\t\t= \"cmdMenuItem\";\r\ncmdClassData.classItemOver\t\t\t= \"cmdMenuItemOver\";\r\ncmdClassData.classItemDown\t\t\t= \"cmdMenuItemOver\";\r\ncmdClassData.classItemDisabled\t\t= \"cmdMenuItemDisabled\";\r\ncmdClassData.classItemDisabledOver\t= \"cmdMenuItemDisabled\"\r\ncmdClassData.classItemSeparator\t\t= \"cmdMenuItemSeparator\";\r\ncmdClassData.classItemLine\t\t\t= \"cmdMenuItemLine\";\r\ncmdClassData.classItemArrow\t\t\t= \"cmdMenuItemArrow\";\r\ncmdClassData.classItemArrowOver\t\t= \"cmdMenuItemArrow\";\r\n\r\nvar docWidth=0;\r\nvar allPullXMenu;\r\n");
      out.write("function loadToolbar(obj){\r\n\r\n    document.getElementById(obj).innerHTML=\"\";\r\n\tvar buttons=new Array();\r\n\t");
int num=0;
	for(int i=0;i<cmdButtons.length;i++){
		if(allButtons.containsKey(cmdButtons[i])){
      out.write("\r\n\t\tbuttons[");
      out.print(num++);
      out.write(']');
      out.write('=');
      out.write('"');
      out.print(allButtons.get(cmdButtons[i])+","+cmdButtons[i]+"MenuSpan" );
      out.write("\";\r\n\t");
}}
      out.write("\r\n\t\r\n\tvar innerhtml = \"\";\r\n\tvar i=0\r\n\tfor(i=0;i<buttons.length;i++){\r\n\t    var but=buttons[i].split(\",\");\r\n\t    innerhtml += \"<div class='weixin_button' onclick='\"+but[5]+\";weixin_showButs();'>\"+but[0]+\"</div>\";\r\n\t}\r\n\tdocument.getElementById(obj).innerHTML=innerhtml;\r\n\tdocument.getElementById(obj).style.display = \"none\";\r\n}\r\n");
}
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
