/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:54:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.info;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.jsupload.upload.SmartUpload;
import com.jsupload.upload.SmartUpload;
import java.util.*;
import org.apache.commons.fileupload.FileItem;
import com.js.system.util.SysSetupReader;

public final class informationmanager_005fupload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/tag-lib/struts-bean.tld", Long.valueOf(1499751390000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.jsupload.upload.SmartUpload");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("com.js.system.util.SysSetupReader");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fbean_005fmessage_0026_005fkey_005fbundle_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fbean_005fmessage_0026_005fkey_005fbundle_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fbean_005fmessage_0026_005fkey_005fbundle_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
      com.jsupload.upload.SmartUpload myUpload = null;
      myUpload = (com.jsupload.upload.SmartUpload) _jspx_page_context.getAttribute("myUpload", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (myUpload == null){
        myUpload = new com.jsupload.upload.SmartUpload();
        _jspx_page_context.setAttribute("myUpload", myUpload, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n<HTML>\r\n<HEAD><TITLE>上传附件</TITLE></HEAD>\r\n<style type=\"text/css\">\r\n</style>\r\n<script src=\"/jsoa/js/js.js\" language=\"javascript\"></script>\r\n<link href=\"/jsoa/skin/blue/style.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<SCRIPT language=\"javascript\" src=\"/jsoa/js/public.js\"></SCRIPT>\r\n<script src=\"/jsoa/js/HashMap.js\" language=\"javascript\"></script>\r\n<script language=\"javascript\" src=\"/jsoa/js/checkForm.js\"></script>\r\n<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\r\n");

request.setCharacterEncoding("GBK"); 
String dispControl = request.getParameter("dispControl");
String saveControl = request.getParameter("saveControl");
String domainId=session.getAttribute("domainId").toString();
int fileSize=0;
String attachSizeLimit=SysSetupReader.getInstance().getAttachLimit(domainId);
if(!attachSizeLimit.startsWith("1")){
	Map map = (Map) session.getAttribute("ftpMap");
	String fileSizeLimitAll="0";//默认限制大小
	if(map != null && map.get("FileSizeLimitAll") != null){
	    fileSizeLimitAll = map.get("FileSizeLimitAll").toString();//配置文件限制大小
	    if(fileSizeLimitAll.startsWith("1")){//是否限制，1：限制；0，不限制
	        fileSize=Integer.parseInt(fileSizeLimitAll.substring(1));
	    }
	  }
}else{
   fileSize=Integer.parseInt(attachSizeLimit.substring(1));
}
String fileSizeMsg="";
if(fileSize/1000000>0){
    fileSizeMsg=String.valueOf(fileSize/(1024*1024))+"MB";
}else if(fileSize/1000>0){
    fileSizeMsg=String.valueOf(fileSize/1024)+"KB";
}else{
    fileSizeMsg=String.valueOf(fileSize)+"字节";
}
if(request.getParameter("upload") != null)
{
    String saveName = "";
    String fileName = "";
    String fileExt="";
    String myRandom = "";
    String filePath="";
   	myUpload.initialize(request);
   	List fileList=new ArrayList();
    try
    {
    	fileList=myUpload.getFileList();
    }
    catch(Exception e) 
    {
    	out.println("<div style=\"witdh:100%;height:100%;\" class=\"docBox\">");
    	out.println("<center style=\"padding-top:100px;\">");
    	out.println("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">");
    	out.println("<tr>");
    	out.println("<td width=\"60\"><img src=\"/jsoa/images/errorFace_excel.gif\"/></td>");
    	out.println("<td width=\"220\"><font color=\"#FF0000\">ERROR:上传失败！文件尺寸超过规定大小:"+fileSizeMsg+"</font></td>");
    	out.println("</tr>");
    	out.println("<tr>");
    	out.println("<td>&nbsp;</td>");
    	out.println("<td align=\"center\" valign=\"middle\" height=\"65\"><input type=\"button\" class=\"btnButton2font\" onclick=\"javascript:history.back(-1);\" value='返回重试'></input></td>");
    	out.println("</tr>");
    	out.println("</table>");
    	out.println("</center>");
    	out.println("</div>");
    	return;
    }
    int upLoadAllFileSize=0;
    String [] banType=SmartUpload.banType;
	for (int j=0;j<fileList.size();j++)
	{
		FileItem fileItem=(FileItem)fileList.get(j);
		if(!fileItem.isFormField())//如果是<input type="file">
		{
			String fileNameTemp=fileItem.getName();
    		for(int i=0;i<banType.length;i++)
    		{
    			if(fileNameTemp.endsWith(banType[i]))
   				{
   					fileItem.delete();
   					out.println("<script>alert('上传失败！非法文件类型！');history.back(-1);</script>");
   					return;
   				}
    		}
			upLoadAllFileSize+=fileItem.getSize();//上传总大小
		}
	}
	if(upLoadAllFileSize==0)
    {
    	out.println("<div style=\"witdh:100%;height:100%;\" class=\"docBox\">");
    	out.println("<center style=\"padding-top:100px;\">");
    	out.println("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">");
    	out.println("<tr>");
    	out.println("<td width=\"60\"><img src=\"/jsoa/images/errorFace_excel.gif\"/></td>");
    	out.println("<td width=\"220\"><font color=\"#FF0000\">ERROR:上传失败！请选择非空文件上传！</font></td>");
    	out.println("</tr>");
    	out.println("<tr>");
    	out.println("<td>&nbsp;</td>");
    	out.println("<td align=\"center\" valign=\"middle\" height=\"65\"><input type=\"button\" class=\"btnButton2font\" onclick=\"javascript:history.back(-1);\" value='返回重试'></input></td>");
    	out.println("</tr>");
    	out.println("</table>");
    	out.println("</center>");
    	out.println("</div>");
    	return;
    }
    for (int j=0;j<fileList.size();j++)
    {
       // myRandom=new com.js.util.util.Random().getRandom();
        FileItem fileItem=(FileItem)fileList.get(j);//获取上传文件
        // 忽略空的上传控件和简单form字段而不是上传域的文件域(<input type="text" />等)
	   	if (fileItem.getSize()<=0|| fileItem.isFormField()) 
	   	{
		   	continue;
	   	}
        fileName=fileItem.getName();//获取上传文件名
        if(!"".equals(fileName)&&null!=fileName)
        {
        	fileName=fileName.substring(fileName.lastIndexOf("\\") + 1);
        	fileExt=fileName.substring(fileName.lastIndexOf(".") + 1);//获取上传文件扩展名
        }
        if (fileName.length() > 50)//文件名太长
					{
						fileName = fileName.substring(0, 40);//截断
						fileName+="~1."+	fileExt;						
					} 
        myRandom=new com.js.util.util.Random().getFileRandomName();//生成随机数
        Calendar cal = Calendar.getInstance();  
	   	  filePath=request.getSession().getServletContext().getRealPath("/")+"upload/"+cal.get(Calendar.YEAR)+"/information/";
	   	 saveName=myRandom+"."+fileExt;//生成新文件名
         saveName=cal.get(Calendar.YEAR)+"_"+saveName;
        myUpload.saveAs(fileItem,filePath + saveName);//保存文件
    }

    
      out.write("\r\n    <script language=\"javascript\">\r\n    <!--\r\n    opener.document.all.");
      out.print(dispControl);
      out.write(".value = \"");
      out.print(fileName);
      out.write("\";\r\n    opener.document.all.");
      out.print(saveControl);
      out.write(".value = \"");
      out.print(saveName);
      out.write("\";\r\n    window.close();\r\n    //-->\r\n    </script>\r\n    ");

}

      out.write("\r\n\r\n\r\n\r\n<BODY  class=\"MainFrameBox Pupwin\">\r\n<TABLE width=\"100%\" height=\"100%\" valign=\"top\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"  style=\"padding-left:10px;\" class=\"docBoxNoPanel\">\r\n<form enctype=\"multipart/form-data\" method=\"POST\" action=\"informationmanager_upload.jsp?upload=1&dispControl=");
      out.print(dispControl);
      out.write("&saveControl=");
      out.print(saveControl);
      out.write("\" onsubmit=\"return sub();\">\r\n\r\n  <tr>\r\n     <td  style=\"font-size:15px;color:#003366;padding-top:8px;\">\r\n     <b>上传本地文件</b>\r\n     </td>\r\n  </tr>\r\n  <TR valign=\"top\" style=\"padding-top:12px;\" id=\"upload1\">\r\n     <TD align=\"left\" id=\"3230\"><div id=\"div001\">请选择您要上传的文件</div>\r\n     <div id=\"fileInputDiv\">\r\n      <div id=\"fileInputDiv1\">\r\n       \t<input type=\"file\" name=\"file1\" size=\"45\" class=\"css0\"><br>\t\t\t\t\r\n      </div>\r\n     </div>\r\n     </TD>\r\n  </TR>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <TR>\r\n     <TD align=\"left\" style=\"padding-bottom:20px;\">\r\n        <div id=\"fileNameDiv\" style=\"height: 40px;\"></div>\r\n     <input type=\"hidden\" name=\"continueUpload\" value=\"0\">\r\n\t <INPUT NAME=\"submit\"  VALUE=\"上传\" TYPE=\"submit\"  class=\"btnButton4Font\">\r\n\t <INPUT NAME=\"reset\"  VALUE=\"取消\" TYPE=\"button\" onclick=\"javascript:window.close();\"  class=\"btnButton4Font\">\r\n\t <br>\r\n     </TD>\r\n  </TR>\r\n</FORM>\r\n</CENTER>\r\n</TABLE>\r\n</BODY>\r\n<script language=\"javascript\">\r\n<!--\r\nfunction sub(){\r\n    if(textIsEmpty(document.all.file1)){\r\n");
      out.write("        alert(\"");
      if (_jspx_meth_bean_005fmessage_005f0(_jspx_page_context))
        return;
      out.write("!\");\r\n        return false;\r\n    }\r\n}\r\n//-->\r\n</script>\r\n<script src=\"/jsoa/js/util.js\"></script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_bean_005fmessage_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  bean:message
    org.apache.struts.taglib.bean.MessageTag _jspx_th_bean_005fmessage_005f0 = (org.apache.struts.taglib.bean.MessageTag) _005fjspx_005ftagPool_005fbean_005fmessage_0026_005fkey_005fbundle_005fnobody.get(org.apache.struts.taglib.bean.MessageTag.class);
    boolean _jspx_th_bean_005fmessage_005f0_reused = false;
    try {
      _jspx_th_bean_005fmessage_005f0.setPageContext(_jspx_page_context);
      _jspx_th_bean_005fmessage_005f0.setParent(null);
      // /info/informationmanager_upload.jsp(199,15) name = bundle type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_bean_005fmessage_005f0.setBundle("common");
      // /info/informationmanager_upload.jsp(199,15) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_bean_005fmessage_005f0.setKey("comm.seluploadfile");
      int _jspx_eval_bean_005fmessage_005f0 = _jspx_th_bean_005fmessage_005f0.doStartTag();
      if (_jspx_th_bean_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fbean_005fmessage_0026_005fkey_005fbundle_005fnobody.reuse(_jspx_th_bean_005fmessage_005f0);
      _jspx_th_bean_005fmessage_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_bean_005fmessage_005f0, _jsp_getInstanceManager(), _jspx_th_bean_005fmessage_005f0_reused);
    }
    return false;
  }
}
