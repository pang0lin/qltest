/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:06:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jsflow_005fsaveresult_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

boolean parentPageFlush = true;
if(request.getAttribute("subProcWorkId") != null){
    parentPageFlush = false;
    //子流程提交以后
    
      out.write("\r\n    <script language=\"javascript\">\r\n    <!--\r\n\t\t//alert(\"");
      out.print(request.getAttribute("subProcWorkId"));
      out.write("\");\r\n    if(opener){\r\n        if(opener.document.all.subProcWorkId){\r\n            opener.document.all.subProcWorkId.value = \"");
      out.print(request.getAttribute("subProcWorkId"));
      out.write("\";\r\n\t\t\t//alert(opener.document.all.subProcWorkId.value);\r\n        }\r\n    }\r\n    //-->\r\n    </script>\r\n    ");

}

if(request.getAttribute("passround") != null){
    if(request.getAttribute("passround").toString().equals("-1")){
    
      out.write("\r\n    <script language=\"javascript\">\r\n    alert(\"由于节点尚未有人办理，您的审阅意见未能保存！\");\r\n    </script>\r\n    ");

    }
}

if(request.getAttribute("saveFirstResult") != null){
    if(request.getAttribute("saveFirstResult").toString().equals("-1")){
    
      out.write("\r\n    <script language=\"javascript\">\r\n    alert(\"表单数据保存失败,请重新填写或与管理员联系！\");\r\n    </script>\r\n    ");

    }
}

if(request.getAttribute("repeat") != null){
      out.write("\r\n   <script language=\"javascript\">\r\n   alert(\"文号重复！\");\r\n   </script>\r\n");
}
      out.write("\r\n<script language=\"javascript\">\r\n<!--\r\n\t");
if(parentPageFlush && !"1".equals(request.getParameter("fromdesktop"))){
      out.write("\r\n\ttry{   \r\n\t    opener.location.reload();\r\n\t}catch(e){}\r\n");
}
      out.write("\r\n\r\n");
if("1".equals(request.getParameter("fromdesktop"))){
      out.write("\r\n\ttry{\r\n\t    opener.refreshModFileDealWith();\r\n\t}catch(e){\r\n\t\t\t\r\n\t}\r\n\ttry{\r\n\t\topener.MainDesktop.refreshModFileDealWith();\r\n\t}catch(e){\r\n\t}\r\n");
}
      out.write("\r\n\r\n");

	if(request.getAttribute("flowfaild") != null){
    
      out.write("\r\n    alert(\"流程提交失败，请重新提交！\");\r\n    window.history.back();\r\n    ");

} else if("1".equals(request.getAttribute("savefirst")+"")){
  //保存第一步
	response.sendRedirect(request.getAttribute("sendUrl")+"&subProcWorkId="+request.getAttribute("subProcWorkId"));

} else if("1".equals(request.getParameter("sendContinue"))){
  //发送继续
	 response.sendRedirect(request.getParameter("sendContinueUrl"));
} else{
    
      out.write("\r\n    window.close();\r\n    ");

}
      out.write("\r\n\r\n//-->\r\n</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
