/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:58:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.backlog;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.system.service.usermanager.UserBD;
import com.js.oa.jsflow.vo.WorkVO;
import com.js.oa.jsflow.service.WorkFlowBD;
import com.js.oa.jsflow.service.WorkFlowButtonBD;
import java.util.*;
import javax.sql.*;
import java.sql.*;
import com.js.util.util.BrowserJudge;

public final class wf_005fstepanduser_005forgForWeiXinDoc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/weixin/public/onlineForWeiXin.jsp", Long.valueOf(1499751472000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.oa.jsflow.vo.WorkVO");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowButtonBD");
    _jspx_imports_classes.add("com.js.util.util.BrowserJudge");
    _jspx_imports_classes.add("com.js.system.service.usermanager.UserBD");
    _jspx_imports_classes.add("com.js.oa.jsflow.service.WorkFlowBD");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n");
      out.write("\r\n<script language=\"JScript.Encode\" src=\"/jsoa/js/browinfo.js\"></script>\r\n<script language=\"JScript.Encode\" src=\"/jsoa/js/rtxint.js\"></script>\r\n<script language=\"javascript\">\r\nfunction rtxonline(a){\r\n\t RAP(a);\r\n}\r\n</script>");
      out.write("\r\n\r\n");

boolean bflag=true;
if(BrowserJudge.isOtherBrowser(request))bflag=false;
request.setCharacterEncoding("utf-8");
response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);

int menuIndex=0;

DataSource ds = new com.js.util.util.DataSourceBase().getDataSource();
Connection conn = null;
Statement stmt = null;
ResultSet rs = null;
conn=ds.getConnection();
stmt=conn.createStatement();

      out.write('\r');
      out.write('\n');

//参与者类型
//0 流程发起人的上级领导
//1 由上一节点参与者从所有用户中选择
//2 从候选人员中指定
//3 指定全部办理人
//4 由表单中的某个字段值决定
//System.out.println("参与人类型："+nextUser[0]);
String selectUser = "";			// 待选人员
String selectUserName = "";		// 待选人员
String selectUserAccounts = "";	// 待选人员

String range = "*0*";		// 指定范围
String show = "";			// 显示
String transactType = "1";	// 默认多人并行

String participantUserField = "";	// 表单中的某个字段名

boolean showSmsRemind = false;

// 流程类型(业务流程，随机流程)
String processType = request.getParameter("processType");
// 流程办理人类型
int participantType = -1;

if(!"0".equals(processType)){
	//当前节点参数
	String processId = request.getParameter("processId");
	String tableId = request.getParameter("tableId");
	String recordId = request.getParameter("recordId");
	String activityId = request.getParameter("activityId");			// 后继节点
	String curActivityId = request.getParameter("curActivityId");	// 当前节点
	String standForUserId = request.getParameter("standForUserId");	// 代办人ID

	WorkFlowButtonBD workFlowButtonBD = new WorkFlowButtonBD();
	WorkFlowBD workFlowBD = new WorkFlowBD();
	WorkVO vo = new WorkVO();

	//节点办理方式
	transactType = workFlowBD.getTransactType(tableId, recordId, activityId);

	String[] nextUser = workFlowBD.getProcActiUser(tableId, recordId, activityId);

	//显示短信
	showSmsRemind = (nextUser[24]+"").equals("1") ? true : false;

	if(nextUser[0] != null){
		participantType = Integer.parseInt(nextUser[0]);
		java.util.List candidate;
		java.util.List leaderList = null;
		Object[] tmp;
		switch(participantType){
			case 3:	// 指定全部办理人
				candidate = workFlowBD.getCandidateSeq(nextUser[1], nextUser[3]);
				for(int i=0; i<candidate.size(); i++){
					tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
				break;
			case 2:	// 从候选人中指定
				candidate = workFlowBD.getCandidateSeq(nextUser[1], nextUser[3]);
				for(int i=0; i<candidate.size(); i++){
					tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
				break;
			case 4:	// 由表单中的某个字段值决定
				participantUserField = nextUser[4];
				participantUserField = workFlowButtonBD.getFieldInfoByFieldId(participantUserField);	
				break;	
			case 8:	// 从指定范围中选定
				range = nextUser[22].toString();
				show = "user";
				if(range!=null && !range.equals("") && range.indexOf("@")>=0){
					show += "group";
				}
				if(range!=null && !range.equals("") && range.indexOf("*")>=0){
					show += "org";
				}
				break;
			case 9:	// 由上一节点参与者从所在组织中选择
				//range = "*"+session.getAttribute("orgId")+"*";
				String sidelineOrg = workFlowButtonBD.getUserSideLineOrgId(session.getAttribute("userId").toString())==null?"":workFlowButtonBD.getUserSideLineOrgId(session.getAttribute("userId").toString());
			    range = "*" + session.getAttribute("orgId") + "*" + sidelineOrg;
				show += "user";
				break;
			case 10:	// 组织领导
				range = "*" + session.getAttribute("orgId") + "*";
				show += "org";
				break;
			case 13:	// 由上一节点参与者从选定的群组中选择
				//show += "group";
				range =  nextUser[22].toString();
				String temp = range;
				range = "";
		
				String domainId = session.getAttribute("domainId")==null ? "0" : session.getAttribute("domainId").toString();
				String userId = session.getAttribute("userId").toString();
				String orgIdString = session.getAttribute("orgIdString").toString();
				String where = "";
		
				if("".equals(orgIdString)){
					//组织Id为0则可以查看所以组
					where = " or 1=1";
				}else{
					orgIdString = orgIdString.substring(1, orgIdString.length()-1);
					String[] orgArr = orgIdString.split("\\$\\$");
					for(int i=0; i<orgArr.length; i++){
						where += " or rangeorg like '%*" + orgArr[i] + "*%' ";
					}
					rs = stmt.executeQuery("select group_id from org_group where groupuserstring like '%$" + userId + "$%'");
					while(rs.next()){
						where += " or rangegroup like '%@" + rs.getString(1) + "@%' ";
					}
					rs.close();
				}
				rs = stmt.executeQuery("select group_id from org_group where " 
						+ "((rangeemp is null and rangeorg is null and rangegroup is null) or " 
						+ "(rangeemp='' and rangeorg='' and rangegroup='') or  rangeemp like '%$" 
						+ userId + "$%' " + where + ") and domain_id=" + domainId);
				while(rs.next()){
					if(temp.indexOf("@"+rs.getString(1)+"@") != -1){
						range += "@" + rs.getString(1) + "@";
					}
				}
				rs.close();		
				if(range!=null && !"".equals(range)){
					show = "usergroup";
				}
				break;
			case 12:	// 由上一节点参与者从所有组织中选择
				 show += "org";
				break;
			case 1:	// 由上一节点参与者从所有用户中选择
				// show += "user";
				// 与指定范围相同的处理（范围为全部*0*）   从指定范围中选定
				range = "*0*";
				show = "userorggroup";
				break;
			case 11:	// 上一节点所有参与者
				vo.setProcessId(Long.valueOf(processId));
				vo.setTableId(Long.valueOf(tableId));
				vo.setRecordId(Long.valueOf(recordId));
				vo.setActivity(Long.valueOf(curActivityId));
		
				candidate = workFlowButtonBD.getFrontActivityOper(vo);
				for(int i=0; i<candidate.size(); i++){
					tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
				break;
			case 7:	// 上一节点办理人的上级领导
				// 确定当前办理人，如果有待办或转办应该以最初制定的执行人为准
				if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
					String tranFromPersonId = "";
					if(request.getParameter("tranFromPersonId")!=null 
							&& !"null".equals(request.getParameter("tranFromPersonId")) 
							&& !"".equals(request.getParameter("tranFromPersonId")) 
							&& !"-1".equals(request.getParameter("tranFromPersonId"))){
					
				        tranFromPersonId = request.getParameter("tranFromPersonId");			
						// 判断转办人是否还有转办人
						String tranFromPersonIdTemp = tranFromPersonId;
				        while(!"".equals(tranFromPersonId)){                	
				        	rs = stmt.executeQuery("select tranfrompersonid from jsf_work where wf_curemployee_id=" 
				        		+ tranFromPersonId + " and initactivity=" + curActivityId + " and workrecord_id=" 
				        		+recordId + " and worktable_id=" + tableId);
				        	if(rs.next()){
				        		tranFromPersonId = rs.getString(1);
				        	}
				        	rs.close();
				        	
				        	if(tranFromPersonId==null || "null".equals(tranFromPersonId)){
				        		tranFromPersonId = "";
				        	}else{
				        		tranFromPersonIdTemp = tranFromPersonId;
				        	}                	
				        }
				        
				        tranFromPersonId = tranFromPersonIdTemp;    
					}
					
					// 转办判断
					if(!"".equals(tranFromPersonId)){
						leaderList = workFlowBD.getLeaderList(tranFromPersonId);
					}else{
						leaderList = workFlowBD.getLeaderList(session.getAttribute("userId").toString());
					}
				} else{
					//有代办人的情况
					leaderList = workFlowBD.getLeaderList(standForUserId);
				}
				for(int i=0; i<leaderList.size(); i++){
					tmp = (Object[]) leaderList.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
				break;
			case 0:	// 流程发起人的上级领导 
				leaderList = workFlowBD.getLeaderList(request.getParameter("submitPersonId"));
		
				for(int i=0; i<leaderList.size(); i++){
					tmp = (Object[]) leaderList.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
				break;
			case 5:	// 流程发起人
				selectUser = request.getParameter("submitPersonId");
				selectUserName = new com.js.system.service.usermanager.UserBD().getUserNameById(request.getParameter("submitPersonId"));
				break;
			case 6:	// 从角色中指定 		
				// 确定当前办理人，如果有待办或转办应该以最初制定的执行人为准
				String currentUserId = session.getAttribute("userId").toString();
				
				if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
					String tranFromPersonId = "";
					if(request.getParameter("tranFromPersonId")!=null 
							&& !"null".equals(request.getParameter("tranFromPersonId")) 
							&& !"".equals(request.getParameter("tranFromPersonId")) 
							&& !"-1".equals(request.getParameter("tranFromPersonId"))){
					
				        tranFromPersonId = request.getParameter("tranFromPersonId");			
						// 判断转办人是否还有转办人
						String tranFromPersonIdTemp = tranFromPersonId;
				        while(!"".equals(tranFromPersonId)){                	
				        	rs = stmt.executeQuery("select tranfrompersonid from jsf_work where wf_curemployee_id=" 
				        		+ tranFromPersonId+" and initactivity=" + curActivityId + " and workrecord_id=" 
				        		+ recordId + " and worktable_id=" + tableId);
				        	if(rs.next()){
				        		tranFromPersonId = rs.getString(1);
				        	}
				        	rs.close();
				        	
				        	if(tranFromPersonId==null || "null".equals(tranFromPersonId)){
				        		tranFromPersonId = "";
				        	}else{
				        		tranFromPersonIdTemp = tranFromPersonId;
				        	}                	
				        }
				        tranFromPersonId = tranFromPersonIdTemp;
					}
					
					// 转办判断
					if(!"".equals(tranFromPersonId)){
						currentUserId = tranFromPersonId;
					}
				} else{
					// 有代办人的情况
					currentUserId = standForUserId;
				}
				
				candidate = workFlowBD.getRoleUserIDAndName(nextUser[18], request.getParameter("submitPersonId") + ";" + currentUserId);
				for(int i=0; i<candidate.size(); i++){
					tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
				break;
			case 15:	// 从岗位中指定 
				// 确定当前办理人，如果有待办或转办应该以最初制定的执行人为准
				currentUserId = session.getAttribute("userId").toString();
				
				if(standForUserId==null || "null".equals(standForUserId) || "0".equals(standForUserId)){
					String tranFromPersonId = "";
					if(request.getParameter("tranFromPersonId")!=null 
							&& !"null".equals(request.getParameter("tranFromPersonId")) 
							&& !"".equals(request.getParameter("tranFromPersonId")) 
							&& !"-1".equals(request.getParameter("tranFromPersonId"))){
				        tranFromPersonId = request.getParameter("tranFromPersonId");			
					
						// 判断转办人是否还有转办人
						String tranFromPersonIdTemp = tranFromPersonId;
				        while(!"".equals(tranFromPersonId)){                	
				        	rs = stmt.executeQuery("select tranfrompersonid from jsf_work where wf_curemployee_id=" 
				        		+ tranFromPersonId + " and initactivity=" + curActivityId + " and workrecord_id=" 
				        		+ recordId + " and worktable_id=" + tableId);
				        	if(rs.next()){
				        		tranFromPersonId = rs.getString(1);
				        	}
				        	rs.close();
				        	
				        	if(tranFromPersonId==null || "null".equals(tranFromPersonId)){
				        		tranFromPersonId = "";
				        	}else{
				        		tranFromPersonIdTemp = tranFromPersonId;
				        	}                	
				        }
				        tranFromPersonId = tranFromPersonIdTemp;
					}
					
					// 转办判断
					if(!"".equals(tranFromPersonId)){
						currentUserId = tranFromPersonId;
					}
				} else{
					// 有代办人的情况
					currentUserId = standForUserId;
				}
				candidate = workFlowBD.getPositionUserIDAndName(nextUser[18], request.getParameter("submitPersonId") + ";" + currentUserId);
				for(int i=0; i<candidate.size(); i++){
					tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
				break;
			case 14:	// 流程发起人上级组织 并且 职务级别
				candidate = workFlowButtonBD.getLeaderByDutyLevelAndOrg(request.getParameter("submitPersonId"),nextUser[18]);
				for(int i=0; i<candidate.size(); i++){
					tmp = (Object[]) candidate.get(i); 
					selectUser += tmp[0] + ",";
					selectUserName += tmp[1] + ",";
				}
				if(selectUser.indexOf(",") != -1){
					selectUser = selectUser.substring(0, selectUser.length()-1);
					selectUserName = selectUserName.substring(0, selectUserName.length()-1);
				}
				break;
		}//end switch
	}//end if(nextUser[0]!=null)
}

if(!"".equals(selectUser)){
	selectUserAccounts = new UserBD().getUserAccountByIds(selectUser);
}

      out.write("\r\n<HTML>\r\n\t<HEAD>\r\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n\t\t<link href=\"/jsoa/skin/");
      out.print(session.getAttribute("skin"));
      out.write("/style-");
      out.print(session.getAttribute("browserVersion"));
      out.write(".css\" rel=\"stylesheet\" type=\"text/css\" />\r\n\t\t<script type=\"text/javascript\" src=\"/jsoa/js/weixin/mobiscroll/js/jquery-1.9.1.min.js\" ></script>\r\n\t\t<script type=\"text/javascript\" src=\"/jsoa/js/weixin/wf_stepanduser_tree.js\"></script>\r\n\t\t");

		if(bflag){
			
      out.write("<SCRIPT language=javascript src=\"/jsoa/jsflow/wf_stepanduser_tree_forweixin.js\"></SCRIPT>");

		}else{
			
      out.write("<SCRIPT language=javascript src=\"/jsoa/jsflow/wf_stepanduser_tree_o_forweixin.js\"></SCRIPT>");

		}
		
      out.write("\r\n\t\t<style type=\"text/css\">\r\n\t\t* { marign: 0; padding: 0;}\r\n\t\t.Hidden{ display:none; overflow: auto;}\r\n\t\t.Show{ display:;}\r\n\t\t</style>\r\n\t</HEAD>\r\n\r\n\t<body onload=\"loadSelUserWin();\">\r\n\t\t<div id=\"submenuBox");
      out.print(menuIndex);
      out.write("\" style=\"width: 100%;\">\r\n\t  \t\t<div id=\"org_list\" class=\"Hidden\"></div>\r\n\t\t</div>\r\n\t</body>\r\n</HTML>\r\n<SCRIPT LANGUAGE=\"JavaScript\">\r\n// 设置显示人员列表div的高度像素\r\nvar w = $(window).height();\r\n$(\"#org_list\").height(w);\r\n\r\nfunction HightLight(obj){\r\n\tobj.style.color = \"red\";\r\n}\r\n\r\nfunction NomalLight(obj){\r\n\tobj.style.color = \"black\";\r\n}\r\n\r\n");

// 判断页面显示方式
if(participantType==1 || participantType==8 || participantType==2 || participantType==4 
	|| participantType==9 || participantType==10 || participantType==6 || participantType==13 
	|| participantType==0 || participantType==7 || participantType==11 || participantType==14 
	|| participantType==15){
	
      out.write("\r\n\t//window.parent.document.getElementById(\"middleTR1\").style.display = '';\r\n    //window.parent.document.getElementById(\"selTextarea1\").style.display = 'none';\t\r\n    \r\n\t//parent.frm1.approveMode.style.width=\"100%\";\r\n\r\n\t// 赋值\r\n\tvar opText = \"");
      out.print(selectUserName);
      out.write("\";\r\n\tvar opValue = \"");
      out.print(selectUser);
      out.write("\";\r\n\tvar participantTypeForjs=\"");
      out.print(participantType);
      out.write("\";\r\n\tif(participantTypeForjs!=4 && participantTypeForjs!=14){\r\n\t\t//if(opText.indexOf(\",\")!=-1){\r\n\t\t\tvar opTextArr = opText.split(\",\");\r\n\t\t\tvar opValueArr = opValue.split(\",\");\r\n\t\t\tif(opTextArr.length == 1){\r\n\t\t\t\tfor(var i=0; i<opTextArr.length; i++){\r\n\t\t\t\t\tif(opTextArr[i] != ''){\r\n\t\t\t\t\t\t//var oOption = document.createElement(\"OPTION\");\r\n\t\t\t\t\t\t//oSelect.options.add(oOption);\r\n\t\t\t\t\t\t");

						if(bflag){
							
      out.write("//oOption.innerText = opTextArr[i];");

						} else{
							
      out.write("//oOption.textContent = opTextArr[i];");

						} 
						//if(!BrowserJudge.isPC(request)){
							
      out.write("\r\n\t\t\t\t\t\t\t//var showNames = window.parent.document.getElementById(\"showNames\");\r\n\t\t\t\t\t\t\t//var htmlDiv = \"<div id='A\" + opValue + \"A' name='A\" + opValue \r\n\t\t\t\t\t\t\t//\t\t+ \"A' title='点击移出' onclick=\\\"dropNameDiv('A\" + opValue + \"A','$\" \r\n\t\t\t\t\t\t\t//\t\t+opValue + \"$')\\\"  style='cursor:pointer;float:left;width:100%;fontSize:12px;'>\" \r\n\t\t\t\t\t\t\t//\t\t+ opText + \"</div>\";\r\n\t  \t        \t\t\t//showNames.innerHTML += htmlDiv;\r\n\t\t\t\t\t\t\t");

						//}
						
      out.write("\r\n\t\t\t\t\t\t//oOption.value = \"$\" + opValueArr[i] + \"$\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t//} \r\n\t}\r\n\t");

} else{
	// 显示textarea
	
      out.write("\r\n\twindow.parent.document.getElementById(\"middleTR1\").style.display = 'none';\r\n    window.parent.document.getElementById(\"selTextarea1\").style.display = '';\r\n\twindow.parent.document.frm1.selRange.value = \"");
      out.print(range);
      out.write("\";\r\n\t//赋值\r\n\tvar opText = \"");
      out.print(selectUserName);
      out.write("\";\r\n\tvar opValue = \"");
      out.print(selectUser);
      out.write("\";\t\r\n\r\n\t");

	//if(participantType==1 || participantType==12 || participantType==8){
	//participantType==1 or 8 的时候安装选择范围处理
	if(participantType == 12){
		// 显示选择对象按钮
		
      out.write("\r\n\t\t//parent.document.frm1.all.selTextareaTag.style.display='';\r\n\t\t//parent.document.frm1.all.selectedTxt.cols=\"62\";\r\n\t\twindow.parent.document.getElementById(\"selectedTxt2\").style.width = \"98%\";\r\n\t\t//parent.frm1.approveMode.style.width=\"85%\";\r\n\t\twindow.parent.document.frm1.selectedTxtId.value = \"\";\r\n\t\twindow.parent.document.getElementById(\"selectedTxt\").value = \"\";\r\n\t\t");

	} else{
		// 将制定的用户带入选择人框
		
      out.write("\r\n\t\t//parent.document.frm1.all.selTextareaTag.style.display = 'none';\r\n\t\twindow.parent.document.getElementById(\"selectedTxt\").cols = \"68\";\r\n\t\twindow.parent.document.getElementById(\"selectedTxt2\").style.width = \"98%\";\r\n\t\t//parent.frm1.approveMode.style.width=\"99%\";\r\n\t\tvar opV = opValue.split(\",\");\r\n\t\topValue = \"\";\r\n\t\tfor(var i=0; i<opV.length; i++){\r\n\t\t\tif(opV[i] != \"\"){\r\n\t\t\t\topValue += \"$\" + opV[i] + \"$\";\r\n\t\t\t}\r\n\t\t}\r\n\t\twindow.parent.document.frm1.selectedTxtId.value = opValue;\r\n\t\twindow.parent.document.getElementById(\"selectedTxt\").value = opText;\r\n\t\t");

	}
}

      out.write("\r\n</SCRIPT>\r\n<SCRIPT LANGUAGE=\"JavaScript\">\r\nfunction loadSelUserWin(){debugger;\r\n\t\r\n\t");

	// 由表单中的某个字段值决定
	if(participantType == 4){
		
      out.write("\r\n\t\tif(eval(\"window.parent.parent.document.all.");
      out.print(participantUserField);
      out.write("_Id\")){\r\n\t\t\tvar selectUser = eval(\"window.parent.parent.document.all.");
      out.print(participantUserField);
      out.write("_Id.value\");\r\n\t\t\tvar selectUserName = eval(\"window.parent.parent.document.all.");
      out.print(participantUserField);
      out.write("_Name.value\");\r\n\t\t\tif(selectUserName.indexOf(\",\") != -1){\r\n\t\t\t\tselectUserName = selectUserName.substring(0, selectUserName.length-1);\r\n\t\t\t} else{\r\n\t\t\t\tselectUser = \"$\" + selectUser + \"$\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// 新节点\r\n\t\t\tString.prototype.replaceAll = function(s1,s2){\r\n\t\t\t\tvar demo = this;\r\n\t\t\t\t while(demo.indexOf(\"$$\") != -1)\r\n\t \t\t\t\tdemo = demo.replace(s1, s2);\r\n\t \t\t\treturn demo;\r\n\t\t\t}\r\n\t\t\tselectUser = selectUser.replaceAll(\"$$\", \",\");\r\n\t\t\tselectUser = selectUser.substring(1, selectUser.length-1);\r\n\t\t\t\r\n\t\t\t//loadXML('userorggroup', 'no', '");
      out.print(show);
      out.write("', '', '");
      out.print(range);
      out.write("', selectUser, selectUserName, '');\r\n\t\t\tshowList('userorggroup', 'no', '");
      out.print(show);
      out.write("', '', '");
      out.print(range);
      out.write("', selectUser, selectUserName, '");
      out.print(selectUserAccounts);
      out.write("', '");
      out.print(participantType);
      out.write("', 'org_list');\r\n\t\t} else{\r\n\t\t\talert(\"请将表单上的选人字段设为可写！\");\r\n\t\t}\r\n\t\t");

	}else{
		
      out.write("\r\n\t\tshowList('userorggroup', 'no', '");
      out.print(show);
      out.write("', '', '");
      out.print(range);
      out.write("', '");
      out.print(selectUser);
      out.write("', '");
      out.print(selectUserName);
      out.write("', '");
      out.print(selectUserAccounts);
      out.write("', '");
      out.print(participantType);
      out.write("', 'org_list');\r\n\t\t//loadXML('userorggroup', 'no', '");
      out.print(show);
      out.write("', '', '");
      out.print(range);
      out.write("', '");
      out.print(selectUser);
      out.write("', '");
      out.print(selectUserName);
      out.write("', '");
      out.print(selectUserAccounts);
      out.write("', '");
      out.print(participantType);
      out.write("');\r\n\t\t//showList('userorggroup', 'no', 'user', '', '*176206*', '', '', '', '9', 'org_list\r\n\t\t");

	}
	
      out.write("\r\n}\r\n</SCRIPT>\r\n");

stmt.close();
conn.close();

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
