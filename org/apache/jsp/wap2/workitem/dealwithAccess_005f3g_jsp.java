/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:46:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wap2.workitem;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.wap.util.WapUtil;
import com.js.cooperate.po.NodeOpinionPO;
import com.js.cooperate.bean.CooperateBean;
import java.util.Date;

public final class dealwithAccess_005f3g_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("com.js.wap.util.WapUtil");
    _jspx_imports_classes.add("com.js.cooperate.bean.CooperateBean");
    _jspx_imports_classes.add("com.js.cooperate.po.NodeOpinionPO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n");

request.setCharacterEncoding("UTF-8");
String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
String beginIndex=request.getParameter("beginIndex").toString();
		String message="";
		String title="";
		String comeFrom=request.getParameter("comeFrom");
		
		//提交处理意见及新增加的后续处理人（只增加直接后继）
	    String userId=(String)session.getAttribute(WapUtil.EMP_ID);
		String userName=(String)session.getAttribute(WapUtil.EMP_NAME);
			
		String bodyId=request.getParameter("bodyId");
		String memberId=request.getParameter("memberId");
		String content=request.getParameter("reply_content");
		String type=request.getParameter("type");
		if(content.equals("")||content==null){
		    content="已阅";
		}
		String selPersonIds=request.getParameter("selPersonIds");
		String selPersonNames=request.getParameter("selPersonNames");
		String[] attachName=request.getParameterValues("attachName");
		String[] attachSaveName=request.getParameterValues("attachSaveName");
		String tracker=request.getParameter("tracker")==null?"0":"1";
			
		NodeOpinionPO nopo=new NodeOpinionPO();
		nopo.setBodyId(Long.valueOf(bodyId));
		//System.out.println(content);
		nopo.setContent(content);
		nopo.setEmpId(Long.valueOf(userId));
		nopo.setEmpName(userName);
		nopo.setSendTime(new Date());
		nopo.setPreId(Long.valueOf(0));
			
			
			
		if(request.getParameter("isHidden")==null){
			nopo.setIsHidden(Integer.valueOf(0));
		}else{
			nopo.setIsHidden(Integer.valueOf(1));
		}
			
		CooperateBean cbean=new CooperateBean();
				
		try {
			cbean.dealwith(nopo,memberId,tracker,selPersonIds,selPersonNames,attachName,attachSaveName,null);
			message="办理成功，请返回！";
			title="成功";
		} catch (Exception e) {
	        message="办理失败，请重试！";	
	        title="失败";	
		}		

      out.write("\r\n<HTML xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<HEAD>\r\n<TITLE>");
      out.print(title );
      out.write("</TITLE>\r\n<META content=\"text/html; charset=UTF-8\" http-equiv=Content-Type>\r\n<META name=viewport content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\r\n<META name=apple-touch-fullscreen content=YES>\r\n<META name=apple-mobile-web-app-capable content=no>\r\n<LINK rel=apple-touch-icon href=\"");
      out.print(path );
      out.write("/wap2/images/iphone.jpg\">\r\n<LINK rel=stylesheet type=text/css href=\"");
      out.print(path );
      out.write("/wap2/css/main_3g.css\">\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path );
      out.write("/wap2/js/cookie.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path );
      out.write("/wap2/js/util.js\"></SCRIPT>\r\n<SCRIPT type=application/x-javascript src=\"");
      out.print(path );
      out.write("/wap2/js/frost.js\"></SCRIPT>\r\n<META name=GENERATOR content=\"MSHTML 8.00.6001.19154\">\r\n\r\n</head>\r\n");

String url="";
if(type.equals("workdealwith")){
	url=path+"/WorkDealWithAction.do?action=list&status=0&beginIndex="+beginIndex;	
	}else{
	if(comeFrom.equals("1")){
	url=path+"/WapCoopAction.do?action=listseverals";
    }else{
	url=path+"/WapCoopAction.do?action=list&status=10";
	} 
}

      out.write("\r\n<DIV id=dd class=main>\r\n       <DIV id=top>\r\n           <SPAN id=lp><DIV class=btn_2><A href=\"");
      out.print(path);
      out.write("/wap2/index_3g.jsp\">桌面</A></DIV></SPAN>\r\n       </DIV>\r\n       <DIV class=height2></DIV>\r\n<div align=\"center\">\r\n\t<br/>");
      out.print(message );
      out.write("<br/><br/>\r\n\t<input type=\"button\" class=\"button4\" value=\"返 回\" onclick=\"javascript:location.href='");
      out.print(url);
      out.write("'\"/>\r\n</div>\r\n</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
