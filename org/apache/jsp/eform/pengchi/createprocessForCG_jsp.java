/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:03:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.eform.pengchi;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.util.util.DataSourceBase;
import com.js.util.util.CharacterTool;
import com.js.system.util.StaticParam;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.jdom.input.SAXBuilder;
import org.jdom.Element;
import org.jdom.Document;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import com.js.oa.form.pengchi.CreateProcessForZfd;
import com.js.oa.form.pengchi.GetPersoninfo;

public final class createprocessForCG_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.util.util.CharacterTool");
    _jspx_imports_classes.add("com.js.oa.form.pengchi.CreateProcessForZfd");
    _jspx_imports_classes.add("org.jdom.input.SAXBuilder");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.js.oa.form.pengchi.GetPersoninfo");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.jdom.Document");
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.js.system.util.StaticParam");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.js.util.util.DataSourceBase");
    _jspx_imports_classes.add("org.jdom.Element");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

response.setHeader("Cache-Control","no-store");
response.setHeader("Pragma","no-cache");
response.setDateHeader ("Expires", 0);
StringBuffer buffer=new StringBuffer("<?xml version=\"1.0\" encoding=\"GBK\"?><root>");

//String sql=request.getParameter("sql");
String paras=request.getParameter("para");
String[] parArray=paras.split(";;;;");
String gysbm=paras.split(";;;;")[0];
//String zfdh=paras.split(";;;;")[1].substring(2);
//String gysbm="20000451";
//String zfdh="16000503";
String zfdh="";
if(parArray[1].length()==10){//一个支付单号的情况
	zfdh=parArray[1].substring(2);
}else if(parArray[1].length()>10){//多个支付单号的情况
	String zfdhTemp=parArray[1];
	String[] zfdhArray=zfdhTemp.split(",");
	for(int i=0;i<zfdhArray.length;i++){
		zfdh+=zfdhArray[i].substring(2)+",";
	}
	if(zfdh.length()>0){
		zfdh=zfdh.substring(0,zfdh.length()-1);
	}
}
CreateProcessForZfd zfdp=new CreateProcessForZfd();
List<Map<String,String>> zfData=zfdp.getFieldValueForZf(gysbm,zfdh);
List<Map<String,String>> cgData=new ArrayList<Map<String,String>>();;

if( zfData.size()>0 ){
	
	for(Map<String,String> zfd:zfData){
		if(zfd.get("sfyf").equals("是")){
			cgData=zfdp.getFieldValueForYfk(gysbm, zfdh);
		}else{
			cgData=zfdp.getFieldValueForCg(gysbm, zfdh);
		}			
			if(cgData.size()>0){
				for(Map<String,String> cg:cgData){
					 if(zfd.get("gs").equals(cg.get("gs")) && zfd.get("dct").equals(cg.get("dct")) && zfd.get("doc").equals(cg.get("doc"))){
							
							buffer.append("<datas>");
							//采购明细
							String sl=cg.get("sl").trim();//数量的精确计算
							String dw="";//查询单位名称
							sl=Math.round(Float.valueOf(sl)*10000.0)/10000.0+"";
							buffer.append("<data>");
							buffer.append("<formfield>").append("fph").append("</formfield>");
							buffer.append("<fielddata>").append(cg.get("fph").trim()).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("<data>");
							buffer.append("<formfield>").append("ddlx").append("</formfield>");
							buffer.append("<fielddata>").append(cg.get("ddlx").trim()).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("<data>");
							buffer.append("<formfield>").append("ddh").append("</formfield>");
							buffer.append("<fielddata>").append(cg.get("ddh").trim()).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("<data>");
							buffer.append("<formfield>").append("lh").append("</formfield>");
							buffer.append("<fielddata>").append(cg.get("lh").trim()).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("<data>");
							buffer.append("<formfield>").append("lp").append("</formfield>");
							buffer.append("<fielddata>").append(cg.get("lp").trim()).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("<data>");
							buffer.append("<formfield>").append("sl").append("</formfield>");
							buffer.append("<fielddata>").append(sl).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("<data>");
							buffer.append("<formfield>").append("dj").append("</formfield>");
							buffer.append("<fielddata>").append(cg.get("dj").trim()).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("<data>");
							buffer.append("<formfield>").append("je").append("</formfield>");
							buffer.append("<fielddata>").append(cg.get("je").trim()).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("<data>");
							buffer.append("<formfield>").append("gg").append("</formfield>");
							buffer.append("<fielddata>").append(cg.get("gg").trim()).append("</fielddata>");
							buffer.append("</data>");
							
							if(cg.get("dw").trim().equals("KG")){
								dw="KG";
							}else{
								dw=GetPersoninfo.getDwName(cg.get("dw").trim());
							}
							buffer.append("<data>");
							buffer.append("<formfield>").append("dw").append("</formfield>");
							buffer.append("<fielddata>").append(dw).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("<data>");
							buffer.append("<formfield>").append("ysrq").append("</formfield>");
							buffer.append("<fielddata>").append(cg.get("ysrq").trim()).append("</fielddata>");
							buffer.append("</data>");
							
							buffer.append("</datas>");
							
					 }
					 
				 }
			}
		 	
		 			
	}
	
}
buffer.append("</root>");
out.clear();
out.print(buffer.toString());

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
