/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 10:05:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.doc.doc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Calendar;

public final class doc_005fsendfile_005fgd_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");

request.setCharacterEncoding("GBK");
if(request.getParameter("gd") != null){

    //归档
    String pageContent = request.getParameter("pageContent");
    
    System.out.println("pageContent:"+pageContent);
    
    int i = pageContent.indexOf("gd();");
    pageContent = pageContent.substring(0, i) + pageContent.substring(i + 5);
    
    
	Calendar now = Calendar.getInstance();
    String fileName = "GW_" + request.getParameter("fileId") + "_" + now.get(Calendar.YEAR) + (now.get(Calendar.MONTH) + 1) + now.get(Calendar.DATE) + ".htm";

	String returnValue = new com.js.oa.archives.service.ArchivesBD().archivesPigeonholeSet("GWGL",session.getAttribute("domainId")==null?"-1":session.getAttribute("domainId").toString());
	 new com.js.oa.archives.action.ArchivesAction().addArchivesWaitPigeonhole(request.getParameter("fileTitle"),fileName,Long.valueOf(request.getParameter("fileId")),"GWGL",session.getAttribute("userName").toString(), new java.util.Date(), returnValue, request, session.getAttribute("userId").toString(), session.getAttribute("orgId").toString(), "FWGL");

	//取绝对路径进行归档 
	java.io.File file = new java.io.File(getServletConfig().getServletContext().getRealPath("/")+"\\archivesfile\\" + fileName);
	if(!file.exists()){
		file.createNewFile();
	}
    java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream(getServletConfig().getServletContext().getRealPath("/")+"/archivesfile/" + fileName));
    pw.println("<html><head><title>发文归档</title></head>");
    pw.println("<body leftmargin=0 topmargin=0>");
    pw.println(pageContent);
    pw.println("</body></html>");
    pw.close();

    
      out.write("\r\n    <script language=\"javascript\">\r\n    <!--\r\n    var accessory = parent.document.all.ACCESSORY;\r\n    if(accessory){\r\n        if(accessory.length){\r\n            accessory[0].value = \"");
      out.print(fileName);
      out.write("\";\r\n        }else{\r\n            accessory.value = \"");
      out.print(fileName);
      out.write("\";\r\n        }\r\n    }\r\n\tif(parent){\r\n\t\tif(parent.form1){\r\n\t\t\tparent.form1.submit();\r\n\t\t}else{\r\n\t\t\twindow.close();\r\n\t\t}\r\n\t}else{\r\n\t\twindow.close();\r\n\t}\r\n\t\r\n    //-->\r\n    </script>\r\n    ");

    return;
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
