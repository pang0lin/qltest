/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:38:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class commonImportPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n<SCRIPT language=javascript src=\"/jsoa/js/jquery-1.4.2.min.js\"></SCRIPT>\r\n<script type=\"text/javascript\">\r\n\r\nvar draging2017 = false;//是否拖拽中  \r\nvar dragElement2017 = null;//当前拖拽的th  \r\nvar offsetLeft2017 = 0;//当前拖拽的th与绝对左坐标  \r\nvar offsetWidth2017 = 0;//当前拖拽的th的绝对宽度  \r\nvar lastListTableTd2017 = null;//最后一个可变td\r\nvar tempWidth2017=0;//最后一次改变TD的宽度\r\nfunction mousedown2017(event){  \r\n    if(draging2017) return; \r\n   \r\n    var tempdragElement2017 =event.srcElement?event.srcElement:event.target;\r\n    if(tempdragElement2017.tagName.toLowerCase()!=\"td\"){\r\n    \treturn;\r\n    }\r\n    var tempL=tempdragElement2017.offsetLeft+tempdragElement2017.offsetWidth;\r\n    var cursorL=event.clientX;\r\n    if(tempL-cursorL<10){\r\n    \tdraging2017 = true;  \r\n        dragElement2017 = event.srcElement?event.srcElement:event.target; \r\n        tempWidth2017=$(dragElement2017).width();\r\n        document.body.onselectstart = function(){return false;};//拖拽的时候，鼠标滑过字的时候，不让选中(默认鼠标选中字的效果,大家都知道)  \r\n\r\n    }else{\r\n    \tmouseup2017();  \r\n    }\r\n}  \r\nfunction mouseup2017(){  \r\n");
      out.write("    draging2017 = false;  \r\n    dragElement2017 = null;  \r\n    document.body.onselectstart = function(){return true};  \r\n}  \r\nfunction mousemove2017(event){  \r\n    if(draging2017 && dragElement2017){\r\n    \t\r\n    \toffsetLeft2017 = dragElement2017.offsetLeft;\r\n    \toffsetWidth2017 = dragElement2017.offsetWidth;\r\n        var width = event.clientX-offsetLeft2017;\r\n        if(lastListTableTd2017&&lastListTableTd2017.width()<20&&tempWidth2017<width){\r\n        \treturn;\r\n        }\r\n        if(width>20){  \r\n            dragElement2017.style.width = width;  \r\n        }else{  \r\n        \tif(offsetWidth2017>20){\r\n        \t\tdragElement2017.style.width = offsetWidth2017;\r\n        \t}else{\r\n        \t\tdragElement2017.style.width = 20;\r\n        \t}\r\n        }  \r\n        tempWidth2017= width;\r\n    }  \r\n}  \r\n\r\nfunction mouseover2017(event){ \r\n   var tempdragElement2017 = event.srcElement?event.srcElement:event.target;\r\n   if(tempdragElement2017.tagName.toLowerCase()!=\"td\"){\r\n    \treturn;\r\n    }\r\n    var tempL=tempdragElement2017.offsetLeft+tempdragElement2017.offsetWidth;\r\n");
      out.write("    var cursorL=event.clientX;\r\n    if(tempL-cursorL<10){\r\n    \ttempdragElement2017.style.cursor = \"col-resize\";  \r\n    }else{\r\n    \ttempdragElement2017.style.cursor = \"auto\";  \r\n    }\r\n}\r\nfunction onloadSetTdWidth2017(){\r\n\t$(\"table.listTable\").width($(\"table.listTable\").innerWidth());\r\n\tvar lastLen=$(\"table.listTable td.listTableHeadLast\").length;\r\n\tif(lastLen==0){\r\n\t\t$(\"table.listTable td.listTableHead:last\").removeClass(\"listTableHead\").addClass(\"listTableHeadLast\");\r\n\t}\r\n\tlastListTableTd2017=$(\"table.listTable td.listTableHeadLast\");\r\n\t$(\"table.listTable td.listTableHead\").each(function(){\r\n\t\tthis.style.width=this.offsetWidth;\r\n\t});\r\n\t$(\"table.listTable tr:first\").find(\"td\").each(function(){\r\n\t\t$(this).removeAttr(\"width\");\r\n\t});\r\n} \r\n$(document).ready(function(){\r\n\tonloadSetTdWidth2017();\r\n\t$(\"table.listTable td.listTableHead\").mousedown(function(e){\r\n\t\tmousedown2017(e);\r\n\t});\r\n\t$(\"table.listTable td.listTableHead\").mousemove(function(e){\r\n\t\tmouseover2017(e);\r\n\t});\r\n\t$(\"table.listTable\").mouseup(function(e){\r\n");
      out.write("\t\tmouseup2017();\r\n\t});\r\n\t$(\"table.listTable\").mousemove(function(e){\r\n\t\tmousemove2017(e);\r\n\t});\r\n});\r\n/**\r\n$(window).resize(function(){\r\n\tonloadSetTdWidth2017();\r\n});*/\r\n</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
