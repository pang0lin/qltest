/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-01-06 09:59:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.weixin.workflow.searchInfo;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.js.lang.Resource;
import java.util.*;

public final class search_005finfoForWeiXin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.js.lang.Resource");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n");




      out.write("\r\n<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t<link rel=\"stylesheet\" href=\"/jsoa/css/weixin/weixin_main.css\">\r\n\t\t<link rel=\"stylesheet\" href=\"/jsoa/css/weixin/search.css\">\r\n\t\t<style type=\"text/css\">\r\n\t\t#searchInforBody {\r\n\t\t\twidth: 100%;\r\n\t\t\tdisplay: none;\r\n\t\t\tposition: fixed;\r\n\t\t\ttop: 0;\r\n\t\t\tleft: 0;\r\n\t\t\tbackground: #efefef;\r\n\t\t\tz-index: 100;\r\n\t\t\tmargin: 0;\r\n\t\t\tpadding: 0;\r\n\t\t\toverflow-y:auto;\r\n\t\t\theight: 100%;\r\n\t\t}\r\n\t\t#searchInforBody #searchInforButtons {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 45px;\r\n\t\t\ttext-align: center;\r\n\t\t\twhite-space: nowrap;\r\n\t\t\tdisplay: flex;\r\n\t\t\tdispaly: -webkit-flex;\r\n\t\t\tdisplay: -webkit-box;\r\n\t\t}\r\n\t\t#searchInforBody #searchInforButtons .searchInforButton {\r\n\t\t\tbackground: #efefef;\r\n\t\t\ttext-align: center;\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 45px;\r\n\t\t\tline-height: 45px;\r\n\t\t\tborder: 1px solid #ccc;\r\n\t\t\t-webkit-box-flex: 1;\r\n\t\t\t-webkit-flex: 1;\r\n\t\t\tflex: 1;\r\n\t\t\tborder-radius: 5px;\r\n\t\t\t-webkit-border-radius: 5px;\r\n\t\t\t-moz-border-radius: 5px;\r\n\t\t}\r\n\t\t\r\n\t\t.searchInforfileButton {\r\n\t\t\ttext-align: center;\r\n\t\t\twidth: 98%;\r\n");
      out.write("\t\t\tborder: 1px solid #ccc;\r\n\t\t\tline-height: 100%;\r\n\t\t\tpadding: 4%;\r\n\t\t\t-webkit-box-flex: 1;\r\n\t\t\t-webkit-flex: 1;\r\n\t\t\tflex: 1;\r\n\t\t\tborder-radius: 5px;\r\n\t\t\t-webkit-border-radius: 5px;\r\n\t\t\t-moz-border-radius: 5px;\r\n\t\t\tbackground: #09f;\r\n\t\t\tmargin: 1%;\r\n\t\t}\r\n\t\t</style>\r\n\t\t<script language=\"javascript\">\r\n\t\tfunction hiddenSearchInforBody(){\r\n\t\t\tdocument.getElementById(\"searchInforBody\").style.display = \"none\";\r\n\t\t}\r\n\t\t\r\n\t\tfunction getXmlHttp(){\r\n\t\t\tvar xmlhttp;\r\n\t\t\t//开始初始化XMLHttpRequest对象\r\n\t\t\tif(window.XMLHttpRequest) { //Mozilla 浏览器\r\n\t\t\t\txmlhttp = new XMLHttpRequest();\r\n\t\t\t\tif (xmlhttp.overrideMimeType) {//设置MiME类别\r\n\t\t\t\t\txmlhttp.overrideMimeType('text/xml');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (window.ActiveXObject) { // IE浏览器\r\n\t\t\t\ttry {\r\n\t\t\t\t\txmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\txmlhttp = new ActiveXObject(\"MSXML2.XMLHTTP\");\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\talert(\"您看到此信息，说明您的浏览器不支持XML解析。\\r\\n请在弹出页面中下载XML解析器并安装！\");\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn xmlhttp;\r\n\t\t}\r\n\t\tfunction showSearchInfo(customName){\r\n");
      out.write("\t\t    var func = \"\";\r\n\t\t    document.getElementById(\"searchInforBody\").style.display = \"block\";\r\n\t\t\tif(customName!=null && customName.indexOf(\"customName\")>=0){\r\n\t\t\t\tvar content = \"\";\r\n\t\t\t\tcustomName=customName.substring(customName.indexOf(\"=\")+1,customName.length);\r\n\t\t\t \txmlhttpAjax = getXmlHttp();\r\n\t\t\t \txmlhttpAjax.open(\"POST\",\"/jsoa/weixin/workflow/searchInfo/search_infoAjaxForWeiXin.jsp?action=searInforObject&customName=\"+encodeURI(encodeURI(customName)),false);\r\n\t\t\t \txmlhttpAjax.send(null);\r\n\t\t\t \tif (xmlhttpAjax.readyState==4 && xmlhttpAjax.status==200){\r\n\t\t\t \t    content = xmlhttpAjax.responseText;\r\n\t\t\t \t    \r\n\t\t\t \t    document.getElementById(\"searchInforBody\").innerHTML=content;\r\n\t\t\t \t    var buts = document.getElementById(\"searchInforButtons\");\r\n\t\t\t        var butString = \"\";\r\n\t\t\t        butString += \"<div class='searchInforButton'  onclick='hiddenSearchInforBody()'>取消</div>\";\r\n\t\t\t        buts.innerHTML = butString;\r\n\t\t\t \t}\r\n\t\t\t}else{\r\n\t\t\t    location.href=customName;\r\n\t\t\t}\r\n\t\t \t\r\n\t\t } \r\n\t\t\r\n\t\t</script>\r\n");
      out.write("\t</head>\r\n    <body>\r\n\t\t<div id=\"searchInforBody\">\r\n\t\t\r\n\t\t</div>\r\n\t</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
